import LeanAPAP.Mathlib.Algebra.Support
import LeanAPAP.Mathlib.Analysis.Complex.Basic
import LeanAPAP.Mathlib.Data.Complex.Basic
import LeanAPAP.Mathlib.Data.Complex.Exponential
import LeanAPAP.Prereqs.Dissociation
import LeanAPAP.Prereqs.DFT

/-!
# Rudin's inequality
-/

open Finset Function Real
open Complex (I re im)
open scoped BigOps Nat NNReal ENNReal

variable {Œ± : Type*} [Fintype Œ±] [AddCommGroup Œ±] {p : ‚Ñï}

/-- **Rudin's inequality**, exponential form. -/
lemma rudin_exp_ineq (hp : 2 ‚â§ p) (f : Œ± ‚Üí ‚ÑÇ) (hf : AddDissociated $ support $ dft f) :
    ùîº a, exp |(f a).re| ‚â§ exp (‚Äñf‚Äñ_[2] ^ 2 / 2) :=
  sorry

private lemma rudin_ineq_aux (hp : 2 ‚â§ p) (f : Œ± ‚Üí ‚ÑÇ) (hf : AddDissociated $ support $ dft f) :
    ‚Äñre ‚àò f‚Äñ_[p] ‚â§ exp 2‚Åª¬π * sqrt p * ‚Äñf‚Äñ_[2] := by
  wlog hfp : ‚Äñf‚Äñ_[2] = sqrt p with H
  ¬∑ obtain rfl | hf := eq_or_ne f 0
    ¬∑ simp
    specialize H hp ((sqrt p / ‚Äñf‚Äñ_[2]) ‚Ä¢ f) ?_
    ¬∑ rwa [dft_smul, support_smul']
      sorry -- positivity
    simp_rw [Function.comp_def, Pi.smul_apply, Complex.smul_re, ‚ÜêPi.smul_def] at H
    rw [lpNorm_smul, lpNorm_smul, norm_div, norm_of_nonneg, norm_of_nonneg, div_mul_cancel,
      div_mul_comm, mul_le_mul_right, div_le_iff] at H
    exact H rfl
    ¬∑ sorry -- positivity
    ¬∑ positivity
    ¬∑ sorry -- positivity
    ¬∑ sorry -- positivity
    ¬∑ positivity
    ¬∑ norm_cast
      exact one_le_two.trans hp
    ¬∑ norm_num
  have h := rudin_exp_ineq hp f hf
  rw [hfp, sq_sqrt] at h
  -- We currently can't fill the next `sorry`
  have : Fintype.card Œ± * p ! ‚â§ p ^ p := sorry -- false because wrong normalisation
  replace h := (expect_le_expect Œª a _ ‚Ü¶ pow_div_factorial_le_exp sorry p).trans h
  simp_rw [‚Üêexpect_div, expect, ‚Üênorm_eq_abs, card_univ, div_div, ‚ÜêNat.cast_mul] at h
  rw [‚ÜêlpNorm_pow_eq_sum, div_le_iff, div_eq_inv_mul, exp_mul, rpow_nat_cast] at h
  replace h := h.trans $ mul_le_mul_of_nonneg_left (Nat.cast_le.2 this) $ by positivity
  rw [Nat.cast_pow, ‚Üêmul_pow, pow_le_pow_iff_left] at h
  rwa [hfp, mul_assoc, ‚Üêsq, sq_sqrt]
  all_goals sorry -- positivity

-- This actually uses `Complex.ext`

/-- **Rudin's inequality**, usual form. -/
lemma rudin_ineq (hp : 2 ‚â§ p) (f : Œ± ‚Üí ‚ÑÇ) (hf : AddDissociated $ support $ dft f) :
    ‚Äñf‚Äñ_[p] ‚â§ 2 * exp 2‚Åª¬π * sqrt p * ‚Äñf‚Äñ_[2] := by
  have hp‚ÇÅ : (1 : ‚Ñù‚â•0‚àû) ‚â§ p := by exact_mod_cast one_le_two.trans hp
  calc
    ‚Äñf‚Äñ_[p] = ‚Äñ(fun a ‚Ü¶ ((f a).re : ‚ÑÇ)) + I ‚Ä¢ (fun a ‚Ü¶ ((f a).im : ‚ÑÇ))‚Äñ_[p]
      := by congr with a <;> simp
    _ ‚â§ ‚Äñfun a ‚Ü¶ ((f a).re : ‚ÑÇ)‚Äñ_[p] + ‚ÄñI ‚Ä¢ (fun a ‚Ü¶ ((f a).im : ‚ÑÇ))‚Äñ_[p]
      := lpNorm_add_le hp‚ÇÅ _ _
    _ = ‚Äñre ‚àò f‚Äñ_[p] + ‚Äñre ‚àò ((-I) ‚Ä¢ f)‚Äñ_[p] := by
        rw [lpNorm_smul hp‚ÇÅ, Complex.norm_I, one_mul, ‚ÜêComplex.lpNorm_coe_comp,
          ‚ÜêComplex.lpNorm_coe_comp]
        congr
        ext a : 1
        simp
    _ ‚â§ exp 2‚Åª¬π * sqrt p * ‚Äñf‚Äñ_[2] + exp 2‚Åª¬π * sqrt p * ‚Äñ(-I) ‚Ä¢ f‚Äñ_[2]
      := add_le_add (rudin_ineq_aux hp _ hf) $ rudin_ineq_aux hp _ $ by
        rwa [dft_smul, support_smul']; simp
    _ = 2 * exp 2‚Åª¬π * sqrt p * ‚Äñf‚Äñ_[2]
      := by rw [mul_assoc (2 : ‚Ñù), mul_assoc (2 : ‚Ñù), two_mul, lpNorm_smul one_le_two,
          norm_neg, Complex.norm_I, one_mul]
