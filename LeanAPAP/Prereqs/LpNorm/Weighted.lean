import LeanAPAP.Prereqs.LpNorm.Discrete.Basic

/-!
# Lp norms
-/

open Finset Function Real
open scoped ComplexConjugate ENNReal NNReal

variable {Œπ ùïú : Type*} [Fintype Œπ]

/-! #### Weighted Lp norm -/

section NormedAddCommGroup
variable {Œ± : Œπ ‚Üí Type*} [‚àÄ i, NormedAddCommGroup (Œ± i)] {p q : ‚Ñù‚â•0} {w : Œπ ‚Üí ‚Ñù‚â•0}
  {f g h : ‚àÄ i, Œ± i}

/-- The weighted Lp norm of a function. -/
noncomputable def wlpNorm (p : ‚Ñù‚â•0) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Ñù :=
  ‚Äñfun i ‚Ü¶ w i ^ (p‚Åª¬π : ‚Ñù) ‚Ä¢ ‚Äñf i‚Äñ‚Äñ_[p]

notation "‚Äñ" f "‚Äñ_[" p ", " w "]" => wlpNorm p w f

@[simp]
lemma wlpNorm_one_eq_lpNorm (p : ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[p, 1] = ‚Äñf‚Äñ_[p] := by
  simp [wlpNorm, l0Norm_eq_card, lpNorm_eq_sum, *]

@[simp]
lemma wlpNorm_const_right (hp : 1 ‚â§ p) (w : ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, const _ w] = w ^ (p‚Åª¬π : ‚Ñù) * ‚Äñf‚Äñ_[p] := by
  simpa [wlpNorm, -norm_eq_abs, norm_of_nonneg, Pi.smul_def, NNReal.smul_def, rpow_nonneg] using
    lpNorm_smul (ENNReal.one_le_coe_iff.2 hp) (w ^ (p‚Åª¬π : ‚Ñù) : ‚Ñù) fun i ‚Ü¶ ‚Äñf i‚Äñ

lemma wlpNorm_eq_sum (hp : p ‚â† 0) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] = (‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ ^ (p : ‚Ñù)) ^ (p‚Åª¬π : ‚Ñù) := by
  have : (p : ‚Ñù) ‚â† 0 := by positivity
  simp_rw [wlpNorm, lpNorm_eq_sum hp, NNReal.smul_def, norm_smul]
  simp only [NNReal.coe_rpow, norm_norm, Algebra.id.smul_eq_mul, mul_rpow, norm_nonneg,
    rpow_nonneg, hp, NNReal.coe_nonneg, norm_of_nonneg, rpow_inv_rpow _ this]

lemma wlpNorm_eq_sum' {p : ‚Ñù} (hp : 0 < p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p.toNNReal, w] = (‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ ^ p) ^ p‚Åª¬π := by
  rw [wlpNorm_eq_sum] <;> simp [hp, hp.ne', hp.le]

lemma wlpNorm_rpow_eq_sum {p : ‚Ñù‚â•0} (hp : p ‚â† 0) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] ^ (p : ‚Ñù) = ‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ ^ (p : ‚Ñù) := by
  rw [wlpNorm_eq_sum hp, rpow_inv_rpow] -- positivity
  ¬∑ exact sum_nonneg fun _ _ ‚Ü¶ by positivity
  ¬∑ positivity

lemma wlpNorm_pow_eq_sum {p : ‚Ñï} (hp : p ‚â† 0) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] ^ p = ‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ ^ p := by
  simpa using wlpNorm_rpow_eq_sum (Nat.cast_ne_zero.2 hp) w f

lemma wl1Norm_eq_sum (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[1, w] = ‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ := by
  simp [wlpNorm_eq_sum]

lemma wl0Norm_eq_card (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[0, w] = {i | f i ‚â† 0}.toFinite.toFinset.card := by simp [wlpNorm, l0Norm_eq_card]

@[simp]
lemma wlpNorm_zero (w : Œπ ‚Üí ‚Ñù‚â•0) : ‚Äñ(0 : ‚àÄ i, Œ± i)‚Äñ_[p, w] = 0 := by simp [wlpNorm, ‚ÜêPi.zero_def]

@[simp] lemma wlpNorm_norm (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Äñfun i ‚Ü¶ ‚Äñf i‚Äñ‚Äñ_[p, w] = ‚Äñf‚Äñ_[p, w] := by
  obtain rfl | hp := @eq_zero_or_pos _ _ p <;> simp [wl0Norm_eq_card, wlpNorm_eq_sum, *, ne_of_gt]

@[simp]lemma wlpNorm_neg (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Äñ-f‚Äñ_[p, w] = ‚Äñf‚Äñ_[p, w] := by
  simp [‚ÜêwlpNorm_norm _ (-f)]

lemma wlpNorm_sub_comm (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) : ‚Äñf - g‚Äñ_[p, w] = ‚Äñg - f‚Äñ_[p, w] := by
  simp [‚ÜêwlpNorm_neg _ (f - g)]

@[simp] lemma wlpNorm_nonneg : 0 ‚â§ ‚Äñf‚Äñ_[p, w] := lpNorm_nonneg

lemma wlpNorm_mono_right (hpq : p ‚â§ q) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñf‚Äñ_[q, w] :=
  sorry

section one_le

lemma wlpNorm_add_le (hp : 1 ‚â§ p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf + g‚Äñ_[p, w] ‚â§ ‚Äñf‚Äñ_[p, w] + ‚Äñg‚Äñ_[p, w] := by
  unfold wlpNorm
  refine (lpNorm_add_le (by exact_mod_cast hp) _ _).trans'
    (lpNorm_mono (fun i ‚Ü¶ by dsimp; positivity) fun i ‚Ü¶ ?_)
  dsimp
  rw [‚Üêsmul_add]
  exact smul_le_smul_of_nonneg_left (norm_add_le _ _) (zero_le _)

lemma wlpNorm_sub_le (hp : 1 ‚â§ p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf - g‚Äñ_[p, w] ‚â§ ‚Äñf‚Äñ_[p, w] + ‚Äñg‚Äñ_[p, w] := by
  simpa [sub_eq_add_neg] using wlpNorm_add_le hp w f (-g)

lemma wlpNorm_le_wlpNorm_add_wlpNorm_sub' (hp : 1 ‚â§ p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñg‚Äñ_[p, w] + ‚Äñf - g‚Äñ_[p, w] := by simpa using wlpNorm_add_le hp w g (f - g)

lemma wlpNorm_le_wlpNorm_add_wlpNorm_sub (hp : 1 ‚â§ p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñg‚Äñ_[p, w] + ‚Äñg - f‚Äñ_[p, w] := by
  rw [wlpNorm_sub_comm]; exact wlpNorm_le_wlpNorm_add_wlpNorm_sub' hp _ _ _

lemma wlpNorm_le_add_wlpNorm_add (hp : 1 ‚â§ p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñf + g‚Äñ_[p, w] + ‚Äñg‚Äñ_[p, w] := by simpa using wlpNorm_add_le hp w (f + g) (-g)

lemma wlpNorm_sub_le_wlpNorm_sub_add_wlpNorm_sub (hp : 1 ‚â§ p) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf - h‚Äñ_[p, w] ‚â§ ‚Äñf - g‚Äñ_[p, w] + ‚Äñg - h‚Äñ_[p, w] := by
  simpa using wlpNorm_add_le hp w (f - g) (g - h)

variable [NormedField ùïú] [‚àÄ i, NormedSpace ùïú (Œ± i)]

-- TODO: `p ‚â† 0` is enough
lemma wlpNorm_smul (hp : 1 ‚â§ p) (c : ùïú) (f : ‚àÄ i, Œ± i) : ‚Äñc ‚Ä¢ f‚Äñ_[p, w] = ‚Äñc‚Äñ * ‚Äñf‚Äñ_[p, w] := by
  rw [wlpNorm, wlpNorm]
  have : (1 : ‚Ñù‚â•0‚àû) ‚â§ p := by exact_mod_cast hp
  have := lpNorm_smul this ‚Äñc‚Äñ fun i ‚Ü¶ w i ^ (p‚Åª¬π : ‚Ñù) ‚Ä¢ ‚Äñf i‚Äñ
  rw [norm_norm] at this
  rw [‚Üêthis]
  congr with i : 1
  simp only [Pi.smul_apply, Algebra.id.smul_eq_mul, Algebra.mul_smul_comm, norm_smul]

@[simp]
lemma wlpNorm_smul_right (hp : p ‚â† 0) (c : ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, c ‚Ä¢ w] = c ^ (p‚Åª¬π : ‚Ñù) * ‚Äñf‚Äñ_[p, w] := by
  simp only [wlpNorm_eq_sum hp, NNReal.smul_def, Pi.smul_apply, Algebra.id.smul_eq_mul,
    NNReal.coe_mul, mul_assoc, ‚Üêmul_sum]
  exact mul_rpow (by positivity) (sum_nonneg fun _ _ ‚Ü¶ by positivity) -- positivity

variable [‚àÄ i, NormedSpace ‚Ñù (Œ± i)]

lemma wlpNorm_nsmul (hp : 1 ‚â§ p) (n : ‚Ñï) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñn ‚Ä¢ f‚Äñ_[p, w] = n ‚Ä¢ ‚Äñf‚Äñ_[p, w] := by
  rw [‚Üê Nat.cast_smul_eq_nsmul ‚Ñù, wlpNorm_smul hp, RCLike.norm_natCast, nsmul_eq_mul]

end one_le

end NormedAddCommGroup

section Real
variable {p : ‚Ñù‚â•0} {w : Œπ ‚Üí ‚Ñù‚â•0} {f g : Œπ ‚Üí ‚Ñù}

@[simp]
lemma wlpNorm_one (hp : p ‚â† 0) (w : Œπ ‚Üí ‚Ñù‚â•0) :
    ‚Äñ(1 : Œπ ‚Üí ‚Ñù)‚Äñ_[p, w] = (‚àë i, w i : ‚Ñù) ^ (p‚Åª¬π : ‚Ñù) := by
  simp [wlpNorm_eq_sum hp, NNReal.smul_def]

lemma wlpNorm_mono (hf : 0 ‚â§ f) (hfg : f ‚â§ g) : ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñg‚Äñ_[p, w] :=
  lpNorm_mono (fun i ‚Ü¶ by dsimp; positivity) fun i ‚Ü¶ smul_le_smul_of_nonneg_left
    (by rw [norm_of_nonneg (hf _), norm_of_nonneg (hf.trans hfg _)]; exact hfg _) $ by positivity

end Real

section wlpNorm
variable {Œ± Œ≤ : Type*} [AddCommGroup Œ±] [Fintype Œ±] {p : ‚Ñù‚â•0} {w : Œ± ‚Üí ‚Ñù‚â•0}

@[simp] lemma wlpNorm_translate [NormedAddCommGroup Œ≤] (a : Œ±) (f : Œ± ‚Üí Œ≤) :
    ‚ÄñœÑ a f‚Äñ_[p, œÑ a w] = ‚Äñf‚Äñ_[p, w] :=
  (lpNorm_translate a fun i ‚Ü¶ w i ^ (p‚Åª¬π : ‚Ñù) ‚Ä¢ ‚Äñf i‚Äñ : _)

@[simp]
lemma wlpNorm_conj [RCLike Œ≤] (f : Œ± ‚Üí Œ≤) : ‚Äñconj f‚Äñ_[p, w] = ‚Äñf‚Äñ_[p, w] := by simp [wlpNorm]

@[simp]
lemma wlpNorm_conjneg [RCLike Œ≤] (f : Œ± ‚Üí Œ≤) : ‚Äñconjneg f‚Äñ_[p] = ‚Äñf‚Äñ_[p] := by simp [wlpNorm]

end wlpNorm

namespace Mathlib.Meta.Positivity
open Lean Meta Qq Function

/-- The `positivity` extension which identifies expressions of the form `‚Äñf‚Äñ_[p, w]`. -/
@[positivity ‚Äñ_‚Äñ_[_, _]] def evalWLpNorm : PositivityExt where eval {u Œ±} _ _ e := do
  if let 0 := u then -- lean4#3060 means we can't combine this with the match below
    match Œ±, e with
    | ~q(‚Ñù), ~q(@wlpNorm $Œπ $instŒπ $Œ± $instnorm $p $w $f) =>
          assumeInstancesCommute
          return .nonnegative q(wlpNorm_nonneg)
    | _ => throwError "not wlpNorm"
  else
    throwError "not wlpNorm"

section Examples
section NormedAddCommGroup
variable {Œ± : Œπ ‚Üí Type*} [‚àÄ i, NormedAddCommGroup (Œ± i)] {w : Œπ ‚Üí ‚Ñù‚â•0} {f : ‚àÄ i, Œ± i}

example {p : ‚Ñù‚â•0} : 0 ‚â§ ‚Äñf‚Äñ_[p, w] := by positivity

end NormedAddCommGroup

section Complex
variable {w : Œπ ‚Üí ‚Ñù‚â•0} {f : Œπ ‚Üí ‚ÑÇ}

example {p : ‚Ñù‚â•0} : 0 ‚â§ ‚Äñf‚Äñ_[p, w] := by positivity

end Complex
end Examples
end Mathlib.Meta.Positivity
