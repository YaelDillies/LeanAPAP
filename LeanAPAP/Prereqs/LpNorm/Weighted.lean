import Mathlib.Algebra.Group.Translate
import Mathlib.Algebra.Star.Conjneg
import LeanAPAP.Prereqs.LpNorm.Discrete.Defs

/-!
# Lp norms
-/

open Finset Function Real MeasureTheory
open scoped ComplexConjugate ENNReal NNReal translate

variable {Œ± ùïú E : Type*} [MeasurableSpace Œ±]

/-! #### Weighted Lp norm -/

section NormedAddCommGroup
variable [NormedAddCommGroup E] {p q : ‚Ñù‚â•0‚àû} {w : Œ± ‚Üí ‚Ñù‚â•0} {f g h : Œ± ‚Üí E}

/-- The weighted Lp norm of a function. -/
noncomputable def wLpNorm (p : ‚Ñù‚â•0‚àû) (w : Œ± ‚Üí ‚Ñù‚â•0) (f : Œ± ‚Üí E) : ‚Ñù‚â•0 :=
  nnLpNorm f p <| .sum fun i ‚Ü¶ w i ‚Ä¢ .dirac i

notation "‚Äñ" f "‚Äñ_[" p ", " w "]" => wLpNorm p w f

@[simp] lemma wLpNorm_zero (w : Œ± ‚Üí ‚Ñù‚â•0) : ‚Äñ(0 : Œ± ‚Üí E)‚Äñ_[p, w] = 0 := by simp [wLpNorm]

@[simp] lemma wLpNorm_neg (w : Œ± ‚Üí ‚Ñù‚â•0) (f : Œ± ‚Üí E) : ‚Äñ-f‚Äñ_[p, w] = ‚Äñf‚Äñ_[p, w] := by
  simp [wLpNorm]

lemma wLpNorm_sub_comm (w : Œ± ‚Üí ‚Ñù‚â•0) (f g : Œ± ‚Üí E) : ‚Äñf - g‚Äñ_[p, w] = ‚Äñg - f‚Äñ_[p, w] := by
  simp [wLpNorm, nnLpNorm_sub_comm]

@[simp] lemma wLpNorm_one_eq_dLpNorm (p : ‚Ñù‚â•0‚àû) (f : Œ± ‚Üí E) : ‚Äñf‚Äñ_[p, 1] = ‚Äñf‚Äñ_[p] := by
  simp [wLpNorm, dLpNorm, nnLpNorm, Measure.count]

@[simp] lemma wLpNorm_exponent_zero (w : Œ± ‚Üí ‚Ñù‚â•0) (f : Œ± ‚Üí E) : ‚Äñf‚Äñ_[0, w] = 0 := by simp [wLpNorm]

@[simp] lemma wLpNorm_norm (w : Œ± ‚Üí ‚Ñù‚â•0) (f : Œ± ‚Üí E) : ‚Äñfun i ‚Ü¶ ‚Äñf i‚Äñ‚Äñ_[p, w] = ‚Äñf‚Äñ_[p, w] := by
  simp [wLpNorm]

lemma wLpNorm_smul [NormedField ùïú] [NormedSpace ùïú E] (c : ùïú) (f : Œ± ‚Üí E) (p : ‚Ñù‚â•0‚àû) (w : Œ± ‚Üí ‚Ñù‚â•0) :
    ‚Äñc ‚Ä¢ f‚Äñ_[p, w] = ‚Äñc‚Äñ‚Çä * ‚Äñf‚Äñ_[p, w] := nnLpNorm_const_smul ..

lemma wLpNorm_nsmul [NormedSpace ‚Ñù E] (n : ‚Ñï) (f : Œ± ‚Üí E) (p : ‚Ñù‚â•0‚àû) (w : Œ± ‚Üí ‚Ñù‚â•0) :
    ‚Äñn ‚Ä¢ f‚Äñ_[p, w] = n ‚Ä¢ ‚Äñf‚Äñ_[p, w] := nnLpNorm_nsmul ..

section RCLike
variable {K : Type*} [RCLike K]

@[simp] lemma wLpNorm_conj (f : Œ± ‚Üí K) : ‚Äñconj f‚Äñ_[p, w] = ‚Äñf‚Äñ_[p, w] := by simp [‚Üê wLpNorm_norm]

end RCLike

variable [Fintype Œ±]

@[simp] lemma wLpNorm_const_right (hp : p ‚â† ‚àû) (w : ‚Ñù‚â•0) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p, const _ w] = w ^ p.toReal‚Åª¬π * ‚Äñf‚Äñ_[p] := by
  simp [wLpNorm, dLpNorm, ‚Üê Finset.smul_sum, nnLpNorm_smul_measure_of_ne_top hp, Measure.count]

@[simp] lemma wLpNorm_smul_right (hp : p ‚â† ‚ä§) (c : ‚Ñù‚â•0) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p, c ‚Ä¢ w] = c ^ p.toReal‚Åª¬π * ‚Äñf‚Äñ_[p, w] := by
  simp [wLpNorm, mul_smul, ‚Üê Finset.smul_sum, nnLpNorm_smul_measure_of_ne_top hp]

variable [DiscreteMeasurableSpace Œ±]

lemma wLpNorm_eq_sum_norm (hp‚ÇÄ : p ‚â† 0) (hp : p ‚â† ‚àû) (w : Œ± ‚Üí ‚Ñù‚â•0) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p, w] = (‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ ^ p.toReal) ^ p.toReal‚Åª¬π := by
  simp [wLpNorm, coe_nnLpNorm_eq_integral_norm_rpow_toReal hp‚ÇÄ hp .of_discrete, one_div,
    integral_finset_sum_measure, tsum_eq_sum' (s := univ) (by simp), ENNReal.coe_rpow_of_nonneg,
    ENNReal.toReal_inv, NNReal.smul_def]

lemma wLpNorm_eq_sum_nnnorm (hp‚ÇÄ : p ‚â† 0) (hp : p ‚â† ‚àû) (w : Œ± ‚Üí ‚Ñù‚â•0) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p, w] = (‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ‚Çä ^ p.toReal) ^ p.toReal‚Åª¬π := by
  ext; simpa using wLpNorm_eq_sum_norm hp‚ÇÄ hp ..

lemma wLpNorm_toNNReal_eq_sum_norm {p : ‚Ñù} (hp : 0 < p) (w : Œ± ‚Üí ‚Ñù‚â•0) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p.toNNReal, w] = (‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ ^ p) ^ p‚Åª¬π := by
  rw [wLpNorm_eq_sum_norm] <;> simp [hp, hp.ne', hp.le, NNReal.smul_def]

lemma wLpNorm_toNNReal_eq_sum {p : ‚Ñù} (hp : 0 < p) (w : Œ± ‚Üí ‚Ñù‚â•0) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p.toNNReal, w] = (‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ‚Çä ^ p) ^ p‚Åª¬π := by
  rw [wLpNorm_eq_sum_nnnorm] <;> simp [hp, hp.ne', hp.le, NNReal.smul_def]

lemma wLpNorm_rpow_eq_sum_nnnorm {p : ‚Ñù‚â•0} (hp : p ‚â† 0) (w : Œ± ‚Üí ‚Ñù‚â•0) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p, w] ^ (p : ‚Ñù) = ‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ‚Çä ^ (p : ‚Ñù) := by simp [wLpNorm_eq_sum_nnnorm, hp]

lemma wLpNorm_rpow_eq_sum_norm {p : ‚Ñù‚â•0} (hp : p ‚â† 0) (w : Œ± ‚Üí ‚Ñù‚â•0) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p, w] ^ (p : ‚Ñù) = ‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ ^ (p : ‚Ñù) := by
  simpa using NNReal.coe_inj.2 (wLpNorm_rpow_eq_sum_nnnorm hp ..)

lemma wLpNorm_pow_eq_sum_nnnorm {p : ‚Ñï} (hp : p ‚â† 0) (w : Œ± ‚Üí ‚Ñù‚â•0) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p, w] ^ p = ‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ‚Çä ^ p := by
  simpa using wLpNorm_rpow_eq_sum_nnnorm (Nat.cast_ne_zero.2 hp) w f

lemma wLpNorm_pow_eq_sum_norm {p : ‚Ñï} (hp : p ‚â† 0) (w : Œ± ‚Üí ‚Ñù‚â•0) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p, w] ^ p = ‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ ^ p := by
  simpa using wLpNorm_rpow_eq_sum_norm (Nat.cast_ne_zero.2 hp) w f

lemma wL1Norm_eq_sum_nnnorm (w : Œ± ‚Üí ‚Ñù‚â•0) (f : Œ± ‚Üí E) : ‚Äñf‚Äñ_[1, w] = ‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ‚Çä := by
  simp [wLpNorm_eq_sum_nnnorm]

lemma wL1Norm_eq_sum_norm (w : Œ± ‚Üí ‚Ñù‚â•0) (f : Œ± ‚Üí E) : ‚Äñf‚Äñ_[1, w] = ‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ := by
  simp [wLpNorm_eq_sum_norm]

@[gcongr]
lemma wLpNorm_mono_right (hpq : p ‚â§ q) (w : Œ± ‚Üí ‚Ñù‚â•0) (f : Œ± ‚Üí E) : ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñf‚Äñ_[q, w] :=
  sorry

section one_le

lemma wLpNorm_add_le (hp : 1 ‚â§ p) (w : Œ± ‚Üí ‚Ñù‚â•0) (f g : Œ± ‚Üí E) :
    ‚Äñf + g‚Äñ_[p, w] ‚â§ ‚Äñf‚Äñ_[p, w] + ‚Äñg‚Äñ_[p, w] := nnLpNorm_add_le .of_discrete .of_discrete hp

lemma wLpNorm_sub_le (hp : 1 ‚â§ p) (w : Œ± ‚Üí ‚Ñù‚â•0) (f g : Œ± ‚Üí E) :
    ‚Äñf - g‚Äñ_[p, w] ‚â§ ‚Äñf‚Äñ_[p, w] + ‚Äñg‚Äñ_[p, w] := by
  simpa [sub_eq_add_neg] using wLpNorm_add_le hp w f (-g)

lemma wLpNorm_le_wLpNorm_add_wLpNorm_sub' (hp : 1 ‚â§ p) (w : Œ± ‚Üí ‚Ñù‚â•0) (f g : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñg‚Äñ_[p, w] + ‚Äñf - g‚Äñ_[p, w] := by simpa using wLpNorm_add_le hp w g (f - g)

lemma wLpNorm_le_wLpNorm_add_wLpNorm_sub (hp : 1 ‚â§ p) (w : Œ± ‚Üí ‚Ñù‚â•0) (f g : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñg‚Äñ_[p, w] + ‚Äñg - f‚Äñ_[p, w] := by
  rw [wLpNorm_sub_comm]; exact wLpNorm_le_wLpNorm_add_wLpNorm_sub' hp ..

lemma wLpNorm_le_add_wLpNorm_add (hp : 1 ‚â§ p) (w : Œ± ‚Üí ‚Ñù‚â•0) (f g : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñf + g‚Äñ_[p, w] + ‚Äñg‚Äñ_[p, w] := by simpa using wLpNorm_add_le hp w (f + g) (-g)

lemma wLpNorm_sub_le_wLpNorm_sub_add_wLpNorm_sub (hp : 1 ‚â§ p) (f g : Œ± ‚Üí E) :
    ‚Äñf - h‚Äñ_[p, w] ‚â§ ‚Äñf - g‚Äñ_[p, w] + ‚Äñg - h‚Äñ_[p, w] := by
  simpa using wLpNorm_add_le hp w (f - g) (g - h)

end one_le

end NormedAddCommGroup

section Real
variable [Fintype Œ±] [DiscreteMeasurableSpace Œ±] {p : ‚Ñù‚â•0‚àû} {w : Œ± ‚Üí ‚Ñù‚â•0} {f g : Œ± ‚Üí ‚Ñù}

@[simp]
lemma wLpNorm_one (hp‚ÇÄ : p ‚â† 0) (hp : p ‚â† ‚àû) (w : Œ± ‚Üí ‚Ñù‚â•0) :
    ‚Äñ(1 : Œ± ‚Üí ‚Ñù)‚Äñ_[p, w] = (‚àë i, w i) ^ p.toReal‚Åª¬π := by simp [wLpNorm_eq_sum_nnnorm hp‚ÇÄ hp]

lemma wLpNorm_mono (hf : 0 ‚â§ f) (hfg : f ‚â§ g) : ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñg‚Äñ_[p, w] :=
  nnLpNorm_mono_real .of_discrete (by simpa [abs_of_nonneg (hf _)])

end Real

section wLpNorm
variable [Fintype Œ±] [DiscreteMeasurableSpace Œ±] {p : ‚Ñù‚â•0} {w : Œ± ‚Üí ‚Ñù‚â•0}

variable [AddCommGroup Œ±]

@[simp] lemma wLpNorm_translate [NormedAddCommGroup E] (a : Œ±) (f : Œ± ‚Üí E) :
    ‚ÄñœÑ a f‚Äñ_[p, œÑ a w] = ‚Äñf‚Äñ_[p, w] := by
  obtain rfl | hp := eq_or_ne p 0 <;>
    simp [wLpNorm_eq_sum_nnnorm, *, ‚Üê sum_translate a fun x ‚Ü¶ w x * ‚Äñf x‚Äñ‚Çä ^ (_ : ‚Ñù)]

end wLpNorm
