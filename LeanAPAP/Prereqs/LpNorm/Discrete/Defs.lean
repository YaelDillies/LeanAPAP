import Mathlib.Data.Fintype.Order
import LeanAPAP.Mathlib.MeasureTheory.Function.EssSup
import LeanAPAP.Prereqs.NNLpNorm

/-!
# Lp norms
-/

open Finset Function Real
open scoped BigOperators ComplexConjugate ENNReal NNReal NNRat

local notation:70 s:70 " ^^ " n:71 => Fintype.piFinset fun _ : Fin n ‚Ü¶ s

variable {Œ± ùïú R E : Type*} [MeasurableSpace Œ±]

namespace MeasureTheory
variable [NormedAddCommGroup E] {p q : ‚Ñù‚â•0‚àû} {f g h : Œ± ‚Üí E}

/-- The Lp norm of a function with the compact normalisation. -/
noncomputable def dLpNorm (p : ‚Ñù‚â•0‚àû) (f : Œ± ‚Üí E) : ‚Ñù‚â•0 := nnLpNorm f p .count

notation "‚Äñ" f "‚Äñ_[" p "]" => dLpNorm p f

@[simp] lemma dLpNorm_exponent_zero (f : Œ± ‚Üí E) : ‚Äñf‚Äñ_[0] = 0 := by simp [dLpNorm]

@[simp] lemma dLpNorm_zero (p : ‚Ñù‚â•0‚àû) : ‚Äñ(0 : Œ± ‚Üí E)‚Äñ_[p] = 0 := by simp [dLpNorm]
@[simp] lemma dLpNorm_zero' (p : ‚Ñù‚â•0‚àû) : ‚Äñ(fun _ ‚Ü¶ 0 : Œ± ‚Üí E)‚Äñ_[p] = 0 := by simp [dLpNorm]

@[simp] lemma dLpNorm_of_isEmpty [IsEmpty Œ±] (f : Œ± ‚Üí E) (p : ‚Ñù‚â•0‚àû) : ‚Äñf‚Äñ_[p] = 0 := by
  simp [dLpNorm]

@[simp] lemma dLpNorm_neg (f : Œ± ‚Üí E) (p : ‚Ñù‚â•0‚àû) : ‚Äñ-f‚Äñ_[p] = ‚Äñf‚Äñ_[p] := by simp [dLpNorm]
@[simp] lemma dLpNorm_neg' (f : Œ± ‚Üí E) (p : ‚Ñù‚â•0‚àû) : ‚Äñfun x ‚Ü¶ -f x‚Äñ_[p] = ‚Äñf‚Äñ_[p] := by
  simp [dLpNorm]

lemma dLpNorm_sub_comm (f g : Œ± ‚Üí E) (p : ‚Ñù‚â•0‚àû) : ‚Äñf - g‚Äñ_[p] = ‚Äñg - f‚Äñ_[p] := by
  simp [dLpNorm, nnLpNorm_sub_comm]

@[simp] lemma dLpNorm_norm (f : Œ± ‚Üí E) (p : ‚Ñù‚â•0‚àû) : ‚Äñfun i ‚Ü¶ ‚Äñf i‚Äñ‚Äñ_[p] = ‚Äñf‚Äñ_[p] :=
  nnLpNorm_norm ..

@[simp] lemma dLpNorm_abs (f : Œ± ‚Üí ‚Ñù) (p : ‚Ñù‚â•0‚àû) : ‚Äñ|f|‚Äñ_[p] = ‚Äñf‚Äñ_[p] := nnLpNorm_abs ..
@[simp] lemma dLpNorm_abs' (f : Œ± ‚Üí ‚Ñù) (p : ‚Ñù‚â•0‚àû) : ‚Äñfun i ‚Ü¶ |f i|‚Äñ_[p] = ‚Äñf‚Äñ_[p] :=
  nnLpNorm_abs' ..

section NormedField
variable [NormedField ùïú] {p : ‚Ñù‚â•0‚àû} {f g : Œ± ‚Üí ùïú}

lemma dLpNorm_const_smul [Module ùïú E] [BoundedSMul ùïú E] (c : ùïú) (f : Œ± ‚Üí E) :
    ‚Äñc ‚Ä¢ f‚Äñ_[p] = ‚Äñc‚Äñ‚Çä * ‚Äñf‚Äñ_[p] := by simp [dLpNorm, nnLpNorm_const_smul]

lemma dLpNorm_nsmul [NormedSpace ‚Ñù E] (n : ‚Ñï) (f : Œ± ‚Üí E) (p : ‚Ñù‚â•0‚àû) :
    ‚Äñn ‚Ä¢ f‚Äñ_[p] = n ‚Ä¢ ‚Äñf‚Äñ_[p] := by simp [dLpNorm, nnLpNorm_nsmul]

variable [NormedSpace ‚Ñù ùïú]

lemma dLpNorm_natCast_mul (n : ‚Ñï) (f : Œ± ‚Üí ùïú) (p : ‚Ñù‚â•0‚àû) : ‚Äñ(n : Œ± ‚Üí ùïú) * f‚Äñ_[p] = n * ‚Äñf‚Äñ_[p] :=
  nnLpNorm_natCast_mul ..

lemma dLpNorm_natCast_mul' (n : ‚Ñï) (f : Œ± ‚Üí ùïú) (p : ‚Ñù‚â•0‚àû) : ‚Äñ(n * f ¬∑)‚Äñ_[p] = n * ‚Äñf‚Äñ_[p] :=
  nnLpNorm_natCast_mul' ..

lemma dLpNorm_mul_natCast (f : Œ± ‚Üí ùïú) (n : ‚Ñï) (p : ‚Ñù‚â•0‚àû) : ‚Äñf * (n : Œ± ‚Üí ùïú)‚Äñ_[p] = ‚Äñf‚Äñ_[p] * n :=
  nnLpNorm_mul_natCast ..

lemma dLpNorm_mul_natCast' (f : Œ± ‚Üí ùïú) (n : ‚Ñï) (p : ‚Ñù‚â•0‚àû) : ‚Äñ(f ¬∑ * n)‚Äñ_[p] = ‚Äñf‚Äñ_[p] * n :=
  nnLpNorm_mul_natCast' ..

lemma dLpNorm_div_natCast [CharZero ùïú] {n : ‚Ñï} (hn : n ‚â† 0) (f : Œ± ‚Üí ùïú) (p : ‚Ñù‚â•0‚àû) :
    ‚Äñf / (n : Œ± ‚Üí ùïú)‚Äñ_[p] = ‚Äñf‚Äñ_[p] / n := nnLpNorm_div_natCast hn ..

lemma dLpNorm_div_natCast' [CharZero ùïú] {n : ‚Ñï} (hn : n ‚â† 0) (f : Œ± ‚Üí ùïú) (p : ‚Ñù‚â•0‚àû) :
    ‚Äñ(f ¬∑ / n)‚Äñ_[p] = ‚Äñf‚Äñ_[p] / n := nnLpNorm_div_natCast' hn ..

end NormedField

section RCLike
variable {p : ‚Ñù‚â•0‚àû}

@[simp] lemma dLpNorm_conj [RCLike R] (f : Œ± ‚Üí R) : ‚Äñconj f‚Äñ_[p] = ‚Äñf‚Äñ_[p] := nnLpNorm_conj ..

end RCLike

section DiscreteMeasurableSpace
variable [DiscreteMeasurableSpace Œ±] [Finite Œ±]

lemma dLpNorm_add_le (hp : 1 ‚â§ p) : ‚Äñf + g‚Äñ_[p] ‚â§ ‚Äñf‚Äñ_[p] + ‚Äñg‚Äñ_[p] :=
  nnLpNorm_add_le .of_discrete .of_discrete hp

lemma dLpNorm_sub_le (hp : 1 ‚â§ p) : ‚Äñf - g‚Äñ_[p] ‚â§ ‚Äñf‚Äñ_[p] + ‚Äñg‚Äñ_[p] :=
  nnLpNorm_sub_le .of_discrete .of_discrete hp

lemma dLpNorm_sum_le {Œπ : Type*} {s : Finset Œπ} {f : Œπ ‚Üí Œ± ‚Üí E} (hp : 1 ‚â§ p) :
    ‚Äñ‚àë i ‚àà s, f i‚Äñ_[p] ‚â§ ‚àë i ‚àà s, ‚Äñf i‚Äñ_[p] := nnLpNorm_sum_le (fun _ _ ‚Ü¶ .of_discrete) hp

lemma dLpNorm_expect_le [Module ‚Ñö‚â•0 E] [NormedSpace ‚Ñù E] {Œπ : Type*} {s : Finset Œπ} {f : Œπ ‚Üí Œ± ‚Üí E}
    (hp : 1 ‚â§ p) : ‚Äñùîº i ‚àà s, f i‚Äñ_[p] ‚â§ ùîº i ‚àà s, ‚Äñf i‚Äñ_[p] :=
  nnLpNorm_expect_le (fun _ _ ‚Ü¶ .of_discrete) hp

lemma dLpNorm_le_dLpNorm_add_dLpNorm_sub' (hp : 1 ‚â§ p) : ‚Äñf‚Äñ_[p] ‚â§ ‚Äñg‚Äñ_[p] + ‚Äñf - g‚Äñ_[p] :=
  nnLpNorm_le_nnLpNorm_add_nnLpNorm_sub' .of_discrete .of_discrete hp

lemma dLpNorm_le_dLpNorm_add_dLpNorm_sub (hp : 1 ‚â§ p) : ‚Äñf‚Äñ_[p] ‚â§ ‚Äñg‚Äñ_[p] + ‚Äñg - f‚Äñ_[p] :=
  nnLpNorm_le_nnLpNorm_add_nnLpNorm_sub .of_discrete .of_discrete hp

lemma dLpNorm_le_add_dLpNorm_add (hp : 1 ‚â§ p) : ‚Äñf‚Äñ_[p] ‚â§ ‚Äñf + g‚Äñ_[p] + ‚Äñg‚Äñ_[p] :=
  nnLpNorm_le_add_nnLpNorm_add .of_discrete .of_discrete hp

lemma dLpNorm_sub_le_dLpNorm_sub_add_dLpNorm_sub (hp : 1 ‚â§ p) :
    ‚Äñf - h‚Äñ_[p] ‚â§ ‚Äñf - g‚Äñ_[p] + ‚Äñg - h‚Äñ_[p] :=
  nnLpNorm_sub_le_nnLpNorm_sub_add_nnLpNorm_sub .of_discrete .of_discrete .of_discrete hp

end DiscreteMeasurableSpace

variable [Fintype Œ±]

@[simp]
lemma dLpNorm_const [Nonempty Œ±] {p : ‚Ñù‚â•0‚àû} (hp : p ‚â† 0) (a : E) :
    ‚Äñfun _i : Œ± ‚Ü¶ a‚Äñ_[p] = ‚Äña‚Äñ‚Çä * Fintype.card Œ± ^ (p.toReal‚Åª¬π : ‚Ñù) := by simp [dLpNorm, *]

@[simp]
lemma dLpNorm_const' {p : ‚Ñù‚â•0‚àû} (hp‚ÇÄ : p ‚â† 0) (hp : p ‚â† ‚àû) (a : E) :
    ‚Äñfun _i : Œ± ‚Ü¶ a‚Äñ_[p] = ‚Äña‚Äñ‚Çä * Fintype.card Œ± ^ (p.toReal‚Åª¬π : ‚Ñù) := by simp [dLpNorm, *]

section NormedField
variable [NormedField ùïú] {p : ‚Ñù‚â•0‚àû} {f g : Œ± ‚Üí ùïú}

@[simp] lemma dLpNorm_one [Nonempty Œ±] (hp : p ‚â† 0) :
    ‚Äñ(1 : Œ± ‚Üí ùïú)‚Äñ_[p] = Fintype.card Œ± ^ (p.toReal‚Åª¬π : ‚Ñù) := by simp [dLpNorm, *]

@[simp] lemma dLpNorm_one' (hp‚ÇÄ : p ‚â† 0) (hp : p ‚â† ‚àû) :
    ‚Äñ(1 : Œ± ‚Üí ùïú)‚Äñ_[p] = Fintype.card Œ± ^ (p.toReal‚Åª¬π : ‚Ñù) := by simp [dLpNorm, *]

end NormedField

variable [DiscreteMeasurableSpace Œ±]

lemma dLpNorm_eq_sum_norm' (hp‚ÇÄ : p ‚â† 0) (hp : p ‚â† ‚àû) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p] = (‚àë i, ‚Äñf i‚Äñ ^ p.toReal) ^ p.toReal‚Åª¬π := by
  simp [dLpNorm, coe_nnLpNorm_eq_integral_norm_rpow_toReal hp‚ÇÄ hp .of_discrete, one_div,
    integral_fintype, tsum_eq_sum' (s := univ) (by simp), ENNReal.coe_rpow_of_nonneg]

lemma dLpNorm_eq_sum_nnnorm' (hp‚ÇÄ : p ‚â† 0) (hp : p ‚â† ‚àû) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p] = (‚àë i, ‚Äñf i‚Äñ‚Çä ^ p.toReal) ^ p.toReal‚Åª¬π := by
  ext; push_cast; exact dLpNorm_eq_sum_norm' hp‚ÇÄ hp f

lemma dLpNorm_toNNReal_eq_sum_norm {p : ‚Ñù} (hp : 0 < p) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p.toNNReal] = (‚àë i, ‚Äñf i‚Äñ ^ p) ^ p‚Åª¬π := by
  rw [dLpNorm_eq_sum_nnnorm'] <;> simp [hp.ne', hp.le, hp, ‚Üê ENNReal.coe_rpow_of_nonneg]

lemma dLpNorm_toNNReal_eq_sum_nnnorm {p : ‚Ñù} (hp : 0 < p) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p.toNNReal] = (‚àë i, ‚Äñf i‚Äñ‚Çä ^ p) ^ p‚Åª¬π := by
  rw [dLpNorm_eq_sum_nnnorm'] <;> simp [hp.ne', hp.le, hp, ‚Üê ENNReal.coe_rpow_of_nonneg]

lemma dLpNorm_eq_sum_norm {p : ‚Ñù‚â•0} (hp : p ‚â† 0) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p] = (‚àë i, ‚Äñf i‚Äñ ^ (p : ‚Ñù)) ^ (p‚Åª¬π : ‚Ñù) :=
  dLpNorm_eq_sum_norm' (by simpa using hp) (by simp) _

lemma dLpNorm_eq_sum_nnnorm {p : ‚Ñù‚â•0} (hp : p ‚â† 0) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p] = (‚àë i, ‚Äñf i‚Äñ‚Çä ^ (p : ‚Ñù)) ^ (p‚Åª¬π : ‚Ñù) :=
  dLpNorm_eq_sum_nnnorm' (by simpa using hp) (by simp) _

lemma dLpNorm_rpow_eq_sum_norm {p : ‚Ñù‚â•0} (hp : p ‚â† 0) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p] ^ (p : ‚Ñù) = ‚àë i, ‚Äñf i‚Äñ ^ (p : ‚Ñù) := by
  rw [dLpNorm_eq_sum_norm hp, Real.rpow_inv_rpow (by positivity) (mod_cast hp)]

lemma dLpNorm_rpow_eq_sum_nnnorm {p : ‚Ñù‚â•0} (hp : p ‚â† 0) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p] ^ (p : ‚Ñù) = ‚àë i, ‚Äñf i‚Äñ‚Çä ^ (p : ‚Ñù) := by
  rw [dLpNorm_eq_sum_nnnorm hp, NNReal.rpow_inv_rpow (mod_cast hp)]

lemma dLpNorm_pow_eq_sum_norm {p : ‚Ñï} (hp : p ‚â† 0) (f : Œ± ‚Üí E) : ‚Äñf‚Äñ_[p] ^ p = ‚àë i, ‚Äñf i‚Äñ ^ p := by
  simpa using dLpNorm_rpow_eq_sum_norm (Nat.cast_ne_zero.2 hp) f

lemma dLpNorm_pow_eq_sum_nnnorm {p : ‚Ñï} (hp : p ‚â† 0) (f : Œ± ‚Üí E) :
    ‚Äñf‚Äñ_[p] ^ p = ‚àë i, ‚Äñf i‚Äñ‚Çä ^ p := by
  simpa using dLpNorm_rpow_eq_sum_nnnorm (Nat.cast_ne_zero.2 hp) f

lemma dL2Norm_sq_eq_sum_norm (f : Œ± ‚Üí E) : ‚Äñf‚Äñ_[2] ^ 2 = ‚àë i, ‚Äñf i‚Äñ ^ 2 := by
  simpa using dLpNorm_pow_eq_sum_norm two_ne_zero _

lemma dL2Norm_sq_eq_sum_nnnorm (f : Œ± ‚Üí E) : ‚Äñf‚Äñ_[2] ^ 2 = ‚àë i, ‚Äñf i‚Äñ‚Çä ^ 2 := by
  simpa using dLpNorm_pow_eq_sum_nnnorm two_ne_zero _

lemma dL2Norm_eq_sum_norm (f : Œ± ‚Üí E) : ‚Äñf‚Äñ_[2] = (‚àë i, ‚Äñf i‚Äñ ^ 2) ^ (2‚Åª¬π : ‚Ñù) := by
  simpa [sqrt_eq_rpow] using dLpNorm_eq_sum_norm two_ne_zero _

lemma dL2Norm_eq_sum_nnnorm (f : Œ± ‚Üí E) : ‚Äñf‚Äñ_[2] = (‚àë i, ‚Äñf i‚Äñ‚Çä ^ 2) ^ (2‚Åª¬π : ‚Ñù) := by
  simpa [sqrt_eq_rpow] using dLpNorm_eq_sum_nnnorm two_ne_zero _

lemma dL1Norm_eq_sum_norm (f : Œ± ‚Üí E) : ‚Äñf‚Äñ_[1] = ‚àë i, ‚Äñf i‚Äñ := by simp [dLpNorm_eq_sum_norm']
lemma dL1Norm_eq_sum_nnnorm (f : Œ± ‚Üí E) : ‚Äñf‚Äñ_[1] = ‚àë i, ‚Äñf i‚Äñ‚Çä := by simp [dLpNorm_eq_sum_nnnorm']

lemma dLinftyNorm_eq_iSup_nnnorm (f : Œ± ‚Üí E) : ‚Äñf‚Äñ_[‚àû] = ‚®Ü i, ‚Äñf i‚Äñ‚Çä := by
  cases isEmpty_or_nonempty Œ±
  ¬∑ simp
  ¬∑ simp [dLpNorm, nnLinftyNorm_eq_essSup]

lemma dLinftyNorm_eq_iSup_norm (f : Œ± ‚Üí E) : ‚Äñf‚Äñ_[‚àû] = ‚®Ü i, ‚Äñf i‚Äñ := by
  cases isEmpty_or_nonempty Œ±
  ¬∑ simp
  ¬∑ simp [dLpNorm, nnLinftyNorm_eq_essSup]

lemma nnnorm_le_dLinftyNorm {i : Œ±} : ‚Äñf i‚Äñ‚Çä ‚â§ ‚Äñf‚Äñ_[‚àû] := by
  rw [dLinftyNorm_eq_iSup_nnnorm]; exact le_ciSup (f := fun i ‚Ü¶ ‚Äñf i‚Äñ‚Çä) (Finite.bddAbove_range _) i

lemma norm_le_dLinftyNorm {i : Œ±} : ‚Äñf i‚Äñ ‚â§ ‚Äñf‚Äñ_[‚àû] := by
  rw [dLinftyNorm_eq_iSup_norm]; exact le_ciSup (f := fun i ‚Ü¶ ‚Äñf i‚Äñ) (Finite.bddAbove_range _) i

@[simp] lemma dLpNorm_eq_zero (hp : p ‚â† 0) : ‚Äñf‚Äñ_[p] = 0 ‚Üî f = 0 := by
  simp [dLpNorm, nnLpNorm_eq_zero .of_discrete hp, ae_eq_top.2]

@[simp] lemma dLpNorm_pos (hp : p ‚â† 0) : 0 < ‚Äñf‚Äñ_[p] ‚Üî f ‚â† 0 :=
  pos_iff_ne_zero.trans (dLpNorm_eq_zero hp).not

lemma dLpNorm_mono_real {g : Œ± ‚Üí ‚Ñù} (h : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ g x) : ‚Äñf‚Äñ_[p] ‚â§ ‚Äñg‚Äñ_[p] :=
  nnLpNorm_mono_real .of_discrete h

lemma dLpNorm_two_mul_sum_pow {Œπ : Type*} {n : ‚Ñï} (hn : n ‚â† 0) (s : Finset Œπ) (f : Œπ ‚Üí Œ± ‚Üí ‚ÑÇ) :
    ‚Äñ‚àë i ‚àà s, f i‚Äñ_[2 * n] ^ (2 * n) =
      ‚àë x ‚àà s ^^ n, ‚àë y ‚àà s ^^ n, ‚àë a, (‚àè i, conj (f (x i) a)) * ‚àè i, f (y i) a :=
  calc
    _ = ‚àë a, (‚Äñ‚àë i ‚àà s, f i a‚Äñ : ‚ÑÇ) ^ (2 * n) := by
      norm_cast
      rw [‚Üê dLpNorm_pow_eq_sum_norm]
      simp_rw [‚Üê sum_apply]
      norm_cast
      positivity
    _ = ‚àë a, (‚àë i ‚àà s, conj (f i a)) ^ n * (‚àë j ‚àà s, f j a) ^ n := by
      simp_rw [pow_mul, ‚Üê Complex.conj_mul', mul_pow, map_sum]
    _ = _ := by simp_rw [sum_pow', sum_mul_sum, sum_comm (s := univ)]

end MeasureTheory

namespace Mathlib.Meta.Positivity
open Lean Meta Qq Function MeasureTheory

private alias ‚ü®_, dLpNorm_pos_of_ne_zero‚ü© := dLpNorm_pos

private lemma dLpNorm_pos_of_pos {Œ± E : Type*} {_ : MeasurableSpace Œ±} [DiscreteMeasurableSpace Œ±]
    [Fintype Œ±] [NormedAddCommGroup E] [Preorder E] {p : ‚Ñù‚â•0‚àû} {f : Œ± ‚Üí E}
    (hp : p ‚â† 0) (hf : 0 < f) : 0 < ‚Äñf‚Äñ_[p] := dLpNorm_pos_of_ne_zero hp hf.ne'

/-- The `positivity` extension which identifies expressions of the form `‚Äñf‚Äñ_[p]`. -/
@[positivity ‚Äñ_‚Äñ_[_]] def evalDLpNorm : PositivityExt where eval {u} Œ± _z _p e := do
  match u, Œ±, e with
  | 0, ~q(‚Ñù‚â•0), ~q(@dLpNorm $Œπ $E $instŒπmeas $instEnorm $p $f) =>
    let pp ‚Üê (‚Üê core q(inferInstance) q(inferInstance) p).toNonzero _ _
    try
      let _pE ‚Üê synthInstanceQ q(PartialOrder $E)
      assumeInstancesCommute
      let _ ‚Üê synthInstanceQ q(Fintype $Œπ)
      let _ ‚Üê synthInstanceQ q(DiscreteMeasurableSpace $Œπ)
      let pf ‚Üê (‚Üê core q(inferInstance) q(inferInstance) f).toNonzero _ _
      return .positive q(dLpNorm_pos_of_ne_zero $pp $pf)
    catch _ =>
      assumeInstancesCommute
      let some pf ‚Üê findLocalDeclWithType? q($f ‚â† 0) | failure
      let pf : Q($f ‚â† 0) := .fvar pf
      let _ ‚Üê synthInstanceQ q(Fintype $Œπ)
      let _ ‚Üê synthInstanceQ q(DiscreteMeasurableSpace $Œπ)
      return .positive q(dLpNorm_pos_of_ne_zero $pp $pf)
  | _ => throwError "not dLpNorm"

section Examples
section NormedAddCommGroup
variable [Fintype Œ±] [DiscreteMeasurableSpace Œ±] [NormedAddCommGroup E] [PartialOrder E] {f : Œ± ‚Üí E}

example {p : ‚Ñù‚â•0‚àû} (hp : p ‚â† 0) (hf : f ‚â† 0) : 0 < ‚Äñf‚Äñ_[p] := by positivity
example {p : ‚Ñù‚â•0‚àû} (hp : p ‚â† 0) {f : Œ± ‚Üí ‚Ñù} (hf : 0 < f) : 0 < ‚Äñf‚Äñ_[p] := by positivity

end NormedAddCommGroup

section Complex
variable [Fintype Œ±] [DiscreteMeasurableSpace Œ±] {f : Œ± ‚Üí ‚ÑÇ}

example {p : ‚Ñù‚â•0‚àû} (hp : p ‚â† 0) (hf : f ‚â† 0) : 0 < ‚Äñf‚Äñ_[p] := by positivity
example {p : ‚Ñù‚â•0‚àû} (hp : p ‚â† 0) {f : Œ± ‚Üí ‚Ñù} (hf : 0 < f) : 0 < ‚Äñf‚Äñ_[p] := by positivity

end Complex
end Examples
end Mathlib.Meta.Positivity

/-! ### H√∂lder inequality -/

namespace MeasureTheory
section Real
variable {Œ± : Type*} {mŒ± : MeasurableSpace Œ±} [DiscreteMeasurableSpace Œ±] [Fintype Œ±] {p q : ‚Ñù‚â•0}
  {f g : Œ± ‚Üí ‚Ñù}

lemma dLpNorm_rpow (hp : p ‚â† 0) (hq : q ‚â† 0) (hf : 0 ‚â§ f) :
    ‚Äñf ^ (q : ‚Ñù)‚Äñ_[p] = ‚Äñf‚Äñ_[p * q] ^ (q : ‚Ñù) := by
  refine NNReal.rpow_left_injective (NNReal.coe_ne_zero.2 hp) ?_
  dsimp
  rw [‚Üê NNReal.rpow_mul, ‚Üê mul_comm, ‚Üê ENNReal.coe_mul, ‚Üê NNReal.coe_mul,
    dLpNorm_rpow_eq_sum_nnnorm hp, dLpNorm_rpow_eq_sum_nnnorm (mul_ne_zero hq hp)]
  ext
  simp only [Pi.pow_apply, NNReal.coe_sum, NNReal.coe_rpow, coe_nnnorm, norm_eq_abs,
    abs_rpow_of_nonneg (hf _), abs_nonneg, ‚Üê rpow_mul, NNReal.coe_mul]

lemma dLpNorm_pow (hp : p ‚â† 0) {q : ‚Ñï} (hq : q ‚â† 0) (f : Œ± ‚Üí ‚ÑÇ) :
    ‚Äñf ^ q‚Äñ_[p] = ‚Äñf‚Äñ_[p * q] ^ q := by
  refine NNReal.rpow_left_injective (NNReal.coe_ne_zero.2 hp) ?_
  dsimp
  rw [‚Üê NNReal.rpow_natCast_mul, ‚Üê mul_comm, ‚Üê ENNReal.coe_natCast, ‚Üê ENNReal.coe_mul,
    ‚Üê NNReal.coe_natCast, ‚Üê NNReal.coe_mul, dLpNorm_rpow_eq_sum_nnnorm hp, dLpNorm_rpow_eq_sum_nnnorm]
  simp [‚Üê NNReal.rpow_natCast_mul]
  positivity

lemma dL1Norm_rpow (hq : q ‚â† 0) (hf : 0 ‚â§ f) : ‚Äñf ^ (q : ‚Ñù)‚Äñ_[1] = ‚Äñf‚Äñ_[q] ^ (q : ‚Ñù) := by
  simpa only [ENNReal.coe_one, one_mul] using dLpNorm_rpow one_ne_zero hq hf

lemma dL1Norm_pow {q : ‚Ñï} (hq : q ‚â† 0) (f : Œ± ‚Üí ‚ÑÇ) : ‚Äñf ^ q‚Äñ_[1] = ‚Äñf‚Äñ_[q] ^ q := by
  simpa only [ENNReal.coe_one, one_mul] using dLpNorm_pow one_ne_zero hq f

end Real

section Hoelder
variable {Œ± : Type*} {mŒ± : MeasurableSpace Œ±} [DiscreteMeasurableSpace Œ±] [Fintype Œ±] [RCLike ùïú]
  {p q : ‚Ñù‚â•0} {f g : Œ± ‚Üí ùïú}

lemma dLpNorm_eq_dL1Norm_rpow (hp : p ‚â† 0) (f : Œ± ‚Üí ùïú) :
    ‚Äñf‚Äñ_[p] = ‚Äñfun a ‚Ü¶ ‚Äñf a‚Äñ ^ (p : ‚Ñù)‚Äñ_[1] ^ (p‚Åª¬π : ‚Ñù) := by
  ext; simp [dLpNorm_eq_sum_nnnorm hp, dL1Norm_eq_sum_nnnorm, abs_rpow_of_nonneg]

lemma dLpNorm_rpow' {p : ‚Ñù‚â•0‚àû} (hp‚ÇÄ : p ‚â† 0) (hp : p ‚â† ‚àû) (hq : q ‚â† 0) (f : Œ± ‚Üí ùïú) :
    ‚Äñf‚Äñ_[p] ^ (q : ‚Ñù) = ‚Äñ(fun a ‚Ü¶ ‚Äñf a‚Äñ) ^ (q : ‚Ñù)‚Äñ_[p / q] := by
  lift p to ‚Ñù‚â•0 using hp
  simp at hp‚ÇÄ
  rw [‚Üê ENNReal.coe_div hq, dLpNorm_rpow (div_ne_zero hp‚ÇÄ hq) hq (fun _ ‚Ü¶ norm_nonneg _),
    dLpNorm_norm, ‚Üê ENNReal.coe_mul, div_mul_cancel‚ÇÄ _ hq]

end Hoelder

section
variable {Œ± : Type*} {mŒ± : MeasurableSpace Œ±}

@[simp]
lemma RCLike.dLpNorm_coe_comp [RCLike ùïú] (p) (f : Œ± ‚Üí ‚Ñù) : ‚Äñ((‚Üë) : ‚Ñù ‚Üí ùïú) ‚àò f‚Äñ_[p] = ‚Äñf‚Äñ_[p] := by
  simp only [‚Üê dLpNorm_norm (((‚Üë) : ‚Ñù ‚Üí ùïú) ‚àò f), ‚Üê dLpNorm_norm f, Function.comp_apply,
    RCLike.norm_ofReal, Real.norm_eq_abs]

@[simp] lemma Complex.dLpNorm_coe_comp (p) (f : Œ± ‚Üí ‚Ñù) : ‚Äñ((‚Üë) : ‚Ñù ‚Üí ‚ÑÇ) ‚àò f‚Äñ_[p] = ‚Äñf‚Äñ_[p] :=
  RCLike.dLpNorm_coe_comp ..

end
end MeasureTheory
