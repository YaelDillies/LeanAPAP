import Mathlib.Algebra.BigOperators.Expect

/-!
# Balancing a function
-/

open Function
open Fintype (card)
open scoped BigOperators Pointwise NNRat

variable {Œπ Œ± Œ≤ : Type*}

namespace Finset

section AddCommGroup
variable [AddCommGroup Œ±] [Module ‚Ñö‚â•0 Œ±] [Field Œ≤] [Module ‚Ñö‚â•0 Œ≤] {s : Finset Œπ}

variable [Fintype Œπ]

def balance (f : Œπ ‚Üí Œ±) : Œπ ‚Üí Œ± := f - Function.const _ (ùîº y, f y)

lemma balance_apply (f : Œπ ‚Üí Œ±) (x : Œπ) : balance f x = f x - ùîº y, f y := rfl

@[simp] lemma balance_zero : balance (0 : Œπ ‚Üí Œ±) = 0 := by simp [balance]

@[simp] lemma balance_add (f g : Œπ ‚Üí Œ±) : balance (f + g) = balance f + balance g := by
  simp only [balance, expect_add_distrib, ‚Üê const_add, add_sub_add_comm, Pi.add_apply]

@[simp] lemma balance_sub (f g : Œπ ‚Üí Œ±) : balance (f - g) = balance f - balance g := by
  simp only [balance, expect_sub_distrib, const_sub, sub_sub_sub_comm, Pi.sub_apply]

@[simp] lemma balance_neg (f : Œπ ‚Üí Œ±) : balance (-f) = -balance f := by
  simp only [balance, expect_neg_distrib, const_neg, neg_sub', Pi.neg_apply]

@[simp] lemma sum_balance (f : Œπ ‚Üí Œ±) : ‚àë x, balance f x = 0 := by
  cases isEmpty_or_nonempty Œπ <;> simp [balance_apply]

@[simp] lemma expect_balance (f : Œπ ‚Üí Œ±) : ùîº x, balance f x = 0 := by simp [expect]

@[simp] lemma balance_idem (f : Œπ ‚Üí Œ±) : balance (balance f) = balance f := by
  cases isEmpty_or_nonempty Œπ <;> ext x <;> simp [balance, expect_sub_distrib]

@[simp] lemma map_balance {F : Type*} [FunLike F Œ± Œ≤] [LinearMapClass F ‚Ñö‚â•0 Œ± Œ≤] (g : F) (f : Œπ ‚Üí Œ±)
    (a : Œπ) : g (balance f a) = balance (g ‚àò f) a := by simp [balance, map_expect]

end AddCommGroup
