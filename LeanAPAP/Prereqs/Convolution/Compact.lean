import LeanAPAP.Prereqs.Convolution.Discrete.Defs
import LeanAPAP.Prereqs.Expect.Complex
import LeanAPAP.Prereqs.Function.Indicator.Defs

/-!
# Convolution in the compact normalisation

This file defines several versions of the discrete convolution of functions with the compact
normalisation.

## Main declarations

* `nconv`: Discrete convolution of two functions in the compact normalisation
* `cdconv`: Discrete difference convolution of two functions in the compact normalisation
* `iterNConv`: Iterated convolution of a function in the compact normalisation

## Notation

* `f ‚àó‚Çô g`: Convolution
* `f ‚óã‚Çô g`: Difference convolution
* `f ‚àó^‚Çô n`: Iterated convolution

## Notes

Some lemmas could technically be generalised to a division ring. Doesn't seem very useful given that
the codomain in applications is either `‚Ñù`, `‚Ñù‚â•0` or `‚ÑÇ`.

Similarly we could drop the commutativity assumption on the domain, but this is unneeded at this
point in time.
-/

open Finset Fintype Function
open scoped BigOperators ComplexConjugate NNReal Pointwise

local notation a " /‚Ñö " q => (q : ‚Ñö‚â•0)‚Åª¬π ‚Ä¢ a

variable {G H R S : Type*} [Fintype G] [DecidableEq G] [AddCommGroup G]

/-!
### Convolution of functions

In this section, we define the convolution `f ‚àó‚Çô g` and difference convolution `f ‚óã‚Çô g` of functions
`f g : G ‚Üí R`, and show how they interact.
-/

/-! ### Trivial character -/

section Semifield
variable [Semifield R]

/-- The trivial character. -/
def trivNChar : G ‚Üí R := fun a ‚Ü¶ if a = 0 then card G else 0

@[simp] lemma trivNChar_apply (a : G) : (trivNChar a : R) = if a = 0 then (card G : R) else 0 := rfl

variable [StarRing R]

@[simp] lemma conj_trivNChar : conj (trivNChar : G ‚Üí R) = trivNChar := by
  ext; simp; split_ifs <;> simp

@[simp] lemma conjneg_trivNChar : conjneg (trivNChar : G ‚Üí R) = trivNChar := by
  ext; simp; split_ifs <;> simp

@[simp] lemma isSelfAdjoint_trivNChar : IsSelfAdjoint (trivNChar : G ‚Üí R) := conj_trivNChar

end Semifield

/-! ### Convolution -/

section Semifield
variable [Semifield R] [CharZero R] {f g : G ‚Üí R}

/-- Convolution -/
def nconv (f g : G ‚Üí R) : G ‚Üí R := fun a ‚Ü¶ ùîº x : G √ó G with x.1 + x.2 = a , f x.1 * g x.2

infixl:71 " ‚àó‚Çô " => nconv

lemma nconv_apply (f g : G ‚Üí R) (a : G) :
    (f ‚àó‚Çô g) a = ùîº x : G √ó G with x.1 + x.2 = a, f x.1 * g x.2 := rfl

lemma nconv_apply_eq_smul_conv (f g : G ‚Üí R) (a : G) :
    (f ‚àó‚Çô g) a = (f ‚àó g) a /‚Ñö Fintype.card G := by
  rw [nconv_apply, expect, eq_comm]
  congr 3
  refine card_nbij' (fun b ‚Ü¶ (b, a - b)) Prod.fst ?_ ?_ ?_ ?_ <;> simp [eq_sub_iff_add_eq', eq_comm]

lemma nconv_eq_smul_conv (f g : G ‚Üí R) : f ‚àó‚Çô g = (f ‚àó g) /‚Ñö Fintype.card G :=
  funext $ nconv_apply_eq_smul_conv _ _

@[simp] lemma nconv_zero (f : G ‚Üí R) : f ‚àó‚Çô 0 = 0 := by ext; simp [nconv_apply]
@[simp] lemma zero_nconv (f : G ‚Üí R) : 0 ‚àó‚Çô f = 0 := by ext; simp [nconv_apply]

lemma nconv_add (f g h : G ‚Üí R) : f ‚àó‚Çô (g + h) = f ‚àó‚Çô g + f ‚àó‚Çô h := by
  ext; simp [nconv_apply, mul_add, expect_add_distrib]

lemma add_nconv (f g h : G ‚Üí R) : (f + g) ‚àó‚Çô h = f ‚àó‚Çô h + g ‚àó‚Çô h := by
  ext; simp [nconv_apply, add_mul, expect_add_distrib]

lemma smul_nconv [DistribSMul H R] [IsScalarTower H R R] [SMulCommClass H R R] (c : H)
    (f g : G ‚Üí R) : c ‚Ä¢ f ‚àó‚Çô g = c ‚Ä¢ (f ‚àó‚Çô g) := by
  have := SMulCommClass.symm H R R
  ext a
  simp only [Pi.smul_apply, smul_expect, nconv_apply, smul_mul_assoc]

lemma nconv_smul [DistribSMul H R] [IsScalarTower H R R] [SMulCommClass H R R] (c : H)
    (f g : G ‚Üí R) : f ‚àó‚Çô c ‚Ä¢ g = c ‚Ä¢ (f ‚àó‚Çô g) := by
  have := SMulCommClass.symm H R R
  ext a
  simp only [Pi.smul_apply, smul_expect, nconv_apply, mul_smul_comm]

alias smul_nconv_assoc := smul_nconv
alias smul_nconv_left_comm := nconv_smul

@[simp] lemma translate_nconv (a : G) (f g : G ‚Üí R) : œÑ a f ‚àó‚Çô g = œÑ a (f ‚àó‚Çô g) :=
  funext fun b ‚Ü¶ expect_equiv ((Equiv.subRight a).prodCongr $ Equiv.refl _)
    (by simp [sub_add_eq_add_sub]) (by simp)

@[simp] lemma nconv_translate (a : G) (f g : G ‚Üí R) : f ‚àó‚Çô œÑ a g = œÑ a (f ‚àó‚Çô g) :=
  funext fun b ‚Ü¶ expect_equiv ((Equiv.refl _).prodCongr $ Equiv.subRight a)
    (by simp [‚Üê add_sub_assoc]) (by simp)

lemma nconv_comm (f g : G ‚Üí R) : f ‚àó‚Çô g = g ‚àó‚Çô f :=
  funext fun a ‚Ü¶ Finset.expect_equiv (Equiv.prodComm _ _) (by simp [add_comm]) (by simp [mul_comm])

lemma mul_smul_nconv_comm [Monoid H] [DistribMulAction H R] [IsScalarTower H R R]
    [SMulCommClass H R R] (c d : H) (f g : G ‚Üí R) : (c * d) ‚Ä¢ (f ‚àó‚Çô g) = c ‚Ä¢ f ‚àó‚Çô d ‚Ä¢ g := by
  rw [smul_nconv, nconv_smul, mul_smul]

lemma nconv_assoc (f g h : G ‚Üí R) : f ‚àó‚Çô g ‚àó‚Çô h = f ‚àó‚Çô (g ‚àó‚Çô h) := by
  simp only [nconv_eq_smul_conv, smul_conv, conv_smul, conv_assoc]

lemma nconv_right_comm (f g h : G ‚Üí R) : f ‚àó‚Çô g ‚àó‚Çô h = f ‚àó‚Çô h ‚àó‚Çô g := by
  rw [nconv_assoc, nconv_assoc, nconv_comm g]

lemma nconv_left_comm (f g h : G ‚Üí R) : f ‚àó‚Çô (g ‚àó‚Çô h) = g ‚àó‚Çô (f ‚àó‚Çô h) := by
  rw [‚Üê nconv_assoc, ‚Üê nconv_assoc, nconv_comm g]

lemma nconv_nconv_nconv_comm (f g h i : G ‚Üí R) : f ‚àó‚Çô g ‚àó‚Çô (h ‚àó‚Çô i) = f ‚àó‚Çô h ‚àó‚Çô (g ‚àó‚Çô i) := by
  rw [nconv_assoc, nconv_assoc, nconv_left_comm g]

lemma map_nconv [Semifield S] [CharZero S] (m : R ‚Üí+* S) (f g : G ‚Üí R) (a : G) : m
    ((f ‚àó‚Çô g) a) = (m ‚àò f ‚àó‚Çô m ‚àò g) a := by
  simp_rw [nconv_apply, map_expect, map_mul, Function.comp_apply]

lemma comp_nconv [Semifield S] [CharZero S] (m : R ‚Üí+* S) (f g : G ‚Üí R) :
    m ‚àò (f ‚àó‚Çô g) = m ‚àò f ‚àó‚Çô m ‚àò g := funext $ map_nconv _ _ _

lemma nconv_eq_expect_sub (f g : G ‚Üí R) (a : G) : (f ‚àó‚Çô g) a = ùîº t, f (a - t) * g t := by
  rw [nconv_apply]
  refine expect_nbij (fun x ‚Ü¶ x.2) (fun x _ ‚Ü¶ mem_univ _) ?_ ?_ fun b _ ‚Ü¶
    ‚ü®(a - b, b), mem_filter.2 ‚ü®mem_univ _, sub_add_cancel _ _‚ü©, rfl‚ü©
  any_goals unfold Set.InjOn
  all_goals aesop

lemma nconv_eq_expect_add (f g : G ‚Üí R) (a : G) : (f ‚àó‚Çô g) a = ùîº t, f (a + t) * g (-t) :=
  (nconv_eq_expect_sub _ _ _).trans $ Fintype.expect_equiv (Equiv.neg _) _ _ fun t ‚Ü¶ by
    simp only [sub_eq_add_neg, Equiv.neg_apply, neg_neg]

lemma nconv_eq_expect_sub' (f g : G ‚Üí R) (a : G) : (f ‚àó‚Çô g) a = ùîº t, f t * g (a - t) := by
  rw [nconv_comm, nconv_eq_expect_sub]; simp_rw [mul_comm]

lemma nconv_eq_expect_add' (f g : G ‚Üí R) (a : G) : (f ‚àó‚Çô g) a = ùîº t, f (-t) * g (a + t) := by
  rw [nconv_comm, nconv_eq_expect_add]; simp_rw [mul_comm]

lemma nconv_apply_add (f g : G ‚Üí R) (a b : G) : (f ‚àó‚Çô g) (a + b) = ùîº t, f (a + t) * g (b - t) :=
  (nconv_eq_expect_sub _ _ _).trans $ Fintype.expect_equiv (Equiv.subLeft b) _ _ fun t ‚Ü¶ by
    simp [add_sub_assoc, ‚Üê sub_add]

lemma expect_nconv_mul (f g h : G ‚Üí R) :
    ùîº a, (f ‚àó‚Çô g) a * h a = ùîº a, ùîº b, f a * g b * h (a + b) := by
  simp_rw [nconv_eq_expect_sub', expect_mul]
  rw [expect_comm]
  exact expect_congr rfl fun x _ ‚Ü¶ Fintype.expect_equiv (Equiv.subRight x) _ _ fun y ‚Ü¶ by simp

lemma expect_nconv (f g : G ‚Üí R) : ùîº a, (f ‚àó‚Çô g) a = (ùîº a, f a) * ùîº a, g a := by
  simpa only [expect_mul_expect, Pi.one_apply, mul_one] using expect_nconv_mul f g 1

@[simp] lemma nconv_const (f : G ‚Üí R) (b : R) : f ‚àó‚Çô const _ b = const _ ((ùîº x, f x) * b) := by
  ext; simp [nconv_eq_expect_sub', expect_mul]

@[simp] lemma const_nconv (b : R) (f : G ‚Üí R) : const _ b ‚àó‚Çô f = const _ (b * ùîº x, f x) := by
  ext; simp [nconv_eq_expect_sub, mul_expect]

@[simp] lemma nconv_trivNChar (f : G ‚Üí R) : f ‚àó‚Çô trivNChar = f := by
  ext a; simp [nconv_eq_expect_sub, card_univ, NNRat.smul_def, mul_comm]

@[simp] lemma trivNChar_nconv (f : G ‚Üí R) : trivNChar ‚àó‚Çô f = f := by
  rw [nconv_comm, nconv_trivNChar]

lemma support_nconv_subset (f g : G ‚Üí R) : support (f ‚àó‚Çô g) ‚äÜ support f + support g := by
  rintro a ha
  obtain ‚ü®x, hx, h‚ü© := exists_ne_zero_of_expect_ne_zero ha
  exact ‚ü®_, left_ne_zero_of_mul h, _, right_ne_zero_of_mul h, (mem_filter.1 hx).2‚ü©

variable [StarRing R]

/-- Difference convolution -/
def cdconv (f g : G ‚Üí R) : G ‚Üí R := fun a ‚Ü¶ ùîº x : G √ó G with x.1 - x.2 = a, f x.1 * conj g x.2

infixl:71 " ‚óã‚Çô " => cdconv

lemma cdconv_apply (f g : G ‚Üí R) (a : G) :
    (f ‚óã‚Çô g) a = ùîº x : G √ó G with x.1 - x.2 = a , f x.1 * conj g x.2 := rfl

lemma cdconv_apply_eq_smul_dconv (f g : G ‚Üí R) (a : G) :
    (f ‚óã‚Çô g) a = (f ‚óã g) a /‚Ñö Fintype.card G := by
  rw [cdconv_apply, expect, eq_comm]
  congr 3
  refine card_nbij' (fun b ‚Ü¶ (a + b, b)) Prod.snd ?_ ?_ ?_ ?_ <;> simp [eq_sub_iff_add_eq, eq_comm]

lemma cdconv_eq_smul_dconv (f g : G ‚Üí R) : (f ‚óã‚Çô g) = (f ‚óã g) /‚Ñö Fintype.card G :=
  funext $ cdconv_apply_eq_smul_dconv _ _

@[simp] lemma nconv_conjneg (f g : G ‚Üí R) : f ‚àó‚Çô conjneg g = f ‚óã‚Çô g :=
  funext fun a ‚Ü¶ expect_bij (fun x _ ‚Ü¶ (x.1, -x.2)) (fun x hx ‚Ü¶ by simpa using hx) (fun x _ ‚Ü¶ rfl)
    (fun x y _ _ h ‚Ü¶ by simpa [Prod.ext_iff] using h) fun x hx ‚Ü¶
      ‚ü®(x.1, -x.2), by simpa [sub_eq_add_neg] using hx, by simp‚ü©

@[simp] lemma cdconv_conjneg (f g : G ‚Üí R) : f ‚óã‚Çô conjneg g = f ‚àó‚Çô g := by
  rw [‚Üê nconv_conjneg, conjneg_conjneg]

@[simp] lemma translate_cdconv (a : G) (f g : G ‚Üí R) : œÑ a f ‚óã‚Çô g = œÑ a (f ‚óã‚Çô g) :=
  funext fun b ‚Ü¶ expect_equiv ((Equiv.subRight a).prodCongr $ Equiv.refl _)
    (by simp [sub_right_comm _ a]) (by simp)

@[simp] lemma cdconv_translate (a : G) (f g : G ‚Üí R) : f ‚óã‚Çô œÑ a g = œÑ (-a) (f ‚óã‚Çô g) :=
  funext fun b ‚Ü¶ expect_equiv ((Equiv.refl _).prodCongr $ Equiv.subRight a)
    (by simp [sub_sub_eq_add_sub, ‚Üê sub_add_eq_add_sub]) (by simp)

@[simp] lemma conj_nconv (f g : G ‚Üí R) : conj (f ‚àó‚Çô g) = conj f ‚àó‚Çô conj g :=
  funext fun a ‚Ü¶ by simp only [Pi.conj_apply, nconv_apply, map_expect, map_mul]

@[simp] lemma conj_cdconv (f g : G ‚Üí R) : conj (f ‚óã‚Çô g) = conj f ‚óã‚Çô conj g := by
  simp_rw [‚Üê nconv_conjneg, conj_nconv, conjneg_conj]

lemma IsSelfAdjoint.nconv (hf : IsSelfAdjoint f) (hg : IsSelfAdjoint g) : IsSelfAdjoint (f ‚àó‚Çô g) :=
  (conj_nconv _ _).trans $ congr_arg‚ÇÇ _ hf hg

lemma IsSelfAdjoint.cdconv (hf : IsSelfAdjoint f) (hg : IsSelfAdjoint g) : IsSelfAdjoint (f ‚óã‚Çô g) :=
  (conj_cdconv _ _).trans $ congr_arg‚ÇÇ _ hf hg

@[simp]lemma conjneg_nconv (f g : G ‚Üí R) : conjneg (f ‚àó‚Çô g) = conjneg f ‚àó‚Çô conjneg g := by
  funext a
  simp only [nconv_apply, conjneg_apply, map_expect, map_mul]
  exact Finset.expect_equiv (Equiv.neg (G √ó G)) (by simp [eq_comm, ‚Üê neg_eq_iff_eq_neg, add_comm])
    (by simp)

@[simp] lemma conjneg_cdconv (f g : G ‚Üí R) : conjneg (f ‚óã‚Çô g) = g ‚óã‚Çô f := by
  simp_rw [‚Üê nconv_conjneg, conjneg_nconv, conjneg_conjneg, nconv_comm]

@[simp] lemma cdconv_zero (f : G ‚Üí R) : f ‚óã‚Çô 0 = 0 := by simp [‚Üê nconv_conjneg]
@[simp] lemma zero_cdconv (f : G ‚Üí R) : 0 ‚óã‚Çô f = 0 := by rw [‚Üê nconv_conjneg]; simp [-nconv_conjneg]

lemma cdconv_add (f g h : G ‚Üí R) : f ‚óã‚Çô (g + h) = f ‚óã‚Çô g + f ‚óã‚Çô h := by
  simp_rw [‚Üê nconv_conjneg, conjneg_add, nconv_add]

lemma add_cdconv (f g h : G ‚Üí R) : (f + g) ‚óã‚Çô h = f ‚óã‚Çô h + g ‚óã‚Çô h := by
  simp_rw [‚Üê nconv_conjneg, add_nconv]

lemma smul_cdconv [DistribSMul H R] [IsScalarTower H R R] [SMulCommClass H R R] (c : H)
    (f g : G ‚Üí R) : c ‚Ä¢ f ‚óã‚Çô g = c ‚Ä¢ (f ‚óã‚Çô g) := by
  have := SMulCommClass.symm H R R
  ext a
  simp only [Pi.smul_apply, smul_expect, cdconv_apply, smul_mul_assoc]

lemma cdconv_smul [Star H] [DistribSMul H R] [IsScalarTower H R R] [SMulCommClass H R R]
    [StarModule H R] (c : H) (f g : G ‚Üí R) : f ‚óã‚Çô c ‚Ä¢ g = star c ‚Ä¢ (f ‚óã‚Çô g) := by
  have := SMulCommClass.symm H R R
  ext a
  simp only [Pi.smul_apply, smul_expect, cdconv_apply, mul_smul_comm, starRingEnd_apply, star_smul]

alias smul_cdconv_assoc := smul_cdconv
alias smul_cdconv_left_comm := cdconv_smul

lemma nconv_cdconv_nconv_comm (f g h i : G ‚Üí R) : f ‚àó‚Çô g ‚óã‚Çô (h ‚àó‚Çô i) = f ‚óã‚Çô h ‚àó‚Çô (g ‚óã‚Çô i) := by
  simp_rw [‚Üê nconv_conjneg, conjneg_nconv, nconv_nconv_nconv_comm]

lemma cdconv_nconv_cdconv_comm (f g h i : G ‚Üí R) : f ‚óã‚Çô g ‚àó‚Çô (h ‚óã‚Çô i) = f ‚àó‚Çô h ‚óã‚Çô (g ‚àó‚Çô i) := by
  simp_rw [‚Üê nconv_conjneg, conjneg_nconv, nconv_nconv_nconv_comm]

lemma cdconv_cdconv_cdconv_comm (f g h i : G ‚Üí R) : f ‚óã‚Çô g ‚óã‚Çô (h ‚óã‚Çô i) = f ‚óã‚Çô h ‚óã‚Çô (g ‚óã‚Çô i) := by
  simp_rw [‚Üê nconv_conjneg, conjneg_nconv, nconv_nconv_nconv_comm]

--TODO: Can we generalise to star ring homs?
-- lemma map_cdconv (f g : G ‚Üí ‚Ñù‚â•0) (a : G) : (‚Üë((f ‚óã‚Çô g) a) : ‚Ñù) = ((‚Üë) ‚àò f ‚óã‚Çô (‚Üë) ‚àò g) a := by
--   simp_rw [cdconv_apply, NNReal.coe_expect, NNReal.coe_mul, starRingEnd_apply, star_trivial,
--     Function.comp_apply]

lemma cdconv_eq_expect_add (f g : G ‚Üí R) (a : G) : (f ‚óã‚Çô g) a = ùîº t, f (a + t) * conj (g t) := by
  simp [‚Üê nconv_conjneg, nconv_eq_expect_add]

lemma cdconv_eq_expect_sub (f g : G ‚Üí R) (a : G) : (f ‚óã‚Çô g) a = ùîº t, f t * conj (g (t - a)) := by
  simp [‚Üê nconv_conjneg, nconv_eq_expect_sub']

lemma cdconv_apply_neg (f g : G ‚Üí R) (a : G) : (f ‚óã‚Çô g) (-a) = conj ((g ‚óã‚Çô f) a) := by
  rw [‚Üê conjneg_cdconv f, conjneg_apply, Complex.conj_conj]

lemma cdconv_apply_sub (f g : G ‚Üí R) (a b : G) :
    (f ‚óã‚Çô g) (a - b) = ùîº t, f (a + t) * conj (g (b + t)) := by
  simp [‚Üê nconv_conjneg, sub_eq_add_neg, nconv_apply_add, add_comm]

lemma expect_cdconv_mul (f g h : G ‚Üí R) :
    ùîº a, (f ‚óã‚Çô g) a * h a = ùîº a, ùîº b, f a * conj (g b) * h (a - b) := by
  simp_rw [cdconv_eq_expect_sub, expect_mul]
  rw [expect_comm]
  exact expect_congr rfl fun x _ ‚Ü¶ Fintype.expect_equiv (Equiv.subLeft x) _ _ fun y ‚Ü¶ by simp

lemma expect_cdconv (f g : G ‚Üí R) : ùîº a, (f ‚óã‚Çô g) a = (ùîº a, f a) * ùîº a, conj (g a) := by
  simpa only [expect_mul_expect, Pi.one_apply, mul_one] using expect_cdconv_mul f g 1

@[simp]
lemma cdconv_const (f : G ‚Üí R) (b : R) : f ‚óã‚Çô const _ b = const _ ((ùîº x, f x) * conj b) := by
  ext; simp [cdconv_eq_expect_sub, expect_mul]

@[simp]
lemma const_cdconv (b : R) (f : G ‚Üí R) : const _ b ‚óã‚Çô f = const _ (b * ùîº x, conj (f x)) := by
  ext; simp [cdconv_eq_expect_add, mul_expect]

@[simp] lemma cdconv_trivNChar (f : G ‚Üí R) : f ‚óã‚Çô trivNChar = f := by
  rw [‚Üê nconv_conjneg, conjneg_trivNChar, nconv_trivNChar]

@[simp] lemma trivNChar_cdconv (f : G ‚Üí R) : trivNChar ‚óã‚Çô f = conjneg f := by
  rw [‚Üê nconv_conjneg, trivNChar_nconv]

lemma support_cdconv_subset (f g : G ‚Üí R) : support (f ‚óã‚Çô g) ‚äÜ support f - support g := by
  simpa [sub_eq_add_neg] using support_nconv_subset f (conjneg g)

-- lemma indicate_nconv_indicate_apply (s t : Finset G) (a : G) :
--     (ùü≠_[R] s ‚àó‚Çô ùü≠ t) a = ((s √óÀ¢ t).filter fun x : G √ó G ‚Ü¶ x.1 + x.2 = a).card := by
--   simp only [nconv_apply, indicate_apply, ‚Üê ite_and, filter_comm, boole_mul, expect_boole]
--   simp_rw [‚Üê mem_product, filter_univ_mem]

-- lemma indicate_cdconv_indicate_apply (s t : Finset G) (a : G) :
--     (ùü≠_[R] s ‚óã‚Çô ùü≠ t) a = ((s √óÀ¢ t).filter fun x : G √ó G ‚Ü¶ x.1 - x.2 = a).card := by
--   simp only [cdconv_apply, indicate_apply, ‚Üê ite_and, filter_comm, boole_mul, expect_boole,
--     apply_ite conj, map_one, map_zero, Pi.conj_apply]
--   simp_rw [‚Üê mem_product, filter_univ_mem]

end Semifield

section Field
variable [Field R] [CharZero R]

@[simp] lemma nconv_neg (f g : G ‚Üí R) : f ‚àó‚Çô -g = -(f ‚àó‚Çô g) := by ext; simp [nconv_apply]
@[simp] lemma neg_nconv (f g : G ‚Üí R) : -f ‚àó‚Çô g = -(f ‚àó‚Çô g) := by ext; simp [nconv_apply]

lemma nconv_sub (f g h : G ‚Üí R) : f ‚àó‚Çô (g - h) = f ‚àó‚Çô g - f ‚àó‚Çô h := by
  simp only [sub_eq_add_neg, nconv_add, nconv_neg]

lemma sub_nconv (f g h : G ‚Üí R) : (f - g) ‚àó‚Çô h = f ‚àó‚Çô h - g ‚àó‚Çô h := by
  simp only [sub_eq_add_neg, add_nconv, neg_nconv]

variable [StarRing R]

@[simp] lemma cdconv_neg (f g : G ‚Üí R) : f ‚óã‚Çô -g = -(f ‚óã‚Çô g) := by ext; simp [cdconv_apply]
@[simp] lemma neg_cdconv (f g : G ‚Üí R) : -f ‚óã‚Çô g = -(f ‚óã‚Çô g) := by ext; simp [cdconv_apply]

lemma cdconv_sub (f g h : G ‚Üí R) : f ‚óã‚Çô (g - h) = f ‚óã‚Çô g - f ‚óã‚Çô h := by
  simp only [sub_eq_add_neg, cdconv_add, cdconv_neg]

lemma sub_cdconv (f g h : G ‚Üí R) : (f - g) ‚óã‚Çô h = f ‚óã‚Çô h - g ‚óã‚Çô h := by
  simp only [sub_eq_add_neg, add_cdconv, neg_cdconv]

end Field

section Semifield
variable [Semifield R] [CharZero R]

@[simp] lemma indicate_univ_nconv_indicate_univ : ùü≠_[R] (univ : Finset G) ‚àó‚Çô ùü≠ univ = ùü≠ univ := by
  ext; simp [indicate_apply, nconv_eq_expect_add, card_univ, *]

variable [StarRing R]

@[simp] lemma indicate_univ_cdconv_mu_univ : ùü≠_[R] (univ : Finset G) ‚óã‚Çô ùü≠ univ = ùü≠ univ := by
  ext; simp [indicate_apply, cdconv_eq_expect_add, card_univ, *]

end Semifield

section Field
variable [Field R] [CharZero R]

@[simp] lemma balance_nconv (f g : G ‚Üí R) : balance (f ‚àó‚Çô g) = balance f ‚àó‚Çô balance g := by
  simp [balance, nconv_sub, sub_nconv, expect_nconv, expect_sub_distrib]

variable [StarRing R]

@[simp] lemma balance_cdconv (f g : G ‚Üí R) : balance (f ‚óã‚Çô g) = balance f ‚óã‚Çô balance g := by
  simp [balance, cdconv_sub, sub_cdconv, expect_cdconv, map_expect, expect_sub_distrib]

end Field

namespace RCLike
variable {ùïú : Type} [RCLike ùïú] (f g : G ‚Üí ‚Ñù) (a : G)

@[simp, norm_cast]
lemma coe_nconv : (f ‚àó‚Çô g) a = ((‚Üë) ‚àò f ‚àó‚Çô (‚Üë) ‚àò g : G ‚Üí ùïú) a := map_nconv (algebraMap ‚Ñù ùïú) _ _ _

@[simp, norm_cast]
lemma coe_cdconv : (f ‚óã‚Çô g) a = ((‚Üë) ‚àò f ‚óã‚Çô (‚Üë) ‚àò g : G ‚Üí ùïú) a := by simp [cdconv_apply, coe_expect]

@[simp]
lemma coe_comp_nconv : ofReal ‚àò (f ‚àó‚Çô g) = ((‚Üë) ‚àò f ‚àó‚Çô (‚Üë) ‚àò g : G ‚Üí ùïú) := funext $ coe_nconv _ _

@[simp]
lemma coe_comp_cdconv : ofReal ‚àò (f ‚óã‚Çô g) = ((‚Üë) ‚àò f ‚óã‚Çô (‚Üë) ‚àò g : G ‚Üí ùïú) := funext $ coe_cdconv _ _

end RCLike

namespace Complex
variable (f g : G ‚Üí ‚Ñù) (a : G)

@[simp, norm_cast]
lemma coe_nconv : (f ‚àó‚Çô g) a = ((‚Üë) ‚àò f ‚àó‚Çô (‚Üë) ‚àò g : G ‚Üí ‚ÑÇ) a := RCLike.coe_nconv _ _ _

@[simp, norm_cast]
lemma coe_cdconv : (f ‚óã‚Çô g) a = ((‚Üë) ‚àò f ‚óã‚Çô (‚Üë) ‚àò g : G ‚Üí ‚ÑÇ) a := RCLike.coe_cdconv _ _ _

@[simp]
lemma coe_comp_nconv : ofReal' ‚àò (f ‚àó‚Çô g) = ((‚Üë) ‚àò f ‚àó‚Çô (‚Üë) ‚àò g : G ‚Üí ‚ÑÇ) := funext $ coe_nconv _ _

@[simp]
lemma coe_comp_cdconv : ofReal' ‚àò (f ‚óã‚Çô g) = ((‚Üë) ‚àò f ‚óã‚Çô (‚Üë) ‚àò g : G ‚Üí ‚ÑÇ) := funext $ coe_cdconv _ _

end Complex

namespace NNReal
variable (f g : G ‚Üí ‚Ñù‚â•0) (a : G)

@[simp, norm_cast]
lemma coe_nconv : (f ‚àó‚Çô g) a = ((‚Üë) ‚àò f ‚àó‚Çô (‚Üë) ‚àò g : G ‚Üí ‚Ñù) a := map_nconv NNReal.toRealHom _ _ _

@[simp, norm_cast]
lemma coe_cdconv : (f ‚óã‚Çô g) a = ((‚Üë) ‚àò f ‚óã‚Çô (‚Üë) ‚àò g : G ‚Üí ‚Ñù) a := by simp [cdconv_apply, coe_expect]

@[simp]
lemma coe_comp_nconv : ((‚Üë) : _ ‚Üí ‚Ñù) ‚àò (f ‚àó‚Çô g) = (‚Üë) ‚àò f ‚àó‚Çô (‚Üë) ‚àò g := funext $ coe_nconv _ _

@[simp]
lemma coe_comp_cdconv : ((‚Üë) : _ ‚Üí ‚Ñù) ‚àò (f ‚óã‚Çô g) = (‚Üë) ‚àò f ‚óã‚Çô (‚Üë) ‚àò g := funext $ coe_cdconv _ _

end NNReal

/-! ### Iterated convolution -/

section Semifield
variable [Semifield R] [CharZero R] {f g : G ‚Üí R} {n : ‚Ñï}

/-- Iterated convolution. -/
def iterNConv (f : G ‚Üí R) : ‚Ñï ‚Üí G ‚Üí R
  | 0 => trivNChar
  | n + 1 => iterNConv f n ‚àó‚Çô f

infixl:78 " ‚àó^‚Çô " => iterNConv

@[simp] lemma iterNConv_zero (f : G ‚Üí R) : f ‚àó^‚Çô 0 = trivNChar := rfl
@[simp] lemma iterNConv_one (f : G ‚Üí R) : f ‚àó^‚Çô 1 = f := trivNChar_nconv _

lemma iterNConv_succ (f : G ‚Üí R) (n : ‚Ñï) : f ‚àó^‚Çô (n + 1) = f ‚àó^‚Çô n ‚àó‚Çô f := rfl
lemma iterNConv_succ' (f : G ‚Üí R) (n : ‚Ñï) : f ‚àó^‚Çô (n + 1) = f ‚àó‚Çô f ‚àó^‚Çô n := nconv_comm _ _

lemma iterNConv_add (f : G ‚Üí R) (m : ‚Ñï) : ‚àÄ n, f ‚àó^‚Çô (m + n) = f ‚àó^‚Çô m ‚àó‚Çô f ‚àó^‚Çô n
  | 0 => by simp
  | n + 1 => by simp [‚Üê add_assoc, iterNConv_succ', iterNConv_add, nconv_left_comm]

lemma iterNConv_mul (f : G ‚Üí R) (m : ‚Ñï) : ‚àÄ n, f ‚àó^‚Çô (m * n) = f ‚àó^‚Çô m ‚àó^‚Çô n
  | 0 => rfl
  | n + 1 => by simp [mul_add_one, iterNConv_succ, iterNConv_add, iterNConv_mul]

lemma iterNConv_mul' (f : G ‚Üí R) (m n : ‚Ñï) : f ‚àó^‚Çô (m * n) = f ‚àó^‚Çô n ‚àó^‚Çô m := by
  rw [mul_comm, iterNConv_mul]

lemma iterNConv_nconv_distrib (f g : G ‚Üí R) : ‚àÄ n, (f ‚àó‚Çô g) ‚àó^‚Çô n = f ‚àó^‚Çô n ‚àó‚Çô g ‚àó^‚Çô n
  | 0 => (nconv_trivNChar _).symm
  | n + 1 => by simp_rw [iterNConv_succ, iterNConv_nconv_distrib, nconv_nconv_nconv_comm]

@[simp] lemma zero_iterNConv : ‚àÄ {n}, n ‚â† 0 ‚Üí (0 : G ‚Üí R) ‚àó^‚Çô n = 0
  | 0, hn => by cases hn rfl
  | n + 1, _ => nconv_zero _

@[simp] lemma smul_iterNConv [Monoid H] [DistribMulAction H R] [IsScalarTower H R R]
    [SMulCommClass H R R] (c : H) (f : G ‚Üí R) : ‚àÄ n, (c ‚Ä¢ f) ‚àó^‚Çô n = c ^ n ‚Ä¢ f ‚àó^‚Çô n
  | 0 => by simp
  | n + 1 => by simp_rw [iterNConv_succ, smul_iterNConv _ _ n, pow_succ, mul_smul_nconv_comm]

lemma comp_iterNConv [Semifield S] [CharZero S] (m : R ‚Üí+* S) (f : G ‚Üí R) :
    ‚àÄ n, m ‚àò (f ‚àó^‚Çô n) = m ‚àò f ‚àó^‚Çô n
  | 0 => by ext; simp; split_ifs <;> simp
  | n + 1 => by simp [iterNConv_succ, comp_nconv, comp_iterNConv]

lemma expect_iterNConv (f : G ‚Üí R) : ‚àÄ n, ùîº a, (f ‚àó^‚Çô n) a = (ùîº a, f a) ^ n
  | 0 => by simp [filter_eq', card_univ, NNRat.smul_def]
  | n + 1 => by simp only [iterNConv_succ, expect_nconv, expect_iterNConv, pow_succ]

@[simp] lemma iterNConv_trivNChar : ‚àÄ n, (trivNChar : G ‚Üí R) ‚àó^‚Çô n = trivNChar
  | 0 => rfl
  | _n + 1 => (nconv_trivNChar _).trans $ iterNConv_trivNChar _

lemma support_iterNConv_subset (f : G ‚Üí R) : ‚àÄ n, support (f ‚àó^‚Çô n) ‚äÜ n ‚Ä¢ support f
  | 0 => by
    simp only [iterNConv_zero, zero_smul, support_subset_iff, Ne, ite_eq_right_iff, exists_prop,
      not_forall, Set.mem_zero, and_imp, forall_eq, eq_self_iff_true, imp_true_iff, trivNChar_apply]
  | n + 1 =>
    (support_nconv_subset _ _).trans $ Set.add_subset_add_right $ support_iterNConv_subset _ _

lemma map_iterNConv [Semifield S] [CharZero S] (m : R ‚Üí+* S) (f : G ‚Üí R) (a : G)
    (n : ‚Ñï) : m ((f ‚àó^‚Çô n) a) = (m ‚àò f ‚àó^‚Çô n) a := congr_fun (comp_iterNConv m _ _) _

variable [StarRing R]

@[simp] lemma conj_iterNConv (f : G ‚Üí R) : ‚àÄ n, conj (f ‚àó^‚Çô n) = conj f ‚àó^‚Çô n
  | 0 => by simp
  | n + 1 => by simp [iterNConv_succ, conj_iterNConv]

@[simp] lemma conjneg_iterNConv (f : G ‚Üí R) : ‚àÄ n, conjneg (f ‚àó^‚Çô n) = conjneg f ‚àó^‚Çô n
  | 0 => by simp
  | n + 1 => by simp [iterNConv_succ, conjneg_iterNConv]

lemma iterNConv_cdconv_distrib (f g : G ‚Üí R) : ‚àÄ n, (f ‚óã‚Çô g) ‚àó^‚Çô n = f ‚àó^‚Çô n ‚óã‚Çô g ‚àó^‚Çô n
  | 0 => (cdconv_trivNChar _).symm
  | n + 1 => by simp_rw [iterNConv_succ, iterNConv_cdconv_distrib, nconv_cdconv_nconv_comm]

-- lemma indicate_iterNConv_apply (s : Finset G) (n : ‚Ñï) (a : G) :
--     (ùü≠_[‚Ñù] s ‚àó^‚Çô n) a = ((piFinset fun _i ‚Ü¶ s).filter fun x : Fin n ‚Üí G ‚Ü¶ ‚àë i, x i = a).card := by
--   induction' n with n ih generalizing a
--   ¬∑ simp [apply_ite card, eq_comm]
--   simp_rw [iterNConv_succ, nconv_eq_expect_sub', ih, indicate_apply, boole_mul, expect_ite, filter_univ_mem,
--     expect_const_zero, add_zero, ‚Üê Nat.cast_expect, ‚Üê Finset.card_sigma, Nat.cast_inj]
--   refine Finset.card_bij (fun f _ ‚Ü¶ Fin.cons f.1 f.2) _ _ _
--   ¬∑ simp only [Fin.expect_cons, eq_sub_iff_add_eq', mem_sigma, mem_filter, mem_piFinset, and_imp]
--     refine fun bf hb hf ha ‚Ü¶ ‚ü®Fin.cases _ _, ha‚ü©
--     ¬∑ exact hb
--     ¬∑ simpa only [Fin.cons_succ]
--   ¬∑ simp only [Sigma.ext_iff, Fin.cons_eq_cons, heq_iff_eq, imp_self, imp_true_iff, forall_const,
--       Sigma.forall]
--   ¬∑ simp only [mem_filter, mem_piFinset, mem_sigma, exists_prop, Sigma.exists, and_imp,
--       eq_sub_iff_add_eq', and_assoc]
--     exact fun f hf ha ‚Ü¶
--       ‚ü®f 0, Fin.tail f, hf _, fun _ ‚Ü¶ hf _, (Fin.expect_univ_succ _).symm.trans ha,
--         Fin.cons_self_tail _‚ü©

end Semifield

section Field
variable [Field R] [CharZero R]

@[simp] lemma balance_iterNConv (f : G ‚Üí R) : ‚àÄ {n}, n ‚â† 0 ‚Üí balance (f ‚àó^‚Çô n) = balance f ‚àó^‚Çô n
  | 0, h => by cases h rfl
  | 1, _ => by simp
  | n + 2, _ => by simp [iterNConv_succ _ (n + 1), balance_iterNConv _ n.succ_ne_zero]

end Field

namespace NNReal
variable {f : G ‚Üí ‚Ñù‚â•0}

@[simp, norm_cast]
lemma coe_iterNConv (f : G ‚Üí ‚Ñù‚â•0) (n : ‚Ñï) (a : G) : (‚Üë((f ‚àó^‚Çô n) a) : ‚Ñù) = ((‚Üë) ‚àò f ‚àó^‚Çô n) a :=
  map_iterNConv NNReal.toRealHom _ _ _

end NNReal
