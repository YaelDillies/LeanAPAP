import Project.Mathlib.Algebra.Order.LatticeGroup
import Project.Mathlib.Analysis.InnerProductSpace.PiL2
import Project.Mathlib.Analysis.Normed.Group.Basic
import Project.Mathlib.Analysis.NormedSpace.PiLp
import Project.Mathlib.Analysis.NormedSpace.Ray
import Project.Mathlib.Analysis.SpecialFunctions.Pow.Real
import Project.Mathlib.Data.Real.Basic
import Project.Mathlib.Data.Real.Ennreal
import Project.Mathlib.Data.Real.Nnreal
import Project.Mathlib.Order.ConditionallyCompleteLattice.Finset
import Project.Prereqs.Indicator

#align_import prereqs.lp_norm

/-!
# Lp norms
-/


open Finset Function Real

open scoped BigOperators ComplexConjugate ENNReal NNReal

variable {Œπ ùïú : Type _} [Fintype Œπ]

/-! ### Lp norm -/


section NormedAddCommGroup

variable {Œ± : Œπ ‚Üí Type _} [‚àÄ i, NormedAddCommGroup (Œ± i)] {p q : ‚Ñù‚â•0‚àû} {f g h : ‚àÄ i, Œ± i}

/-- The Lp norm of a function. -/
noncomputable def lpnorm (p : ‚Ñù‚â•0‚àû) (f : ‚àÄ i, Œ± i) : ‚Ñù :=
  ‚Äñ(PiLp.equiv p _).symm f‚Äñ

notation "‚Äñ" f "‚Äñ_[" p "]" => lpnorm p f

theorem lpnorm_eq_sum' (hp : p.toReal ‚â† 0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p] = (‚àë i, ‚Äñf i‚Äñ ^ p.toReal) ^ p.toReal‚Åª¬π := by
  rw [‚Üê one_div] <;> exact PiLp.norm_eq_sum (hp.lt_of_le' ENNReal.toReal_nonneg) _

theorem lpnorm_eq_sum'' {p : ‚Ñù} (hp : 0 < p) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p.toNNReal] = (‚àë i, ‚Äñf i‚Äñ ^ p) ^ p‚Åª¬π := by rw [lpnorm_eq_sum'] <;> simp [hp.ne', hp.le]

theorem lpnorm_eq_sum {p : ‚Ñù‚â•0} (hp : p ‚â† 0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p] = (‚àë i, ‚Äñf i‚Äñ ^ (p : ‚Ñù)) ^ (p‚Åª¬π : ‚Ñù) :=
  lpnorm_eq_sum' (by simpa using hp) _

theorem lpnorm_rpow_eq_sum {p : ‚Ñù‚â•0} (hp : p ‚â† 0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p] ^ (p : ‚Ñù) = ‚àë i, ‚Äñf i‚Äñ ^ (p : ‚Ñù) :=
  by
  rw [lpnorm_eq_sum hp, rpow_inv_rpow]
  ¬∑ exact sum_nonneg fun i _ => by positivity
  ¬∑ positivity

theorem lpnorm_pow_eq_sum {p : ‚Ñï} (hp : p ‚â† 0) (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[p] ^ p = ‚àë i, ‚Äñf i‚Äñ ^ p := by
  simpa using lpnorm_rpow_eq_sum (Nat.cast_ne_zero.2 hp) f

theorem L2norm_sq_eq_sum (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[2] ^ 2 = ‚àë i, ‚Äñf i‚Äñ ^ 2 := by
  simpa using lpnorm_pow_eq_sum two_ne_zero _

theorem L2norm_eq_sum (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[2] = sqrt (‚àë i, ‚Äñf i‚Äñ ^ 2) := by
  simpa [sqrt_eq_rpow] using lpnorm_eq_sum two_ne_zero _

theorem L1norm_eq_sum (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[1] = ‚àë i, ‚Äñf i‚Äñ := by simp [lpnorm_eq_sum']

theorem L0norm_eq_card (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[0] = {i | f i ‚â† 0}.toFinite.toFinset.card :=
  PiLp.norm_eq_card _

theorem Linftynorm_eq_csupr (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[‚àû] = ‚®Ü i, ‚Äñf i‚Äñ :=
  PiLp.norm_eq_ciSup _

@[simp]
theorem lpnorm_zero : ‚Äñ(0 : ‚àÄ i, Œ± i)‚Äñ_[p] = 0 :=
  by
  cases p; swap
  obtain rfl | hp := @eq_zero_or_pos _ _ p
  all_goals simp [Linftynorm_eq_csupr, L0norm_eq_card, lpnorm_eq_sum, *, ne_of_gt]

@[simp]
theorem lpnorm_norm (p : ‚Ñù‚â•0‚àû) (f : ‚àÄ i, Œ± i) : ‚Äñfun i => ‚Äñf i‚Äñ‚Äñ_[p] = ‚Äñf‚Äñ_[p] :=
  by
  cases p; swap
  obtain rfl | hp := @eq_zero_or_pos _ _ p
  all_goals simp [Linftynorm_eq_csupr, L0norm_eq_card, lpnorm_eq_sum, *, ne_of_gt]

@[simp]
theorem lpnorm_neg (f : ‚àÄ i, Œ± i) : ‚Äñ-f‚Äñ_[p] = ‚Äñf‚Äñ_[p] := by simp [‚Üê lpnorm_norm _ (-f)]

theorem lpnorm_sub_comm (f g : ‚àÄ i, Œ± i) : ‚Äñf - g‚Äñ_[p] = ‚Äñg - f‚Äñ_[p] := by
  simp [‚Üê lpnorm_neg (f - g)]

@[simp]
theorem lpnorm_nonneg : 0 ‚â§ ‚Äñf‚Äñ_[p] := by
  cases p
  ¬∑ simp only [Linftynorm_eq_csupr, ENNReal.none_eq_top]
    exact Real.iSup_nonneg fun i => norm_nonneg _
  obtain rfl | hp := eq_or_ne p 0
  ¬∑ simp only [L0norm_eq_card, ENNReal.some_eq_coe, ENNReal.coe_zero]
    exact Nat.cast_nonneg _
  ¬∑ simp only [lpnorm_eq_sum hp, ENNReal.some_eq_coe]
    exact rpow_nonneg (sum_nonneg fun i _ => rpow_nonneg <| norm_nonneg _)

@[simp]
theorem lpnorm_eq_zero : ‚Äñf‚Äñ_[p] = 0 ‚Üî f = 0 :=
  by
  cases p
  ¬∑
    cases isEmpty_or_nonempty Œπ <;>
      simp [Linftynorm_eq_csupr, ENNReal.none_eq_top, ‚Üê sup'_univ_eq_csupr, le_antisymm_iff,
        Function.funext_iff]
  obtain rfl | hp := eq_or_ne p 0
  ¬∑ simp [L0norm_eq_card, eq_empty_iff_forall_not_mem, Function.funext_iff]
  ¬∑ rw [‚Üê rpow_eq_zero lpnorm_nonneg (NNReal.coe_ne_zero.2 hp)]
    simp [lpnorm_rpow_eq_sum hp, sum_eq_zero_iff_of_nonneg, rpow_nonneg, Function.funext_iff,
      rpow_eq_zero _ (NNReal.coe_ne_zero.2 hp)]

@[simp]
theorem lpnorm_pos : 0 < ‚Äñf‚Äñ_[p] ‚Üî f ‚â† 0 :=
  lpnorm_nonneg.gt_iff_ne.trans lpnorm_eq_zero.Not

theorem lpnorm_mono_right (hpq : p ‚â§ q) (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[p] ‚â§ ‚Äñf‚Äñ_[q] :=
  sorry

section one_le

theorem lpnorm_add_le (hp : 1 ‚â§ p) (f g : ‚àÄ i, Œ± i) : ‚Äñf + g‚Äñ_[p] ‚â§ ‚Äñf‚Äñ_[p] + ‚Äñg‚Äñ_[p] :=
  haveI := Fact.mk hp
  norm_add_le _ _

theorem lpnorm_sub_le (hp : 1 ‚â§ p) (f g : ‚àÄ i, Œ± i) : ‚Äñf - g‚Äñ_[p] ‚â§ ‚Äñf‚Äñ_[p] + ‚Äñg‚Äñ_[p] :=
  haveI := Fact.mk hp
  norm_sub_le _ _

theorem lpnorm_le_lpnorm_add_lpnorm_sub' (hp : 1 ‚â§ p) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p] ‚â§ ‚Äñg‚Äñ_[p] + ‚Äñf - g‚Äñ_[p] :=
  haveI := Fact.mk hp
  norm_le_norm_add_norm_sub' _ _

theorem lpnorm_le_lpnorm_add_lpnorm_sub (hp : 1 ‚â§ p) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p] ‚â§ ‚Äñg‚Äñ_[p] + ‚Äñg - f‚Äñ_[p] :=
  haveI := Fact.mk hp
  norm_le_norm_add_norm_sub _ _

theorem lpnorm_le_add_lpnorm_add (hp : 1 ‚â§ p) (f g : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[p] ‚â§ ‚Äñf + g‚Äñ_[p] + ‚Äñg‚Äñ_[p] :=
  haveI := Fact.mk hp
  norm_le_add_norm_add _ _

theorem lpnorm_sub_le_lpnorm_sub_add_lpnorm_sub (hp : 1 ‚â§ p) :
    ‚Äñf - h‚Äñ_[p] ‚â§ ‚Äñf - g‚Äñ_[p] + ‚Äñg - h‚Äñ_[p] :=
  haveI := Fact.mk hp
  norm_sub_le_norm_sub_add_norm_sub

variable [NormedField ùïú] [‚àÄ i, NormedSpace ùïú (Œ± i)]

-- TODO: `p ‚â† 0` is enough
theorem lpnorm_smul (hp : 1 ‚â§ p) (c : ùïú) (f : ‚àÄ i, Œ± i) : ‚Äñc ‚Ä¢ f‚Äñ_[p] = ‚Äñc‚Äñ * ‚Äñf‚Äñ_[p] :=
  haveI := Fact.mk hp
  norm_smul _ _

-- TODO: Why is it so hard to use `Lpnorm_smul` directly? `function.has_smul` seems to have a hard
-- time unifying `pi.has_smul`
theorem lpnorm_smul' {Œ± : Type _} [NormedAddCommGroup Œ±] [NormedSpace ùïú Œ±] (hp : 1 ‚â§ p) (c : ùïú)
    (f : Œπ ‚Üí Œ±) : ‚Äñc ‚Ä¢ f‚Äñ_[p] = ‚Äñc‚Äñ * ‚Äñf‚Äñ_[p] :=
  lpnorm_smul hp _ _

variable [‚àÄ i, NormedSpace ‚Ñù (Œ± i)]

theorem lpnorm_nsmul (hp : 1 ‚â§ p) (n : ‚Ñï) (f : ‚àÄ i, Œ± i) : ‚Äñn ‚Ä¢ f‚Äñ_[p] = n ‚Ä¢ ‚Äñf‚Äñ_[p] :=
  haveI := Fact.mk hp
  norm_nsmul _ _

-- TODO: Why is it so hard to use `Lpnorm_nsmul` directly? `function.has_smul` seems to have a hard
-- time unifying `pi.has_smul`
theorem lpnorm_nsmul' {Œ± : Type _} [NormedAddCommGroup Œ±] [NormedSpace ‚Ñù Œ±] (hp : 1 ‚â§ p) (n : ‚Ñï)
    (f : Œπ ‚Üí Œ±) : ‚Äñn ‚Ä¢ f‚Äñ_[p] = n ‚Ä¢ ‚Äñf‚Äñ_[p] :=
  lpnorm_nsmul hp _ _

end one_le

end NormedAddCommGroup

section Real

variable {p : ‚Ñù‚â•0} {f g : Œπ ‚Üí ‚Ñù}

@[simp]
theorem lpnorm_one (hp : p ‚â† 0) : ‚Äñ(1 : Œπ ‚Üí ‚Ñù)‚Äñ_[p] = Fintype.card Œπ ^ (p‚Åª¬π : ‚Ñù) := by
  simp [lpnorm_eq_sum hp, card_univ]

theorem lpnorm_mono (hf : 0 ‚â§ f) (hfg : f ‚â§ g) : ‚Äñf‚Äñ_[p] ‚â§ ‚Äñg‚Äñ_[p] :=
  by
  obtain rfl | hp := eq_or_ne p 0
  ¬∑ simp only [L0norm_eq_card, ENNReal.some_eq_coe, ENNReal.coe_zero, Nat.cast_le]
    exact
      card_mono
        (Set.Finite.toFinset_mono fun i => mt fun hi => ((hfg i).trans_eq hi).antisymm <| hf i)
  have hp' := hp
  rw [‚Üê pos_iff_ne_zero, ‚Üê NNReal.coe_pos] at hp 
  simp_rw [‚Üê rpow_le_rpow_iff lpnorm_nonneg lpnorm_nonneg hp, lpnorm_rpow_eq_sum hp',
    norm_of_nonneg (hf _), norm_of_nonneg (hf.trans hfg _)]
  exact sum_le_sum fun i _ => rpow_le_rpow (hf _) (hfg _) hp.le

end Real

/-! #### Weighted Lp norm -/


section NormedAddCommGroup

variable {Œ± : Œπ ‚Üí Type _} [‚àÄ i, NormedAddCommGroup (Œ± i)] {p q : ‚Ñù‚â•0} {w : Œπ ‚Üí ‚Ñù‚â•0}
  {f g h : ‚àÄ i, Œ± i}

/-- The weighted Lp norm of a function. -/
noncomputable def wLpnorm (p : ‚Ñù‚â•0) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Ñù :=
  ‚Äñfun i => w i ^ (p‚Åª¬π : ‚Ñù) ‚Ä¢ ‚Äñf i‚Äñ‚Äñ_[p]

notation "‚Äñ" f "‚Äñ_[" p ", " w "]" => wLpnorm p w f

@[simp]
theorem wLpnorm_one_eq_lpnorm (p : ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[p, 1] = ‚Äñf‚Äñ_[p] := by
  obtain rfl | hp := @eq_zero_or_pos _ _ p <;> simp [wLpnorm, L0norm_eq_card, lpnorm_eq_sum, *]

@[simp]
theorem wLpnorm_const_right (hp : 1 ‚â§ p) (w : ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, const _ w] = w ^ (p‚Åª¬π : ‚Ñù) * ‚Äñf‚Äñ_[p] := by
  simpa [wLpnorm, -norm_eq_abs, norm_of_nonneg, Pi.smul_def, NNReal.smul_def, rpow_nonneg] using
    lpnorm_smul (ENNReal.one_le_coe_iff.2 hp) (w ^ (p‚Åª¬π : ‚Ñù) : ‚Ñù) fun i => ‚Äñf i‚Äñ

theorem wLpnorm_eq_sum (hp : p ‚â† 0) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] = (‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ ^ (p : ‚Ñù)) ^ (p‚Åª¬π : ‚Ñù) :=
  by
  have : (p : ‚Ñù) ‚â† 0 := by positivity
  simp_rw [wLpnorm, lpnorm_eq_sum hp, NNReal.smul_def, norm_smul]
  simp only [NNReal.coe_rpow, norm_norm, Algebra.id.smul_eq_mul, mul_rpow, norm_nonneg,
    rpow_nonneg_of_nonneg, hp, NNReal.coe_nonneg, norm_of_nonneg, rpow_inv_rpow _ this]

theorem wLpnorm_eq_sum' {p : ‚Ñù} (hp : 0 < p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p.toNNReal, w] = (‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ ^ p) ^ p‚Åª¬π := by
  rw [wLpnorm_eq_sum] <;> simp [hp, hp.ne', hp.le]

theorem wLpnorm_rpow_eq_sum {p : ‚Ñù‚â•0} (hp : p ‚â† 0) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] ^ (p : ‚Ñù) = ‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ ^ (p : ‚Ñù) :=
  by
  rw [wLpnorm_eq_sum hp, rpow_inv_rpow]
  ¬∑ exact sum_nonneg fun i _ => by positivity
  ¬∑ positivity

theorem wLpnorm_pow_eq_sum {p : ‚Ñï} (hp : p ‚â† 0) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] ^ p = ‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ ^ p := by
  simpa using wLpnorm_rpow_eq_sum (Nat.cast_ne_zero.2 hp) w f

theorem wL1norm_eq_sum (w : Œπ ‚Üí ‚Ñù‚â•0) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[1, w] = ‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ :=
  by simp [wLpnorm_eq_sum]

theorem wL0norm_eq_card (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[0, w] = {i | f i ‚â† 0}.toFinite.toFinset.card := by simp [wLpnorm, L0norm_eq_card]

@[simp]
theorem wLpnorm_zero (w : Œπ ‚Üí ‚Ñù‚â•0) : ‚Äñ(0 : ‚àÄ i, Œ± i)‚Äñ_[p, w] = 0 := by simp [wLpnorm, ‚Üê Pi.zero_def]

@[simp]
theorem wLpnorm_norm (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Äñfun i => ‚Äñf i‚Äñ‚Äñ_[p, w] = ‚Äñf‚Äñ_[p, w] := by
  obtain rfl | hp := @eq_zero_or_pos _ _ p <;> simp [wL0norm_eq_card, wLpnorm_eq_sum, *, ne_of_gt]

@[simp]
theorem wLpnorm_neg (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Äñ-f‚Äñ_[p, w] = ‚Äñf‚Äñ_[p, w] := by
  simp [‚Üê wLpnorm_norm _ (-f)]

theorem wLpnorm_sub_comm (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) : ‚Äñf - g‚Äñ_[p, w] = ‚Äñg - f‚Äñ_[p, w] := by
  simp [‚Üê wLpnorm_neg _ (f - g)]

@[simp]
theorem wLpnorm_nonneg : 0 ‚â§ ‚Äñf‚Äñ_[p, w] :=
  lpnorm_nonneg

theorem wLpnorm_mono_right (hpq : p ‚â§ q) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñf‚Äñ_[q, w] :=
  sorry

section one_le

theorem wLpnorm_add_le (hp : 1 ‚â§ p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf + g‚Äñ_[p, w] ‚â§ ‚Äñf‚Äñ_[p, w] + ‚Äñg‚Äñ_[p, w] :=
  by
  unfold wLpnorm
  refine'
    (lpnorm_add_le (by exact_mod_cast hp) _ _).trans'
      (lpnorm_mono (fun i => by dsimp <;> positivity) fun i => _)
  dsimp
  rw [‚Üê smul_add]
  exact smul_le_smul_of_nonneg (norm_add_le _ _) (zero_le _)

theorem wLpnorm_sub_le (hp : 1 ‚â§ p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf - g‚Äñ_[p, w] ‚â§ ‚Äñf‚Äñ_[p, w] + ‚Äñg‚Äñ_[p, w] := by
  simpa [sub_eq_add_neg] using wLpnorm_add_le hp w f (-g)

theorem wLpnorm_le_wLpnorm_add_wLpnorm_sub' (hp : 1 ‚â§ p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñg‚Äñ_[p, w] + ‚Äñf - g‚Äñ_[p, w] := by simpa using wLpnorm_add_le hp w g (f - g)

theorem wLpnorm_le_wLpnorm_add_wLpnorm_sub (hp : 1 ‚â§ p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñg‚Äñ_[p, w] + ‚Äñg - f‚Äñ_[p, w] := by
  rw [wLpnorm_sub_comm] <;> exact wLpnorm_le_wLpnorm_add_wLpnorm_sub' hp _ _ _

theorem wLpnorm_le_add_wLpnorm_add (hp : 1 ‚â§ p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñf + g‚Äñ_[p, w] + ‚Äñg‚Äñ_[p, w] := by simpa using wLpnorm_add_le hp w (f + g) (-g)

theorem wLpnorm_sub_le_Lpnorm_sub_add_Lpnorm_sub (hp : 1 ‚â§ p) :
    ‚Äñf - h‚Äñ_[p, w] ‚â§ ‚Äñf - g‚Äñ_[p, w] + ‚Äñg - h‚Äñ_[p, w] := by
  simpa using wLpnorm_add_le hp w (f - g) (g - h)

variable [NormedField ùïú] [‚àÄ i, NormedSpace ùïú (Œ± i)]

-- TODO: `p ‚â† 0` is enough
theorem wLpnorm_smul (hp : 1 ‚â§ p) (c : ùïú) (f : ‚àÄ i, Œ± i) : ‚Äñc ‚Ä¢ f‚Äñ_[p, w] = ‚Äñc‚Äñ * ‚Äñf‚Äñ_[p, w] :=
  by
  rw [wLpnorm, wLpnorm]
  have : (1 : ‚Ñù‚â•0‚àû) ‚â§ p := by exact_mod_cast hp
  have := lpnorm_smul this ‚Äñc‚Äñ fun i => w i ^ (p‚Åª¬π : ‚Ñù) ‚Ä¢ ‚Äñf i‚Äñ
  rw [norm_norm] at this 
  rw [‚Üê this]
  congr with i : 1
  simp only [Pi.smul_apply, Algebra.id.smul_eq_mul, Algebra.mul_smul_comm, norm_smul]

@[simp]
theorem wLpnorm_smul_right (hp : p ‚â† 0) (c : ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, c ‚Ä¢ w] = c ^ (p‚Åª¬π : ‚Ñù) * ‚Äñf‚Äñ_[p, w] :=
  by
  simp only [wLpnorm_eq_sum hp, NNReal.smul_def, Pi.smul_apply, Algebra.id.smul_eq_mul,
    NNReal.coe_mul, mul_assoc, ‚Üê mul_sum]
  exact mul_rpow (by positivity) (sum_nonneg fun _ _ => by positivity)

-- TODO: Why is it so hard to use `wLpnorm_smul` directly? `function.has_smul` seems to have a hard
-- time unifying `pi.has_smul`
theorem wLpnorm_smul' {Œ± : Type _} [NormedAddCommGroup Œ±] [NormedSpace ùïú Œ±] (hp : 1 ‚â§ p) (c : ùïú)
    (f : Œπ ‚Üí Œ±) : ‚Äñc ‚Ä¢ f‚Äñ_[p, w] = ‚Äñc‚Äñ * ‚Äñf‚Äñ_[p, w] :=
  wLpnorm_smul hp _ _

variable [‚àÄ i, NormedSpace ‚Ñù (Œ± i)]

theorem wLpnorm_nsmul (hp : 1 ‚â§ p) (n : ‚Ñï) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñn ‚Ä¢ f‚Äñ_[p, w] = n ‚Ä¢ ‚Äñf‚Äñ_[p, w] := by
  rw [nsmul_eq_smul_cast ‚Ñù, wLpnorm_smul hp, IsROrC.norm_natCast, nsmul_eq_mul]

-- TODO: Why is it so hard to use `wLpnorm_nsmul` directly? `function.has_smul` seems to have a hard
-- time unifying `pi.has_smul`
theorem wLpnorm_nsmul' {Œ± : Type _} [NormedAddCommGroup Œ±] [NormedSpace ‚Ñù Œ±] (hp : 1 ‚â§ p) (n : ‚Ñï)
    (w : Œπ ‚Üí ‚Ñù‚â•0) (f : Œπ ‚Üí Œ±) : ‚Äñn ‚Ä¢ f‚Äñ_[p, w] = n ‚Ä¢ ‚Äñf‚Äñ_[p, w] :=
  wLpnorm_nsmul hp _ _ _

end one_le

end NormedAddCommGroup

section NormedAddCommGroup

variable {Œ± : Type _} [NormedAddCommGroup Œ±] {p : ‚Ñù‚â•0}

@[simp]
theorem lpnorm_const (hp : p ‚â† 0) (a : Œ±) : ‚Äñconst Œπ a‚Äñ_[p] = ‚Üë(Fintype.card Œπ) ^ (p‚Åª¬π : ‚Ñù) * ‚Äña‚Äñ :=
  by
  simp only [lpnorm_eq_sum hp, card_univ, mul_rpow, norm_nonneg, rpow_nonneg,
    NNReal.coe_ne_zero.2 hp, rpow_rpow_inv, const_apply, sum_const, nsmul_eq_mul, Nat.cast_nonneg,
    Ne.def, not_false_iff]

end NormedAddCommGroup

section Real

variable {p : ‚Ñù‚â•0} {w : Œπ ‚Üí ‚Ñù‚â•0} {f g : Œπ ‚Üí ‚Ñù}

@[simp]
theorem wLpnorm_one (hp : p ‚â† 0) (w : Œπ ‚Üí ‚Ñù‚â•0) : ‚Äñ(1 : Œπ ‚Üí ‚Ñù)‚Äñ_[p, w] = (‚àë i, w i) ^ (p‚Åª¬π : ‚Ñù) := by
  simp [wLpnorm_eq_sum hp, NNReal.smul_def]

theorem wLpnorm_mono (hf : 0 ‚â§ f) (hfg : f ‚â§ g) : ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñg‚Äñ_[p, w] :=
  lpnorm_mono (fun i => by dsimp <;> positivity) fun i =>
    smul_le_smul_of_nonneg
        (by rw [norm_of_nonneg (hf _), norm_of_nonneg (hf.trans hfg _)] <;> exact hfg _) <|
      by positivity

end Real

/-! #### Inner product -/


section CommSemiring

variable [CommSemiring ùïú] [StarRing ùïú] {Œ≥ : Type _} [DistribSMul Œ≥ ùïú]

/-- Inner product giving rise to the L2 norm. -/
def l2inner (f g : Œπ ‚Üí ùïú) : ùïú :=
  ‚àë i, conj (f i) * g i

notation "‚ü™" f ", " g "‚ü´_[" ùïú "]" => @l2inner _ ùïú _ _ _ f g

theorem l2inner_eq_sum (f g : Œπ ‚Üí ùïú) : ‚ü™f, g‚ü´_[ùïú] = ‚àë i, conj (f i) * g i :=
  rfl

@[simp]
theorem conj_l2inner (f g : Œπ ‚Üí ùïú) : conj ‚ü™f, g‚ü´_[ùïú] = ‚ü™g, f‚ü´_[ùïú] := by
  simp [l2inner_eq_sum, map_sum, mul_comm]

@[simp]
theorem l2inner_zero_left (g : Œπ ‚Üí ùïú) : ‚ü™0, g‚ü´_[ùïú] = 0 := by simp [l2inner_eq_sum]

@[simp]
theorem l2inner_zero_right (f : Œπ ‚Üí ùïú) : ‚ü™f, 0‚ü´_[ùïú] = 0 := by simp [l2inner_eq_sum]

@[simp]
theorem l2inner_const_left (a : ùïú) (f : Œπ ‚Üí ùïú) : ‚ü™const _ a, f‚ü´_[ùïú] = conj a * ‚àë x, f x := by
  simp only [l2inner_eq_sum, const_apply, mul_sum]

@[simp]
theorem l2inner_const_right (f : Œπ ‚Üí ùïú) (a : ùïú) : ‚ü™f, const _ a‚ü´_[ùïú] = (‚àë x, conj (f x)) * a := by
  simp only [l2inner_eq_sum, const_apply, sum_mul]

theorem l2inner_add_left (f‚ÇÅ f‚ÇÇ g : Œπ ‚Üí ùïú) : ‚ü™f‚ÇÅ + f‚ÇÇ, g‚ü´_[ùïú] = ‚ü™f‚ÇÅ, g‚ü´_[ùïú] + ‚ü™f‚ÇÇ, g‚ü´_[ùïú] := by
  simp_rw [l2inner_eq_sum, Pi.add_apply, map_add, add_mul, sum_add_distrib]

theorem l2inner_add_right (f g‚ÇÅ g‚ÇÇ : Œπ ‚Üí ùïú) : ‚ü™f, g‚ÇÅ + g‚ÇÇ‚ü´_[ùïú] = ‚ü™f, g‚ÇÅ‚ü´_[ùïú] + ‚ü™f, g‚ÇÇ‚ü´_[ùïú] := by
  simp_rw [l2inner_eq_sum, Pi.add_apply, mul_add, sum_add_distrib]

theorem l2inner_smul_left [Star Œ≥] [StarModule Œ≥ ùïú] [IsScalarTower Œ≥ ùïú ùïú] (c : Œ≥) (f g : Œπ ‚Üí ùïú) :
    ‚ü™c ‚Ä¢ f, g‚ü´_[ùïú] = star c ‚Ä¢ ‚ü™f, g‚ü´_[ùïú] := by
  simp only [l2inner_eq_sum, Pi.smul_apply, smul_mul_assoc, smul_sum, starRingEnd_apply, star_smul]

theorem l2inner_smul_right [Star Œ≥] [StarModule Œ≥ ùïú] [SMulCommClass Œ≥ ùïú ùïú] (c : Œ≥) (f g : Œπ ‚Üí ùïú) :
    ‚ü™f, c ‚Ä¢ g‚ü´_[ùïú] = c ‚Ä¢ ‚ü™f, g‚ü´_[ùïú] := by
  simp only [l2inner_eq_sum, Pi.smul_apply, mul_smul_comm, smul_sum, starRingEnd_apply, star_smul]

theorem smul_l2inner_left [InvolutiveStar Œ≥] [StarModule Œ≥ ùïú] [IsScalarTower Œ≥ ùïú ùïú] (c : Œ≥)
    (f g : Œπ ‚Üí ùïú) : c ‚Ä¢ ‚ü™f, g‚ü´_[ùïú] = ‚ü™star c ‚Ä¢ f, g‚ü´_[ùïú] := by rw [l2inner_smul_left, star_star]

end CommSemiring

section CommRing

variable [CommRing ùïú] [StarRing ùïú]

theorem l2inner_neg_left (f g : Œπ ‚Üí ùïú) : ‚ü™-f, g‚ü´_[ùïú] = -‚ü™f, g‚ü´_[ùïú] := by
  simp [l2inner_eq_sum, sum_add_distrib]

theorem l2inner_neg_right (f g : Œπ ‚Üí ùïú) : ‚ü™f, -g‚ü´_[ùïú] = -‚ü™f, g‚ü´_[ùïú] := by
  simp [l2inner_eq_sum, sum_add_distrib]

theorem l2inner_sub_left (f‚ÇÅ f‚ÇÇ g : Œπ ‚Üí ùïú) : ‚ü™f‚ÇÅ - f‚ÇÇ, g‚ü´_[ùïú] = ‚ü™f‚ÇÅ, g‚ü´_[ùïú] - ‚ü™f‚ÇÇ, g‚ü´_[ùïú] := by
  simp_rw [sub_eq_add_neg, l2inner_add_left, l2inner_neg_left]

theorem l2inner_sub_right (f g‚ÇÅ g‚ÇÇ : Œπ ‚Üí ùïú) : ‚ü™f, g‚ÇÅ - g‚ÇÇ‚ü´_[ùïú] = ‚ü™f, g‚ÇÅ‚ü´_[ùïú] - ‚ü™f, g‚ÇÇ‚ü´_[ùïú] := by
  simp_rw [sub_eq_add_neg, l2inner_add_right, l2inner_neg_right]

end CommRing

section OrderedCommSemiring

variable [OrderedCommSemiring ùïú] [StarOrderedRing ùïú] {f g : Œπ ‚Üí ùïú}

theorem l2inner_nonneg (hf : 0 ‚â§ f) (hg : 0 ‚â§ g) : 0 ‚â§ ‚ü™f, g‚ü´_[ùïú] :=
  sum_nonneg fun _ _ => mul_nonneg (star_nonneg.2 <| hf _) <| hg _

end OrderedCommSemiring

section LinearOrderedCommRing

variable [LinearOrderedCommRing ùïú] [StarOrderedRing ùïú] [TrivialStar ùïú] {f g : Œπ ‚Üí ùïú}

--TODO: Can we remove the `has_trivial_star` assumption?
theorem abs_l2inner_le_l2inner_abs : |‚ü™f, g‚ü´_[ùïú]| ‚â§ ‚ü™|f|, |g|‚ü´_[ùïú] :=
  (abs_sum_le_sum_abs _ _).trans_eq <|
    sum_congr rfl fun i _ => by simp only [abs_mul, conj_trivial, Pi.abs_apply]

end LinearOrderedCommRing

section IsROrC

variable {Œ∫ : Type _} [IsROrC ùïú] {f : Œπ ‚Üí ùïú}

theorem l2inner_eq_inner (f g : Œπ ‚Üí ùïú) :
    ‚ü™f, g‚ü´_[ùïú] = inner ((PiLp.equiv 2 _).symm f) ((PiLp.equiv 2 _).symm g) :=
  rfl

theorem inner_eq_l2inner (f g : PiLp 2 fun i : Œπ => ùïú) :
    inner f g = ‚ü™PiLp.equiv 2 _ f, PiLp.equiv 2 _ g‚ü´_[ùïú] :=
  rfl

@[simp]
theorem l2inner_self (f : Œπ ‚Üí ùïú) : ‚ü™f, f‚ü´_[ùïú] = ‚Äñf‚Äñ_[2] ^ 2 := by
  simp_rw [‚Üê algebraMap.coe_pow, L2norm_sq_eq_sum, l2inner_eq_sum, algebraMap.coe_sum,
    IsROrC.conj_mul, IsROrC.normSq_eq_def']

theorem l2inner_self_of_norm_eq_one (hf : ‚àÄ x, ‚Äñf x‚Äñ = 1) : ‚ü™f, f‚ü´_[ùïú] = Fintype.card Œπ := by
  simp [l2inner_eq_sum, IsROrC.conj_mul, IsROrC.normSq_eq_def', hf, card_univ]

theorem linearIndependent_of_ne_zero_of_l2inner_eq_zero {v : Œ∫ ‚Üí Œπ ‚Üí ùïú} (hz : ‚àÄ k, v k ‚â† 0)
    (ho : Pairwise fun k l => ‚ü™v k, v l‚ü´_[ùïú] = 0) : LinearIndependent ùïú v :=
  by
  simp_rw [l2inner_eq_inner] at ho 
  have := linearIndependent_of_ne_zero_of_inner_eq_zero _ ho
  exacts [this, hz]

end IsROrC

section lpnorm

variable {Œ± Œ≤ : Type _} [AddCommGroup Œ±] [Fintype Œ±] {p : ‚Ñù‚â•0‚àû}

@[simp]
theorem lpnorm_translate [NormedAddCommGroup Œ≤] (a : Œ±) (f : Œ± ‚Üí Œ≤) : ‚ÄñœÑ a f‚Äñ_[p] = ‚Äñf‚Äñ_[p] :=
  by
  cases p
  ¬∑ simp only [Linftynorm_eq_csupr, ENNReal.none_eq_top, translate_apply]
    exact (Equiv.subRight _).iSup_congr fun _ => rfl
  obtain rfl | hp := eq_or_ne p 0
  ¬∑ simp only [L0norm_eq_card, translate_apply, Ne.def, ENNReal.some_eq_coe, ENNReal.coe_zero,
      Nat.cast_inj]
    exact
      card_congr (fun x _ => x - a) (fun x hx => by simpa using hx)
        (fun x y _ _ h => by simpa using h) fun x hx => ‚ü®x + a, by simpa using hx‚ü©
  ¬∑ simp only [lpnorm_eq_sum hp, ENNReal.some_eq_coe, translate_apply]
    congr 1
    exact Fintype.sum_equiv (Equiv.subRight _) _ _ fun _ => rfl

@[simp]
theorem lpnorm_conj [IsROrC Œ≤] (f : Œ± ‚Üí Œ≤) : ‚Äñconj f‚Äñ_[p] = ‚Äñf‚Äñ_[p] :=
  by
  cases p; swap; obtain rfl | hp := eq_or_ne p 0
  all_goals
    simp only [Linftynorm_eq_csupr, lpnorm_eq_sum, L0norm_eq_card, ENNReal.some_eq_coe,
      ENNReal.none_eq_top, ENNReal.coe_zero, Pi.conj_apply, IsROrC.norm_conj, map_ne_zero, *]
  ¬∑ simp only [lpnorm_eq_sum hp, Pi.conj_apply, IsROrC.norm_conj]

@[simp]
theorem lpnorm_conjneg [IsROrC Œ≤] (f : Œ± ‚Üí Œ≤) : ‚Äñconjneg f‚Äñ_[p] = ‚Äñf‚Äñ_[p] :=
  by
  simp only [conjneg, lpnorm_conj]
  cases p
  ¬∑ simp only [Linftynorm_eq_csupr, ENNReal.none_eq_top, conjneg, IsROrC.norm_conj]
    exact (Equiv.neg _).iSup_congr fun _ => rfl
  obtain rfl | hp := eq_or_ne p 0
  ¬∑ simp only [L0norm_eq_card, Ne.def, ENNReal.some_eq_coe, ENNReal.coe_zero, Nat.cast_inj]
    exact
      card_congr (fun x _ => -x) (fun x hx => by simpa using hx) (fun x y _ _ => neg_inj.1)
        fun x hx => ‚ü®-x, by simpa using hx‚ü©
  ¬∑ simp only [lpnorm_eq_sum hp, ENNReal.some_eq_coe]
    congr 1
    exact Fintype.sum_equiv (Equiv.neg _) _ _ fun _ => rfl

end lpnorm

section IsROrC

variable {Œ± Œ≤ : Type _} [Fintype Œ±]

theorem L1norm_hMul [IsROrC Œ≤] (f g : Œ± ‚Üí Œ≤) : ‚Äñf * g‚Äñ_[1] = ‚ü™fun i => ‚Äñf i‚Äñ, fun i => ‚Äñg i‚Äñ‚ü´_[‚Ñù] :=
  by simp [l2inner_eq_sum, L1norm_eq_sum]

end IsROrC

section wLpnorm

variable {Œ± Œ≤ : Type _} [AddCommGroup Œ±] [Fintype Œ±] {p : ‚Ñù‚â•0} {w : Œ± ‚Üí ‚Ñù‚â•0}

@[simp]
theorem wLpnorm_translate [NormedAddCommGroup Œ≤] (a : Œ±) (f : Œ± ‚Üí Œ≤) :
    ‚ÄñœÑ a f‚Äñ_[p, œÑ a w] = ‚Äñf‚Äñ_[p, w] :=
  (lpnorm_translate a fun i => w i ^ (p‚Åª¬π : ‚Ñù) ‚Ä¢ ‚Äñf i‚Äñ : _)

@[simp]
theorem wLpnorm_conj [IsROrC Œ≤] (f : Œ± ‚Üí Œ≤) : ‚Äñconj f‚Äñ_[p, w] = ‚Äñf‚Äñ_[p, w] := by simp [wLpnorm]

@[simp]
theorem wLpnorm_conjneg [IsROrC Œ≤] (f : Œ± ‚Üí Œ≤) : ‚Äñconjneg f‚Äñ_[p] = ‚Äñf‚Äñ_[p] := by simp [wLpnorm]

end wLpnorm

/-- **Cauchy-Schwarz inequality** -/
theorem l2inner_le_L2norm_hMul_L2norm (f g : Œπ ‚Üí ‚Ñù) : ‚ü™f, g‚ü´_[‚Ñù] ‚â§ ‚Äñf‚Äñ_[2] * ‚Äñg‚Äñ_[2] :=
  real_inner_le_norm ((PiLp.equiv 2 _).symm f) _

namespace Tactic

open Positivity

/- ./././Mathport/Syntax/Translate/Tactic/Basic.lean:87:10: unsupported modifiers in user command -/
alias ‚ü®_, Lpnorm_pos_of_ne_zero‚ü© := lpnorm_pos

theorem lpnorm_pos_of_ne_zero' {Œ± : Type _} [NormedAddCommGroup Œ±] {p : ‚Ñù‚â•0‚àû} {f : Œπ ‚Üí Œ±}
    (hf : f ‚â† 0) : 0 < ‚Äñf‚Äñ_[p] :=
  lpnorm_pos_of_ne_zero hf

theorem lpnorm_pos_of_pos {Œ± : Œπ ‚Üí Type _} [‚àÄ i, NormedAddCommGroup (Œ± i)] [‚àÄ i, Preorder (Œ± i)]
    {p : ‚Ñù‚â•0‚àû} {f : ‚àÄ i, Œ± i} (hf : 0 < f) : 0 < ‚Äñf‚Äñ_[p] :=
  lpnorm_pos_of_ne_zero hf.ne'

theorem lpnorm_pos_of_pos' {Œ± : Type _} [NormedAddCommGroup Œ±] [Preorder Œ±] {p : ‚Ñù‚â•0‚àû} {f : Œπ ‚Üí Œ±}
    (hf : 0 < f) : 0 < ‚Äñf‚Äñ_[p] :=
  lpnorm_pos_of_ne_zero hf.ne'

section OrderedCommSemiring

variable [OrderedCommSemiring ùïú] [StarOrderedRing ùïú] {f g : Œπ ‚Üí ùïú}

private theorem L2inner_nonneg_of_pos_of_nonneg (hf : 0 < f) (hg : 0 ‚â§ g) : 0 ‚â§ ‚ü™f, g‚ü´_[ùïú] :=
  l2inner_nonneg hf.le hg

private theorem L2inner_nonneg_of_nonneg_of_pos (hf : 0 ‚â§ f) (hg : 0 < g) : 0 ‚â§ ‚ü™f, g‚ü´_[ùïú] :=
  l2inner_nonneg hf hg.le

private theorem L2inner_nonneg_of_pos_of_pos (hf : 0 < f) (hg : 0 < g) : 0 ‚â§ ‚ü™f, g‚ü´_[ùïú] :=
  l2inner_nonneg hf.le hg.le

end OrderedCommSemiring

/-- Extension for the `positivity` tactic: Lp norms are nonnegative, and is strictly positive if its
input is nonzero. -/
@[positivity]
unsafe def positivity_Lpnorm : expr ‚Üí tactic strictness
  | q(@lpnorm $(Œπ) $(hŒπ) $(Œ±) $(hŒ±) $(p) $(f)) => do
    (-- if can prove `0 < a` or `a ‚â† 0`, report positivity
        do
          let strict_f ‚Üê core f
          match strict_f with
            | positive hp =>
              positive <$> mk_mapp `` Lpnorm_pos_of_pos [Œπ, hŒπ, Œ±, hŒ±, p, f, hp] <|>
                positive <$> mk_mapp `` Lpnorm_pos_of_pos' [Œπ, hŒπ, none, none, none, p, f, hp]
            | nonzero hp =>
              positive <$> mk_mapp `` Lpnorm_pos_of_ne_zero [Œπ, hŒπ, Œ±, hŒ±, p, f, hp] <|>
                positive <$> mk_mapp `` Lpnorm_pos_of_ne_zero' [Œπ, hŒπ, none, none, p, f, hp]
            | _ => failed) <|>-- else report nonnegativity
          nonnegative <$>
          mk_mapp `` lpnorm_nonneg [none, none, none, none, p, f]
  | e => pp e >>= fail ‚àò format.bracket "The expression `" "` isn't of the form `‚Äñf‚Äñ_[p]`"

/-- Extension for the `positivity` tactic: Lp norms are nonnegative, and is strictly positive if its
input is nonzero. -/
@[positivity]
unsafe def positivity_wLpnorm : expr ‚Üí tactic strictness
  | q(‚Äñ$(f)‚Äñ_[$(p), $(w)]) =>
    nonnegative <$> mk_mapp `` wLpnorm_nonneg [none, none, none, none, p, w, f]
  | e => pp e >>= fail ‚àò format.bracket "The expression `" "` isn't of the form `‚Äñf‚Äñ_[p, w]`"

/-- Extension for the `positivity` tactic: The inner product of nonnegative functions is
nonnegative. -/
@[positivity]
unsafe def positivity_L2inner : expr ‚Üí tactic strictness
  | q(‚ü™$(f), $(g)‚ü´_[$(ùïú)]) => do
    let strict_f ‚Üê core f
    let strict_g ‚Üê core g
    match strict_f, strict_g with
      | positive hf, positive hg => nonnegative <$> mk_app `` L2inner_nonneg_of_pos_of_pos [hf, hg]
      | positive hf, nonnegative hg =>
        nonnegative <$> mk_app `` L2inner_nonneg_of_pos_of_nonneg [hf, hg]
      | nonnegative hf, positive hg =>
        nonnegative <$> mk_app `` L2inner_nonneg_of_nonneg_of_pos [hf, hg]
      | nonnegative hf, nonnegative hg => nonnegative <$> mk_app `` l2inner_nonneg [hf, hg]
      | _, _ => failed
  | e => pp e >>= fail ‚àò format.bracket "The expression `" "` isn't of the form `‚ü™f, g‚ü´_[ùïú]`"

end Tactic

section Examples

section NormedAddCommGroup

variable {Œ± : Œπ ‚Üí Type _} [‚àÄ i, NormedAddCommGroup (Œ± i)] {w : Œπ ‚Üí ‚Ñù‚â•0} {f : ‚àÄ i, Œ± i}

example {p : ‚Ñù‚â•0‚àû} : 0 ‚â§ ‚Äñf‚Äñ_[p] := by positivity

example {p : ‚Ñù‚â•0‚àû} (hf : f ‚â† 0) : 0 < ‚Äñf‚Äñ_[p] := by positivity

example {p : ‚Ñù‚â•0‚àû} {f : Œπ ‚Üí ‚Ñù} (hf : 0 < f) : 0 < ‚Äñf‚Äñ_[p] := by positivity

example {p : ‚Ñù‚â•0} : 0 ‚â§ ‚Äñf‚Äñ_[p, w] := by positivity

end NormedAddCommGroup

section OrderedCommSemiring

variable [OrderedCommSemiring ùïú] [StarOrderedRing ùïú] {f g : Œπ ‚Üí ùïú}

example (hf : 0 < f) (hg : 0 < g) : 0 ‚â§ ‚ü™f, g‚ü´_[ùïú] := by positivity

example (hf : 0 < f) (hg : 0 ‚â§ g) : 0 ‚â§ ‚ü™f, g‚ü´_[ùïú] := by positivity

example (hf : 0 ‚â§ f) (hg : 0 < g) : 0 ‚â§ ‚ü™f, g‚ü´_[ùïú] := by positivity

example (hf : 0 ‚â§ f) (hg : 0 ‚â§ g) : 0 ‚â§ ‚ü™f, g‚ü´_[ùïú] := by positivity

end OrderedCommSemiring

section Complex

variable {w : Œπ ‚Üí ‚Ñù‚â•0} {f : Œπ ‚Üí ‚ÑÇ}

example {p : ‚Ñù‚â•0‚àû} : 0 ‚â§ ‚Äñf‚Äñ_[p] := by positivity

example {p : ‚Ñù‚â•0‚àû} (hf : f ‚â† 0) : 0 < ‚Äñf‚Äñ_[p] := by positivity

example {p : ‚Ñù‚â•0‚àû} {f : Œπ ‚Üí ‚Ñù} (hf : 0 < f) : 0 < ‚Äñf‚Äñ_[p] := by positivity

example {p : ‚Ñù‚â•0} : 0 ‚â§ ‚Äñf‚Äñ_[p, w] := by positivity

end Complex

end Examples

/-! ### H√∂lder inequality -/


section lpnorm

variable {Œ± : Type _} [Fintype Œ±] {p q : ‚Ñù‚â•0} {f g : Œ± ‚Üí ‚Ñù}

@[simp]
theorem lpnorm_abs (p : ‚Ñù‚â•0‚àû) (f : Œ± ‚Üí ‚Ñù) : ‚Äñ|f|‚Äñ_[p] = ‚Äñf‚Äñ_[p] := by simpa using lpnorm_norm p f

theorem L1norm_hMul_of_nonneg (hf : 0 ‚â§ f) (hg : 0 ‚â§ g) : ‚Äñf * g‚Äñ_[1] = ‚ü™f, g‚ü´_[‚Ñù] := by
  convert L1norm_hMul f g <;> ext a <;> refine' (norm_of_nonneg <| _).symm; exacts [hf _, hg _]

theorem lpnorm_rpow (hp : p ‚â† 0) (hq : q ‚â† 0) (hf : 0 ‚â§ f) :
    ‚Äñf ^ (q : ‚Ñù)‚Äñ_[p] = ‚Äñf‚Äñ_[p * q] ^ (q : ‚Ñù) :=
  by
  refine' rpow_left_inj_on (NNReal.coe_ne_zero.2 hp) lpnorm_nonneg (by dsimp <;> positivity) _
  dsimp
  rw [‚Üê rpow_mul lpnorm_nonneg, ‚Üê mul_comm, ‚Üê ENNReal.coe_mul, ‚Üê NNReal.coe_mul,
    lpnorm_rpow_eq_sum hp, lpnorm_rpow_eq_sum (mul_ne_zero hq hp)]
  simp [abs_rpow_of_nonneg (hf _), ‚Üê rpow_mul]

theorem L1norm_rpow (hq : q ‚â† 0) (hf : 0 ‚â§ f) : ‚Äñf ^ (q : ‚Ñù)‚Äñ_[1] = ‚Äñf‚Äñ_[q] ^ (q : ‚Ñù) := by
  simpa only [ENNReal.coe_one, one_mul] using lpnorm_rpow one_ne_zero hq hf

theorem lpnorm_eq_L1norm_rpow (hp : p ‚â† 0) (f : Œ± ‚Üí ‚Ñù) :
    ‚Äñf‚Äñ_[p] = ‚Äñ|f| ^ (p : ‚Ñù)‚Äñ_[1] ^ (p‚Åª¬π : ‚Ñù) := by
  simp [lpnorm_eq_sum hp, L1norm_eq_sum, abs_rpow_of_nonneg]

theorem lpnorm_rpow' (hp : p ‚â† 0) (hq : q ‚â† 0) (f : Œ± ‚Üí ‚Ñù) :
    ‚Äñf‚Äñ_[p] ^ (q : ‚Ñù) = ‚Äñ|f| ^ (q : ‚Ñù)‚Äñ_[p / q] := by
  rw [‚Üê ENNReal.coe_div hq,
    lpnorm_rpow (div_ne_zero hp hq) hq (LatticeOrderedCommGroup.abs_nonneg f), lpnorm_abs, ‚Üê
    ENNReal.coe_mul, div_mul_cancel _ hq]

--TODO: Generalise the following four to include `f g : Œ± ‚Üí ‚ÑÇ`
/-- H√∂lder's inequality, binary case. -/
theorem l2inner_le_lpnorm_hMul_lpnorm (hpq : IsConjugateExponent p q) (f g : Œ± ‚Üí ‚Ñù) :
    ‚ü™f, g‚ü´_[‚Ñù] ‚â§ ‚Äñf‚Äñ_[p] * ‚Äñg‚Äñ_[q] := by
  have hp := hpq.ne_zero
  have hq := hpq.symm.ne_zero
  norm_cast at hp hq 
  simpa [l2inner_eq_sum, lpnorm_eq_sum, *] using inner_le_Lp_mul_Lq _ f g hpq

/-- H√∂lder's inequality, binary case. -/
theorem abs_l2inner_le_lpnorm_hMul_lpnorm (hpq : IsConjugateExponent p q) (f g : Œ± ‚Üí ‚Ñù) :
    |‚ü™f, g‚ü´_[‚Ñù]| ‚â§ ‚Äñf‚Äñ_[p] * ‚Äñg‚Äñ_[q] :=
  abs_l2inner_le_l2inner_abs.trans <|
    (l2inner_le_lpnorm_hMul_lpnorm hpq _ _).trans_eq <| by simp_rw [lpnorm_abs]

/-- H√∂lder's inequality, binary case. -/
theorem lpnorm_hMul_le (hp : p ‚â† 0) (hq : q ‚â† 0) (r : ‚Ñù‚â•0) (hpqr : p‚Åª¬π + q‚Åª¬π = r‚Åª¬π) (f g : Œ± ‚Üí ‚Ñù) :
    ‚Äñf * g‚Äñ_[r] ‚â§ ‚Äñf‚Äñ_[p] * ‚Äñg‚Äñ_[q] :=
  by
  have hr : r ‚â† 0 := by
    rintro rfl
    simpa [hp] using hpqr
  have : |f * g| ^ (r : ‚Ñù) = |f| ^ (r : ‚Ñù) * |g| ^ (r : ‚Ñù) := by ext <;> simp [mul_rpow, abs_mul]
  rw [lpnorm_eq_L1norm_rpow, rpow_inv_le_iff_of_pos, this, L1norm_hMul_of_nonneg,
    mul_rpow lpnorm_nonneg lpnorm_nonneg, lpnorm_rpow', lpnorm_rpow', ‚Üê ENNReal.coe_div, ‚Üê
    ENNReal.coe_div]
  refine' l2inner_le_lpnorm_hMul_lpnorm ‚ü®_, _‚ü© _ _
  ¬∑ norm_cast
    rw [div_eq_mul_inv, ‚Üê hpqr, mul_add, mul_inv_cancel hp]
    exact lt_add_of_pos_right _ (by positivity)
  ¬∑ norm_cast
    simp [div_eq_mul_inv, hpqr, ‚Üê mul_add, hr]
  any_goals intro a; dsimp
  all_goals positivity

/-- H√∂lder's inequality, finitary case. -/
theorem lpnorm_prod_le {s : Finset Œπ} (hs : s.Nonempty) {p : Œπ ‚Üí ‚Ñù‚â•0} (hp : ‚àÄ i, p i ‚â† 0) (q : ‚Ñù‚â•0)
    (hpq : ‚àë i in s, (p i)‚Åª¬π = q‚Åª¬π) (f : Œπ ‚Üí Œ± ‚Üí ‚Ñù) : ‚Äñ‚àè i in s, f i‚Äñ_[q] ‚â§ ‚àè i in s, ‚Äñf i‚Äñ_[p i] :=
  by
  induction' s using Finset.cons_induction with i s hi ih generalizing q
  ¬∑ cases not_nonempty_empty hs
  obtain rfl | hs := s.eq_empty_or_nonempty
  ¬∑ simp only [sum_cons, sum_empty, add_zero, inv_inj] at hpq 
    simp [‚Üê hpq]
  simp_rw [prod_cons]
  rw [sum_cons, ‚Üê inv_inv (‚àë _ in _, _ : ‚Ñù‚â•0)] at hpq 
  refine'
    (lpnorm_hMul_le (hp _) (inv_ne_zero (sum_pos (fun _ _ => _) hs).ne') _ hpq _ _).trans
      (mul_le_mul_of_nonneg_left (ih hs _ (inv_inv _).symm) lpnorm_nonneg)
  exact pos_iff_ne_zero.2 (inv_ne_zero <| hp _)

end lpnorm

/-! ### Indicator -/


section indicate

variable {Œ± Œ≤ : Type _} [IsROrC Œ≤] [Fintype Œ±] [DecidableEq Œ±] {s : Finset Œ±} {p : ‚Ñù‚â•0}

theorem lpnorm_rpow_indicate (hp : p ‚â† 0) (s : Finset Œ±) : ‚Äñùü≠_[Œ≤] s‚Äñ_[p] ^ (p : ‚Ñù) = s.card :=
  by
  have : ‚àÄ x, (ite (x ‚àà s) 1 0 : ‚Ñù) ^ (p : ‚Ñù) = ite (x ‚àà s) (1 ^ (p : ‚Ñù)) (0 ^ (p : ‚Ñù)) := fun x =>
    by split_ifs <;> simp
  simp [lpnorm_rpow_eq_sum, hp, indicate_apply, apply_ite Norm.norm, -sum_const, card_eq_sum_ones,
    sum_boole, this, zero_rpow, filter_mem_eq_inter]

theorem lpnorm_indicate (hp : p ‚â† 0) (s : Finset Œ±) : ‚Äñùü≠_[Œ≤] s‚Äñ_[p] = s.card ^ (p‚Åª¬π : ‚Ñù) := by
  refine' (eq_rpow_inv _ _ _).2 (lpnorm_rpow_indicate _ _) <;> positivity

theorem lpnorm_pow_indicate {p : ‚Ñï} (hp : p ‚â† 0) (s : Finset Œ±) :
    ‚Äñùü≠_[Œ≤] s‚Äñ_[p] ^ (p : ‚Ñù) = s.card := by
  simpa using lpnorm_rpow_indicate (Nat.cast_ne_zero.2 hp) s

theorem L2norm_sq_indicate (s : Finset Œ±) : ‚Äñùü≠_[Œ≤] s‚Äñ_[2] ^ 2 = s.card := by
  simpa using lpnorm_pow_indicate two_ne_zero s

theorem L2norm_indicate (s : Finset Œ±) : ‚Äñùü≠_[Œ≤] s‚Äñ_[2] = Real.sqrt s.card := by
  rw [eq_comm, sqrt_eq_iff_sq_eq, L2norm_sq_indicate] <;> positivity

@[simp]
theorem L1norm_indicate (s : Finset Œ±) : ‚Äñùü≠_[Œ≤] s‚Äñ_[1] = s.card := by
  simpa using lpnorm_pow_indicate one_ne_zero s

end indicate

section mu

variable {Œ± Œ≤ : Type _} [IsROrC Œ≤] [Fintype Œ±] [DecidableEq Œ±] {s : Finset Œ±} {p : ‚Ñù‚â•0}

theorem lpnorm_mu (hp : 1 ‚â§ p) (hs : s.Nonempty) : ‚ÄñŒº_[Œ≤] s‚Äñ_[p] = s.card ^ (p‚Åª¬π - 1 : ‚Ñù) := by
  rw [mu, lpnorm_smul (ENNReal.one_le_coe_iff.2 hp) (s.card‚Åª¬π : Œ≤) (ùü≠_[Œ≤] s), lpnorm_indicate,
      norm_inv, IsROrC.norm_natCast, inv_mul_eq_div, ‚Üê rpow_sub_one] <;>
    positivity

theorem lpnorm_mu_le (hp : 1 ‚â§ p) : ‚ÄñŒº_[Œ≤] s‚Äñ_[p] ‚â§ s.card ^ (p‚Åª¬π - 1 : ‚Ñù) :=
  by
  obtain rfl | hs := s.eq_empty_or_nonempty
  ¬∑ simp
    positivity
  ¬∑ exact (lpnorm_mu hp hs).le

theorem L1norm_mu (hs : s.Nonempty) : ‚ÄñŒº_[Œ≤] s‚Äñ_[1] = 1 := by simpa using lpnorm_mu le_rfl hs

theorem L1norm_mu_le_one : ‚ÄñŒº_[Œ≤] s‚Äñ_[1] ‚â§ 1 := by simpa using lpnorm_mu_le le_rfl

end mu

