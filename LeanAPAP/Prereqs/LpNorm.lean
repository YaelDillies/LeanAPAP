import LeanAPAP.Mathlib.Algebra.Order.LatticeGroup
import LeanAPAP.Mathlib.Analysis.InnerProductSpace.PiL2
import LeanAPAP.Mathlib.Analysis.Normed.Group.Basic
import LeanAPAP.Mathlib.Analysis.NormedSpace.PiLp
import LeanAPAP.Mathlib.Analysis.NormedSpace.Ray
import LeanAPAP.Mathlib.Analysis.SpecialFunctions.Pow.Real
import LeanAPAP.Mathlib.Data.Real.Basic
import LeanAPAP.Mathlib.Data.Real.ENNReal
import LeanAPAP.Mathlib.Data.Real.NNReal
import LeanAPAP.Mathlib.Order.ConditionallyCompleteLattice.Finset
import LeanAPAP.Mathlib.Tactic.Binop
import LeanAPAP.Mathlib.Tactic.Positivity
import LeanAPAP.Prereqs.Indicator

/-!
# Lp norms
-/

open Finset Function Real
open scoped BigOps ComplexConjugate ENNReal NNReal

variable {Œπ ùïú : Type*} [Fintype Œπ]

/-! ### Lp norm -/

section NormedAddCommGroup
variable {Œ± : Œπ ‚Üí Type*} [‚àÄ i, NormedAddCommGroup (Œ± i)] {p q : ‚Ñù‚â•0‚àû} {f g h : ‚àÄ i, Œ± i}

/-- The Lp norm of a function. -/
noncomputable def lpNorm (p : ‚Ñù‚â•0‚àû) (f : ‚àÄ i, Œ± i) : ‚Ñù :=‚Äñ(WithLp.equiv p _).symm f‚Äñ

notation "‚Äñ" f "‚Äñ_[" p "]" => lpNorm p f

lemma lpNorm_eq_sum' (hp : p.toReal ‚â† 0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p] = (‚àë i, ‚Äñf i‚Äñ ^ p.toReal) ^ p.toReal‚Åª¬π := by
  rw [‚Üêone_div];  exact PiLp.norm_eq_sum (hp.lt_of_le' ENNReal.toReal_nonneg) _

lemma lpNorm_eq_sum'' {p : ‚Ñù} (hp : 0 < p) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p.toNNReal] = (‚àë i, ‚Äñf i‚Äñ ^ p) ^ p‚Åª¬π := by rw [lpNorm_eq_sum'] <;>  simp [hp.ne', hp.le]

lemma lpNorm_eq_sum {p : ‚Ñù‚â•0} (hp : p ‚â† 0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p] = (‚àë i, ‚Äñf i‚Äñ ^ (p : ‚Ñù)) ^ (p‚Åª¬π : ‚Ñù) := lpNorm_eq_sum' (by simpa using hp) _

lemma lpNorm_rpow_eq_sum {p : ‚Ñù‚â•0} (hp : p ‚â† 0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p] ^ (p : ‚Ñù) = ‚àë i, ‚Äñf i‚Äñ ^ (p : ‚Ñù) := by
  rw [lpNorm_eq_sum hp, rpow_inv_rpow (sum_nonneg Œª i _ ‚Ü¶ ?_)] <;> positivity

lemma lpNorm_pow_eq_sum {p : ‚Ñï} (hp : p ‚â† 0) (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[p] ^ p = ‚àë i, ‚Äñf i‚Äñ ^ p := by
  simpa using lpNorm_rpow_eq_sum (Nat.cast_ne_zero.2 hp) f

lemma L2norm_sq_eq_sum (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[2] ^ 2 = ‚àë i, ‚Äñf i‚Äñ ^ 2 := by
  simpa using lpNorm_pow_eq_sum two_ne_zero _

lemma L2norm_eq_sum (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[2] = sqrt (‚àë i, ‚Äñf i‚Äñ ^ 2) := by
  simpa [sqrt_eq_rpow] using lpNorm_eq_sum two_ne_zero _

lemma L1norm_eq_sum (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[1] = ‚àë i, ‚Äñf i‚Äñ := by simp [lpNorm_eq_sum']

lemma L0norm_eq_card (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[0] = {i | f i ‚â† 0}.toFinite.toFinset.card :=
  PiLp.norm_eq_card _

lemma Linftynorm_eq_csupr (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[‚àû] = ‚®Ü i, ‚Äñf i‚Äñ := PiLp.norm_eq_ciSup _

@[simp] lemma lpNorm_zero : ‚Äñ(0 : ‚àÄ i, Œ± i)‚Äñ_[p] = 0 := by
  obtain p | p := p; swap
  obtain rfl | hp := @eq_zero_or_pos _ _ p
  all_goals simp [Linftynorm_eq_csupr, L0norm_eq_card, lpNorm_eq_sum, *, ne_of_gt]

@[simp] lemma lpNorm_norm (p : ‚Ñù‚â•0‚àû) (f : ‚àÄ i, Œ± i) : ‚ÄñŒª i ‚Ü¶ ‚Äñf i‚Äñ‚Äñ_[p] = ‚Äñf‚Äñ_[p] := by
  obtain p | p := p; swap
  obtain rfl | hp := @eq_zero_or_pos _ _ p
  all_goals simp [Linftynorm_eq_csupr, L0norm_eq_card, lpNorm_eq_sum, *, ne_of_gt]

@[simp] lemma lpNorm_neg (f : ‚àÄ i, Œ± i) : ‚Äñ-f‚Äñ_[p] = ‚Äñf‚Äñ_[p] := by simp [‚ÜêlpNorm_norm _ (-f)]

lemma lpNorm_sub_comm (f g : ‚àÄ i, Œ± i) : ‚Äñf - g‚Äñ_[p] = ‚Äñg - f‚Äñ_[p] := by
  simp [‚ÜêlpNorm_neg (f - g)]

@[simp] lemma lpNorm_nonneg : 0 ‚â§ ‚Äñf‚Äñ_[p] := by
  obtain p | p := p
  ¬∑ simp only [Linftynorm_eq_csupr, ENNReal.none_eq_top]
    exact Real.iSup_nonneg Œª i ‚Ü¶ norm_nonneg _
  obtain rfl | hp := eq_or_ne p 0
  ¬∑ simp only [L0norm_eq_card, ENNReal.some_eq_coe, ENNReal.coe_zero]
    exact Nat.cast_nonneg _
  ¬∑ simp only [lpNorm_eq_sum hp, ENNReal.some_eq_coe]
    exact rpow_nonneg (sum_nonneg Œª i _ ‚Ü¶ rpow_nonneg $ norm_nonneg _)

@[simp] lemma lpNorm_eq_zero : ‚Äñf‚Äñ_[p] = 0 ‚Üî f = 0 := by
  obtain p | p := p
  ¬∑ cases isEmpty_or_nonempty Œπ <;>
      simp [Linftynorm_eq_csupr, ENNReal.none_eq_top, ‚Üêsup'_univ_eq_csupr, le_antisymm_iff,
        Function.funext_iff]
  obtain rfl | hp := eq_or_ne p 0
  ¬∑ simp [L0norm_eq_card, eq_empty_iff_forall_not_mem, Function.funext_iff]
  ¬∑ rw [‚Üêrpow_eq_zero lpNorm_nonneg (NNReal.coe_ne_zero.2 hp)]
    simp [lpNorm_rpow_eq_sum hp, sum_eq_zero_iff_of_nonneg, rpow_nonneg, Function.funext_iff,
      rpow_eq_zero _ (NNReal.coe_ne_zero.2 hp)]

@[simp] lemma lpNorm_pos : 0 < ‚Äñf‚Äñ_[p] ‚Üî f ‚â† 0 := lpNorm_nonneg.gt_iff_ne.trans lpNorm_eq_zero.not

lemma lpNorm_mono_right (hpq : p ‚â§ q) (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[p] ‚â§ ‚Äñf‚Äñ_[q] := sorry

section one_le

lemma lpNorm_add_le (hp : 1 ‚â§ p) (f g : ‚àÄ i, Œ± i) : ‚Äñf + g‚Äñ_[p] ‚â§ ‚Äñf‚Äñ_[p] + ‚Äñg‚Äñ_[p] :=
  haveI := Fact.mk hp
  norm_add_le _ _

lemma lpNorm_sub_le (hp : 1 ‚â§ p) (f g : ‚àÄ i, Œ± i) : ‚Äñf - g‚Äñ_[p] ‚â§ ‚Äñf‚Äñ_[p] + ‚Äñg‚Äñ_[p] :=
  haveI := Fact.mk hp
  norm_sub_le _ _

lemma lpNorm_le_lpNorm_add_lpNorm_sub' (hp : 1 ‚â§ p) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p] ‚â§ ‚Äñg‚Äñ_[p] + ‚Äñf - g‚Äñ_[p] :=
  haveI := Fact.mk hp
  norm_le_norm_add_norm_sub' _ _

lemma lpNorm_le_lpNorm_add_lpNorm_sub (hp : 1 ‚â§ p) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p] ‚â§ ‚Äñg‚Äñ_[p] + ‚Äñg - f‚Äñ_[p] :=
  haveI := Fact.mk hp
  norm_le_norm_add_norm_sub _ _

lemma lpNorm_le_add_lpNorm_add (hp : 1 ‚â§ p) (f g : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[p] ‚â§ ‚Äñf + g‚Äñ_[p] + ‚Äñg‚Äñ_[p] :=
  haveI := Fact.mk hp
  norm_le_add_norm_add _ _

lemma lpNorm_sub_le_lpNorm_sub_add_lpNorm_sub (hp : 1 ‚â§ p) :
    ‚Äñf - h‚Äñ_[p] ‚â§ ‚Äñf - g‚Äñ_[p] + ‚Äñg - h‚Äñ_[p] :=
  haveI := Fact.mk hp
  norm_sub_le_norm_sub_add_norm_sub

variable [NormedField ùïú] [‚àÄ i, NormedSpace ùïú (Œ± i)]

-- TODO: `p ‚â† 0` is enough
lemma lpNorm_smul (hp : 1 ‚â§ p) (c : ùïú) (f : ‚àÄ i, Œ± i) : ‚Äñc ‚Ä¢ f‚Äñ_[p] = ‚Äñc‚Äñ * ‚Äñf‚Äñ_[p] :=
  haveI := Fact.mk hp
  norm_smul c _

-- TODO: Why is it so hard to use `lpNorm_smul` directly? `function.has_smul` seems to have a hard
-- time unifying `pi.has_smul`
lemma lpNorm_smul' {Œ± : Type*} [NormedAddCommGroup Œ±] [NormedSpace ùïú Œ±] (hp : 1 ‚â§ p) (c : ùïú)
    (f : Œπ ‚Üí Œ±) : ‚Äñc ‚Ä¢ f‚Äñ_[p] = ‚Äñc‚Äñ * ‚Äñf‚Äñ_[p] :=
  lpNorm_smul hp _ _

variable [‚àÄ i, NormedSpace ‚Ñù (Œ± i)]

lemma lpNorm_nsmul (hp : 1 ‚â§ p) (n : ‚Ñï) (f : ‚àÄ i, Œ± i) : ‚Äñn ‚Ä¢ f‚Äñ_[p] = n ‚Ä¢ ‚Äñf‚Äñ_[p] :=
  haveI := Fact.mk hp
  norm_nsmul _ _

-- TODO: Why is it so hard to use `lpNorm_nsmul` directly? `function.has_smul` seems to have a hard
-- time unifying `pi.has_smul`
lemma lpNorm_nsmul' {Œ± : Type*} [NormedAddCommGroup Œ±] [NormedSpace ‚Ñù Œ±] (hp : 1 ‚â§ p) (n : ‚Ñï)
    (f : Œπ ‚Üí Œ±) : ‚Äñn ‚Ä¢ f‚Äñ_[p] = n ‚Ä¢ ‚Äñf‚Äñ_[p] :=
  lpNorm_nsmul hp _ _

end one_le

end NormedAddCommGroup

section Real
variable {p : ‚Ñù‚â•0} {f g : Œπ ‚Üí ‚Ñù}

@[simp] lemma lpNorm_one (hp : p ‚â† 0) : ‚Äñ(1 : Œπ ‚Üí ‚Ñù)‚Äñ_[p] = Fintype.card Œπ ^ (p‚Åª¬π : ‚Ñù) := by
  simp [lpNorm_eq_sum hp, card_univ]

lemma lpNorm_mono (hf : 0 ‚â§ f) (hfg : f ‚â§ g) : ‚Äñf‚Äñ_[p] ‚â§ ‚Äñg‚Äñ_[p] := by
  obtain rfl | hp := eq_or_ne p 0
  ¬∑ simp only [L0norm_eq_card, ENNReal.some_eq_coe, ENNReal.coe_zero, Nat.cast_le]
    exact
      card_mono
        (Set.Finite.toFinset_mono Œª i ‚Ü¶ mt Œª hi ‚Ü¶ ((hfg i).trans_eq hi).antisymm $ hf i)
  have hp' := hp
  rw [‚Üêpos_iff_ne_zero, ‚ÜêNNReal.coe_pos] at hp
  simp_rw [‚Üêrpow_le_rpow_iff lpNorm_nonneg lpNorm_nonneg hp, lpNorm_rpow_eq_sum hp',
    norm_of_nonneg (hf _), norm_of_nonneg (hf.trans hfg _)]
  exact sum_le_sum Œª i _ ‚Ü¶ rpow_le_rpow (hf _) (hfg _) hp.le

end Real

/-! #### Weighted Lp norm -/

section NormedAddCommGroup
variable {Œ± : Œπ ‚Üí Type*} [‚àÄ i, NormedAddCommGroup (Œ± i)] {p q : ‚Ñù‚â•0} {w : Œπ ‚Üí ‚Ñù‚â•0}
  {f g h : ‚àÄ i, Œ± i}

/-- The weighted Lp norm of a function. -/
noncomputable def wlpNorm (p : ‚Ñù‚â•0) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Ñù :=
  ‚ÄñŒª i ‚Ü¶ w i ^ (p‚Åª¬π : ‚Ñù) ‚Ä¢ ‚Äñf i‚Äñ‚Äñ_[p]

notation "‚Äñ" f "‚Äñ_[" p ", " w "]" => wlpNorm p w f

@[simp]
lemma wlpNorm_one_eq_lpNorm (p : ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[p, 1] = ‚Äñf‚Äñ_[p] := by
  simp [wlpNorm, L0norm_eq_card, lpNorm_eq_sum, *]

@[simp]
lemma wlpNorm_const_right (hp : 1 ‚â§ p) (w : ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, const _ w] = w ^ (p‚Åª¬π : ‚Ñù) * ‚Äñf‚Äñ_[p] := by
  simpa [wlpNorm, -norm_eq_abs, norm_of_nonneg, Pi.smul_def, NNReal.smul_def, rpow_nonneg] using
    lpNorm_smul (ENNReal.one_le_coe_iff.2 hp) (w ^ (p‚Åª¬π : ‚Ñù) : ‚Ñù) Œª i ‚Ü¶ ‚Äñf i‚Äñ

lemma wlpNorm_eq_sum (hp : p ‚â† 0) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] = (‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ ^ (p : ‚Ñù)) ^ (p‚Åª¬π : ‚Ñù) := by
  have : (p : ‚Ñù) ‚â† 0 := by positivity
  simp_rw [wlpNorm, lpNorm_eq_sum hp, NNReal.smul_def, norm_smul]
  simp only [NNReal.coe_rpow, norm_norm, Algebra.id.smul_eq_mul, mul_rpow, norm_nonneg,
    rpow_nonneg_of_nonneg, hp, NNReal.coe_nonneg, norm_of_nonneg, rpow_inv_rpow _ this]

lemma wlpNorm_eq_sum' {p : ‚Ñù} (hp : 0 < p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p.toNNReal, w] = (‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ ^ p) ^ p‚Åª¬π := by
  rw [wlpNorm_eq_sum] <;> simp [hp, hp.ne', hp.le]

lemma wlpNorm_rpow_eq_sum {p : ‚Ñù‚â•0} (hp : p ‚â† 0) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] ^ (p : ‚Ñù) = ‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ ^ (p : ‚Ñù) := by
  rw [wlpNorm_eq_sum hp, rpow_inv_rpow (sum_nonneg Œª i _ ‚Ü¶ ?_)]
  ¬∑ positivity
  ¬∑ sorry -- positivity

lemma wlpNorm_pow_eq_sum {p : ‚Ñï} (hp : p ‚â† 0) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] ^ p = ‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ ^ p := by
  simpa using wlpNorm_rpow_eq_sum (Nat.cast_ne_zero.2 hp) w f

lemma wL1norm_eq_sum (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[1, w] = ‚àë i, w i ‚Ä¢ ‚Äñf i‚Äñ := by
  simp [wlpNorm_eq_sum]

lemma wL0norm_eq_card (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[0, w] = {i | f i ‚â† 0}.toFinite.toFinset.card := by simp [wlpNorm, L0norm_eq_card]

@[simp]
lemma wlpNorm_zero (w : Œπ ‚Üí ‚Ñù‚â•0) : ‚Äñ(0 : ‚àÄ i, Œ± i)‚Äñ_[p, w] = 0 := by simp [wlpNorm, ‚ÜêPi.zero_def]

@[simp] lemma wlpNorm_norm (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚ÄñŒª i ‚Ü¶ ‚Äñf i‚Äñ‚Äñ_[p, w] = ‚Äñf‚Äñ_[p, w] := by
  obtain rfl | hp := @eq_zero_or_pos _ _ p <;> simp [wL0norm_eq_card, wlpNorm_eq_sum, *, ne_of_gt]

@[simp]lemma wlpNorm_neg (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Äñ-f‚Äñ_[p, w] = ‚Äñf‚Äñ_[p, w] := by
  simp [‚ÜêwlpNorm_norm _ (-f)]

lemma wlpNorm_sub_comm (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) : ‚Äñf - g‚Äñ_[p, w] = ‚Äñg - f‚Äñ_[p, w] := by
  simp [‚ÜêwlpNorm_neg _ (f - g)]

@[simp] lemma wlpNorm_nonneg : 0 ‚â§ ‚Äñf‚Äñ_[p, w] := lpNorm_nonneg

lemma wlpNorm_mono_right (hpq : p ‚â§ q) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) : ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñf‚Äñ_[q, w] :=
  sorry

section one_le

lemma wlpNorm_add_le (hp : 1 ‚â§ p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf + g‚Äñ_[p, w] ‚â§ ‚Äñf‚Äñ_[p, w] + ‚Äñg‚Äñ_[p, w] := by
  unfold wlpNorm
  refine'
    (lpNorm_add_le (by exact_mod_cast hp) _ _).trans'
      (lpNorm_mono (Œª i ‚Ü¶ by dsimp; sorry) Œª i ‚Ü¶ _) -- positivity
  dsimp
  rw [‚Üêsmul_add]
  exact smul_le_smul_of_nonneg (norm_add_le _ _) (zero_le _)

lemma wlpNorm_sub_le (hp : 1 ‚â§ p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf - g‚Äñ_[p, w] ‚â§ ‚Äñf‚Äñ_[p, w] + ‚Äñg‚Äñ_[p, w] := by
  simpa [sub_eq_add_neg] using wlpNorm_add_le hp w f (-g)

lemma wlpNorm_le_wlpNorm_add_wlpNorm_sub' (hp : 1 ‚â§ p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñg‚Äñ_[p, w] + ‚Äñf - g‚Äñ_[p, w] := by simpa using wlpNorm_add_le hp w g (f - g)

lemma wlpNorm_le_wlpNorm_add_wlpNorm_sub (hp : 1 ‚â§ p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñg‚Äñ_[p, w] + ‚Äñg - f‚Äñ_[p, w] := by
  rw [wlpNorm_sub_comm]; exact wlpNorm_le_wlpNorm_add_wlpNorm_sub' hp _ _ _

lemma wlpNorm_le_add_wlpNorm_add (hp : 1 ‚â§ p) (w : Œπ ‚Üí ‚Ñù‚â•0) (f g : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñf + g‚Äñ_[p, w] + ‚Äñg‚Äñ_[p, w] := by simpa using wlpNorm_add_le hp w (f + g) (-g)

lemma wlpNorm_sub_le_lpNorm_sub_add_lpNorm_sub (hp : 1 ‚â§ p) :
    ‚Äñf - h‚Äñ_[p, w] ‚â§ ‚Äñf - g‚Äñ_[p, w] + ‚Äñg - h‚Äñ_[p, w] := by
  simpa using wlpNorm_add_le hp w (f - g) (g - h)

variable [NormedField ùïú] [‚àÄ i, NormedSpace ùïú (Œ± i)]

-- TODO: `p ‚â† 0` is enough
lemma wlpNorm_smul (hp : 1 ‚â§ p) (c : ùïú) (f : ‚àÄ i, Œ± i) : ‚Äñc ‚Ä¢ f‚Äñ_[p, w] = ‚Äñc‚Äñ * ‚Äñf‚Äñ_[p, w] := by
  rw [wlpNorm, wlpNorm]
  have : (1 : ‚Ñù‚â•0‚àû) ‚â§ p := by exact_mod_cast hp
  have := lpNorm_smul this ‚Äñc‚Äñ Œª i ‚Ü¶ w i ^ (p‚Åª¬π : ‚Ñù) ‚Ä¢ ‚Äñf i‚Äñ
  rw [norm_norm] at this
  rw [‚Üêthis]
  congr with i : 1
  simp only [Pi.smul_apply, Algebra.id.smul_eq_mul, Algebra.mul_smul_comm, norm_smul]

@[simp]
lemma wlpNorm_smul_right (hp : p ‚â† 0) (c : ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñf‚Äñ_[p, c ‚Ä¢ w] = c ^ (p‚Åª¬π : ‚Ñù) * ‚Äñf‚Äñ_[p, w] := by
  simp only [wlpNorm_eq_sum hp, NNReal.smul_def, Pi.smul_apply, Algebra.id.smul_eq_mul,
    NNReal.coe_mul, mul_assoc, ‚Üêmul_sum]
  exact mul_rpow (by positivity) (sum_nonneg Œª _ _ ‚Ü¶ by positivity)

-- TODO: Why is it so hard to use `wlpNorm_smul` directly? `function.has_smul` seems to have a hard
-- time unifying `pi.has_smul`
lemma wlpNorm_smul' {Œ± : Type*} [NormedAddCommGroup Œ±] [NormedSpace ùïú Œ±] (hp : 1 ‚â§ p) (c : ùïú)
    (f : Œπ ‚Üí Œ±) : ‚Äñc ‚Ä¢ f‚Äñ_[p, w] = ‚Äñc‚Äñ * ‚Äñf‚Äñ_[p, w] :=
  wlpNorm_smul hp _ _

variable [‚àÄ i, NormedSpace ‚Ñù (Œ± i)]

lemma wlpNorm_nsmul (hp : 1 ‚â§ p) (n : ‚Ñï) (w : Œπ ‚Üí ‚Ñù‚â•0) (f : ‚àÄ i, Œ± i) :
    ‚Äñn ‚Ä¢ f‚Äñ_[p, w] = n ‚Ä¢ ‚Äñf‚Äñ_[p, w] := by
  rw [nsmul_eq_smul_cast ‚Ñù, wlpNorm_smul hp, IsROrC.norm_natCast, nsmul_eq_mul]

-- TODO: Why is it so hard to use `wlpNorm_nsmul` directly? `function.has_smul` seems to have a hard
-- time unifying `pi.has_smul`
lemma wlpNorm_nsmul' {Œ± : Type*} [NormedAddCommGroup Œ±] [NormedSpace ‚Ñù Œ±] (hp : 1 ‚â§ p) (n : ‚Ñï)
    (w : Œπ ‚Üí ‚Ñù‚â•0) (f : Œπ ‚Üí Œ±) : ‚Äñn ‚Ä¢ f‚Äñ_[p, w] = n ‚Ä¢ ‚Äñf‚Äñ_[p, w] :=
  wlpNorm_nsmul hp _ _ _

end one_le

end NormedAddCommGroup

section NormedAddCommGroup
variable {Œ± : Type*} [NormedAddCommGroup Œ±] {p : ‚Ñù‚â•0}

@[simp]
lemma lpNorm_const (hp : p ‚â† 0) (a : Œ±) : ‚Äñconst Œπ a‚Äñ_[p] = ‚Üë(Fintype.card Œπ) ^ (p‚Åª¬π : ‚Ñù) * ‚Äña‚Äñ := by
  simp only [lpNorm_eq_sum hp, card_univ, mul_rpow, norm_nonneg, rpow_nonneg,
    NNReal.coe_ne_zero.2 hp, rpow_rpow_inv, const_apply, sum_const, nsmul_eq_mul, Nat.cast_nonneg,
    Ne.def, not_false_iff]

end NormedAddCommGroup

section Real
variable {p : ‚Ñù‚â•0} {w : Œπ ‚Üí ‚Ñù‚â•0} {f g : Œπ ‚Üí ‚Ñù}

@[simp]
lemma wlpNorm_one (hp : p ‚â† 0) (w : Œπ ‚Üí ‚Ñù‚â•0) : ‚Äñ(1 : Œπ ‚Üí ‚Ñù)‚Äñ_[p, w] = (‚àë i, ‚Üë(w i)) ^ (p‚Åª¬π : ‚Ñù) := by
  simp [wlpNorm_eq_sum hp, NNReal.smul_def]

lemma wlpNorm_mono (hf : 0 ‚â§ f) (hfg : f ‚â§ g) : ‚Äñf‚Äñ_[p, w] ‚â§ ‚Äñg‚Äñ_[p, w] :=
  lpNorm_mono (Œª i ‚Ü¶ by dsimp; sorry) Œª i ‚Ü¶ -- positivity
    smul_le_smul_of_nonneg
        (by rw [norm_of_nonneg (hf _), norm_of_nonneg (hf.trans hfg _)]; exact hfg _) $
      by positivity

end Real

/-! #### Inner product -/

section CommSemiring
variable [CommSemiring ùïú] [StarRing ùïú] {Œ≥ : Type*} [DistribSMul Œ≥ ùïú]

/-- Inner product giving rise to the L2 norm. -/
def l2inner (f g : Œπ ‚Üí ùïú) : ùïú := ‚àë i, conj (f i) * g i

notation "‚ü™" f ", " g "‚ü´_[" ùïú "]" => @l2inner _ ùïú _ _ _ f g

lemma l2inner_eq_sum (f g : Œπ ‚Üí ùïú) : ‚ü™f, g‚ü´_[ùïú] = ‚àë i, conj (f i) * g i := rfl

@[simp] lemma conj_l2inner (f g : Œπ ‚Üí ùïú) : conj ‚ü™f, g‚ü´_[ùïú] = ‚ü™g, f‚ü´_[ùïú] := by
  simp [l2inner_eq_sum, map_sum, mul_comm]

@[simp] lemma l2inner_zero_left (g : Œπ ‚Üí ùïú) : ‚ü™0, g‚ü´_[ùïú] = 0 := by simp [l2inner_eq_sum]
@[simp] lemma l2inner_zero_right (f : Œπ ‚Üí ùïú) : ‚ü™f, 0‚ü´_[ùïú] = 0 := by simp [l2inner_eq_sum]
@[simp] lemma l2inner_const_left (a : ùïú) (f : Œπ ‚Üí ùïú) : ‚ü™const _ a, f‚ü´_[ùïú] = conj a * ‚àë x, f x := by
  simp only [l2inner_eq_sum, const_apply, mul_sum]

@[simp]
lemma l2inner_const_right (f : Œπ ‚Üí ùïú) (a : ùïú) : ‚ü™f, const _ a‚ü´_[ùïú] = (‚àë x, conj (f x)) * a := by
  simp only [l2inner_eq_sum, const_apply, sum_mul]

lemma l2inner_add_left (f‚ÇÅ f‚ÇÇ g : Œπ ‚Üí ùïú) : ‚ü™f‚ÇÅ + f‚ÇÇ, g‚ü´_[ùïú] = ‚ü™f‚ÇÅ, g‚ü´_[ùïú] + ‚ü™f‚ÇÇ, g‚ü´_[ùïú] := by
  simp_rw [l2inner_eq_sum, Pi.add_apply, map_add, add_mul, sum_add_distrib]

lemma l2inner_add_right (f g‚ÇÅ g‚ÇÇ : Œπ ‚Üí ùïú) : ‚ü™f, g‚ÇÅ + g‚ÇÇ‚ü´_[ùïú] = ‚ü™f, g‚ÇÅ‚ü´_[ùïú] + ‚ü™f, g‚ÇÇ‚ü´_[ùïú] := by
  simp_rw [l2inner_eq_sum, Pi.add_apply, mul_add, sum_add_distrib]

lemma l2inner_smul_left [Star Œ≥] [StarModule Œ≥ ùïú] [IsScalarTower Œ≥ ùïú ùïú] (c : Œ≥) (f g : Œπ ‚Üí ùïú) :
    ‚ü™c ‚Ä¢ f, g‚ü´_[ùïú] = star c ‚Ä¢ ‚ü™f, g‚ü´_[ùïú] := by
  simp only [l2inner_eq_sum, Pi.smul_apply, smul_mul_assoc, smul_sum, starRingEnd_apply, star_smul]

lemma l2inner_smul_right [Star Œ≥] [StarModule Œ≥ ùïú] [SMulCommClass Œ≥ ùïú ùïú] (c : Œ≥) (f g : Œπ ‚Üí ùïú) :
    ‚ü™f, c ‚Ä¢ g‚ü´_[ùïú] = c ‚Ä¢ ‚ü™f, g‚ü´_[ùïú] := by
  simp only [l2inner_eq_sum, Pi.smul_apply, mul_smul_comm, smul_sum, starRingEnd_apply, star_smul]

lemma smul_l2inner_left [InvolutiveStar Œ≥] [StarModule Œ≥ ùïú] [IsScalarTower Œ≥ ùïú ùïú] (c : Œ≥)
    (f g : Œπ ‚Üí ùïú) : c ‚Ä¢ ‚ü™f, g‚ü´_[ùïú] = ‚ü™star c ‚Ä¢ f, g‚ü´_[ùïú] := by rw [l2inner_smul_left, star_star]

end CommSemiring

section CommRing
variable [CommRing ùïú] [StarRing ùïú]

lemma l2inner_neg_left (f g : Œπ ‚Üí ùïú) : ‚ü™-f, g‚ü´_[ùïú] = -‚ü™f, g‚ü´_[ùïú] := by
  simp [l2inner_eq_sum, sum_add_distrib]

lemma l2inner_neg_right (f g : Œπ ‚Üí ùïú) : ‚ü™f, -g‚ü´_[ùïú] = -‚ü™f, g‚ü´_[ùïú] := by
  simp [l2inner_eq_sum, sum_add_distrib]

lemma l2inner_sub_left (f‚ÇÅ f‚ÇÇ g : Œπ ‚Üí ùïú) : ‚ü™f‚ÇÅ - f‚ÇÇ, g‚ü´_[ùïú] = ‚ü™f‚ÇÅ, g‚ü´_[ùïú] - ‚ü™f‚ÇÇ, g‚ü´_[ùïú] := by
  simp_rw [sub_eq_add_neg, l2inner_add_left, l2inner_neg_left]

lemma l2inner_sub_right (f g‚ÇÅ g‚ÇÇ : Œπ ‚Üí ùïú) : ‚ü™f, g‚ÇÅ - g‚ÇÇ‚ü´_[ùïú] = ‚ü™f, g‚ÇÅ‚ü´_[ùïú] - ‚ü™f, g‚ÇÇ‚ü´_[ùïú] := by
  simp_rw [sub_eq_add_neg, l2inner_add_right, l2inner_neg_right]

end CommRing

section OrderedCommSemiring
variable [OrderedCommSemiring ùïú] [StarOrderedRing ùïú] {f g : Œπ ‚Üí ùïú}

lemma l2inner_nonneg (hf : 0 ‚â§ f) (hg : 0 ‚â§ g) : 0 ‚â§ ‚ü™f, g‚ü´_[ùïú] :=
  sum_nonneg Œª _ _ ‚Ü¶ mul_nonneg (star_nonneg.2 $ hf _) $ hg _

end OrderedCommSemiring

section LinearOrderedCommRing
variable [LinearOrderedCommRing ùïú] [StarOrderedRing ùïú] [TrivialStar ùïú] {f g : Œπ ‚Üí ùïú}

--TODO: Can we remove the `has_trivial_star` assumption?
lemma abs_l2inner_le_l2inner_abs : |‚ü™f, g‚ü´_[ùïú]| ‚â§ ‚ü™|f|, |g|‚ü´_[ùïú] :=
  (abs_sum_le_sum_abs _ _).trans_eq $
    sum_congr rfl Œª i _ ‚Ü¶ by simp only [abs_mul, conj_trivial, Pi.abs_apply]

end LinearOrderedCommRing

section IsROrC
variable {Œ∫ : Type*} [IsROrC ùïú] {f : Œπ ‚Üí ùïú}

lemma l2inner_eq_inner (f g : Œπ ‚Üí ùïú) :
    ‚ü™f, g‚ü´_[ùïú] = inner ((WithLp.equiv 2 _).symm f) ((WithLp.equiv 2 _).symm g) := rfl

lemma inner_eq_l2inner (f g : PiLp 2 Œª _i : Œπ ‚Ü¶ ùïú) :
    inner f g = ‚ü™WithLp.equiv 2 _ f, WithLp.equiv 2 _ g‚ü´_[ùïú] := rfl

@[simp] lemma l2inner_self (f : Œπ ‚Üí ùïú) : ‚ü™f, f‚ü´_[ùïú] = ‚Äñf‚Äñ_[2] ^ 2 := by
  simp_rw [‚ÜêalgebraMap.coe_pow, L2norm_sq_eq_sum, l2inner_eq_sum, algebraMap.coe_sum,
    IsROrC.conj_mul, IsROrC.normSq_eq_def']

lemma l2inner_self_of_norm_eq_one (hf : ‚àÄ x, ‚Äñf x‚Äñ = 1) : ‚ü™f, f‚ü´_[ùïú] = Fintype.card Œπ := by
  simp [-l2inner_self, l2inner_eq_sum, IsROrC.conj_mul, IsROrC.normSq_eq_def', hf, card_univ]

lemma linearIndependent_of_ne_zero_of_l2inner_eq_zero {v : Œ∫ ‚Üí Œπ ‚Üí ùïú} (hz : ‚àÄ k, v k ‚â† 0)
    (ho : Pairwise Œª k l ‚Ü¶ ‚ü™v k, v l‚ü´_[ùïú] = 0) : LinearIndependent ùïú v := by
  simp_rw [l2inner_eq_inner] at ho
  have := linearIndependent_of_ne_zero_of_inner_eq_zero ?_ ho
  exacts [this, hz]

end IsROrC

section lpNorm
variable {Œ± Œ≤ : Type*} [AddCommGroup Œ±] [Fintype Œ±] {p : ‚Ñù‚â•0‚àû}

@[simp]
lemma lpNorm_translate [NormedAddCommGroup Œ≤] (a : Œ±) (f : Œ± ‚Üí Œ≤) : ‚ÄñœÑ a f‚Äñ_[p] = ‚Äñf‚Äñ_[p] := by
  obtain p | p := p
  ¬∑ simp only [Linftynorm_eq_csupr, ENNReal.none_eq_top, translate_apply]
    exact (Equiv.subRight _).iSup_congr Œª _ ‚Ü¶ rfl
  obtain rfl | hp := eq_or_ne p 0
  ¬∑ simp only [L0norm_eq_card, translate_apply, Ne.def, ENNReal.some_eq_coe, ENNReal.coe_zero,
      Nat.cast_inj]
    exact
      card_congr (Œª x _ ‚Ü¶ x - a) (Œª x hx ‚Ü¶ by simpa using hx)
        (Œª x y _ _ h ‚Ü¶ by simpa using h) Œª x hx ‚Ü¶ ‚ü®x + a, by simpa using hx‚ü©
  ¬∑ simp only [lpNorm_eq_sum hp, ENNReal.some_eq_coe, translate_apply]
    congr 1
    exact Fintype.sum_equiv (Equiv.subRight _) _ _ Œª _ ‚Ü¶ rfl

@[simp] lemma lpNorm_conj [IsROrC Œ≤] (f : Œ± ‚Üí Œ≤) : ‚Äñconj f‚Äñ_[p] = ‚Äñf‚Äñ_[p] := by
  obtain p | p := p; swap; obtain rfl | hp := eq_or_ne p 0
  all_goals
    simp only [Linftynorm_eq_csupr, lpNorm_eq_sum, L0norm_eq_card, ENNReal.some_eq_coe,
      ENNReal.none_eq_top, ENNReal.coe_zero, Pi.conj_apply, IsROrC.norm_conj, map_ne_zero, *]
  ¬∑ simp only [lpNorm_eq_sum hp, Pi.conj_apply, IsROrC.norm_conj]

@[simp] lemma lpNorm_conjneg [IsROrC Œ≤] (f : Œ± ‚Üí Œ≤) : ‚Äñconjneg f‚Äñ_[p] = ‚Äñf‚Äñ_[p] := by
  simp only [conjneg, lpNorm_conj]
  obtain p | p := p
  ¬∑ simp only [Linftynorm_eq_csupr, ENNReal.none_eq_top, conjneg, IsROrC.norm_conj]
    exact (Equiv.neg _).iSup_congr Œª _ ‚Ü¶ rfl
  obtain rfl | hp := eq_or_ne p 0
  ¬∑ simp only [L0norm_eq_card, Ne.def, ENNReal.some_eq_coe, ENNReal.coe_zero, Nat.cast_inj]
    exact
      card_congr (Œª x _ ‚Ü¶ -x) (Œª x hx ‚Ü¶ by simpa using hx) (Œª x y _ _ ‚Ü¶ neg_inj.1)
        Œª x hx ‚Ü¶ ‚ü®-x, by simpa using hx‚ü©
  ¬∑ simp only [lpNorm_eq_sum hp, ENNReal.some_eq_coe]
    congr 1
    exact Fintype.sum_equiv (Equiv.neg _) _ _ Œª _ ‚Ü¶ rfl

end lpNorm

section IsROrC
variable {Œ± Œ≤ : Type*} [Fintype Œ±]

lemma L1norm_mul [IsROrC Œ≤] (f g : Œ± ‚Üí Œ≤) : ‚Äñf * g‚Äñ_[1] = ‚ü™Œª i ‚Ü¶ ‚Äñf i‚Äñ, Œª i ‚Ü¶ ‚Äñg i‚Äñ‚ü´_[‚Ñù] := by simp [l2inner_eq_sum, L1norm_eq_sum]

end IsROrC

section wlpNorm
variable {Œ± Œ≤ : Type*} [AddCommGroup Œ±] [Fintype Œ±] {p : ‚Ñù‚â•0} {w : Œ± ‚Üí ‚Ñù‚â•0}

@[simp] lemma wlpNorm_translate [NormedAddCommGroup Œ≤] (a : Œ±) (f : Œ± ‚Üí Œ≤) :
    ‚ÄñœÑ a f‚Äñ_[p, œÑ a w] = ‚Äñf‚Äñ_[p, w] :=
  (lpNorm_translate a Œª i ‚Ü¶ w i ^ (p‚Åª¬π : ‚Ñù) ‚Ä¢ ‚Äñf i‚Äñ : _)

@[simp]
lemma wlpNorm_conj [IsROrC Œ≤] (f : Œ± ‚Üí Œ≤) : ‚Äñconj f‚Äñ_[p, w] = ‚Äñf‚Äñ_[p, w] := by simp [wlpNorm]

@[simp]
lemma wlpNorm_conjneg [IsROrC Œ≤] (f : Œ± ‚Üí Œ≤) : ‚Äñconjneg f‚Äñ_[p] = ‚Äñf‚Äñ_[p] := by simp [wlpNorm]

end wlpNorm

/-- **Cauchy-Schwarz inequality** -/
lemma l2inner_le_L2norm_mul_L2norm (f g : Œπ ‚Üí ‚Ñù) : ‚ü™f, g‚ü´_[‚Ñù] ‚â§ ‚Äñf‚Äñ_[2] * ‚Äñg‚Äñ_[2] :=
  real_inner_le_norm ((WithLp.equiv 2 _).symm f) _

namespace Mathlib.Meta.Positivity
open Lean Meta Qq Function

private alias ‚ü®_, lpNorm_pos_of_ne_zero‚ü© := lpNorm_pos

private lemma lpNorm_pos_of_ne_zero' {Œ± : Type*} [NormedAddCommGroup Œ±] {p : ‚Ñù‚â•0‚àû} {f : Œπ ‚Üí Œ±}
    (hf : f ‚â† 0) : 0 < ‚Äñf‚Äñ_[p] := lpNorm_pos_of_ne_zero hf

private lemma lpNorm_pos_of_pos {Œ± : Œπ ‚Üí Type*} [‚àÄ i, NormedAddCommGroup (Œ± i)]
    [‚àÄ i, Preorder (Œ± i)] {p : ‚Ñù‚â•0‚àû} {f : ‚àÄ i, Œ± i} (hf : 0 < f) : 0 < ‚Äñf‚Äñ_[p] :=
  lpNorm_pos_of_ne_zero hf.ne'

private lemma lpNorm_pos_of_pos' {Œ± : Type*} [NormedAddCommGroup Œ±] [Preorder Œ±] {p : ‚Ñù‚â•0‚àû}
    {f : Œπ ‚Üí Œ±} (hf : 0 < f) : 0 < ‚Äñf‚Äñ_[p] := lpNorm_pos_of_ne_zero hf.ne'

section OrderedCommSemiring
variable [OrderedCommSemiring ùïú] [StarOrderedRing ùïú] {f g : Œπ ‚Üí ùïú}

private lemma l2inner_nonneg_of_pos_of_nonneg (hf : 0 < f) (hg : 0 ‚â§ g) : 0 ‚â§ ‚ü™f, g‚ü´_[ùïú] :=
  l2inner_nonneg hf.le hg

private lemma l2inner_nonneg_of_nonneg_of_pos (hf : 0 ‚â§ f) (hg : 0 < g) : 0 ‚â§ ‚ü™f, g‚ü´_[ùïú] :=
  l2inner_nonneg hf hg.le

private lemma l2inner_nonneg_of_pos_of_pos (hf : 0 < f) (hg : 0 < g) : 0 ‚â§ ‚ü™f, g‚ü´_[ùïú] :=
  l2inner_nonneg hf.le hg.le

end OrderedCommSemiring

-- TODO: Make it sound again :(
set_option linter.unusedVariables false in
/-- The `positivity` extension which identifies expressions of the form `‚Äñf‚Äñ_[p]`. -/
@[positivity ‚Äñ_‚Äñ_[_]] def evalLpNorm : PositivityExt where eval {u Œ±} zŒ± pŒ± e := do
  let .app (.app (_f :) (a : Q($Œ±))) (b : Q($Œ±)) ‚Üê withReducible (whnf e)
    | throwError "not ‚Äñ_‚Äñ_[_]"
  match ‚Üê core zŒ± pŒ± b with
  | .positive pa => return .positive q(dummy_pos_of_pos $pa)
  | .nonzero pa => return .positive q(dummy_pos_of_nzr $pa)
  | _ => return .nonnegative q(dummy_nng)
-- TODO: Make it sound again :(
set_option linter.unusedVariables false in
/-- The `positivity` extension which identifies expressions of the form `‚Äñf‚Äñ_[p, w]`. -/
@[positivity ‚Äñ_‚Äñ_[_, _]] def evalWLpNorm : PositivityExt where eval {u Œ±} zŒ± pŒ± e := do
  let .app (.app (_f : Q($Œ± ‚Üí $Œ± ‚Üí $Œ±)) (a : Q($Œ±))) (b : Q($Œ±)) ‚Üê withReducible (whnf e)
    | throwError "not ‚Äñ_‚Äñ_[_, _]"
  return .nonnegative q(dummy_nng)

-- TODO: Make it sound again :(
set_option linter.unusedVariables false in
/-- The `positivity` extension which identifies expressions of the form `‚ü™f, g‚ü´_[ùïú]`. -/
@[positivity ‚ü™_, _‚ü´_[_]] def evall2inner : PositivityExt where eval {u Œ±} zŒ± pŒ± e := do
  let .app (.app (_f : Q($Œ± ‚Üí $Œ± ‚Üí $Œ±)) (a : Q($Œ±))) (b : Q($Œ±)) ‚Üê withReducible (whnf e)
    | throwError "not ‚ü™_, _‚ü´_[_]"
  let ra ‚Üê core zŒ± pŒ± a; let rb ‚Üê core zŒ± pŒ± b
  match ra, rb with
  | .positive pa, .positive pb => return .positive q(dummy_pos_of_pos_pos $pa $pb)
  | .positive pa, .nonnegative pb => return .nonnegative q(dummy_nng_of_pos_nng $pa $pb)
  | .nonnegative pa, .positive pb => return .nonnegative q(dummy_nng_of_nng_pos $pa $pb)
  | .nonnegative pa, .nonnegative pb => return .nonnegative q(dummy_nng_of_nng_nng $pa $pb)
  | _, _ => pure .none

section Examples

section NormedAddCommGroup
variable {Œ± : Œπ ‚Üí Type*} [‚àÄ i, NormedAddCommGroup (Œ± i)] {w : Œπ ‚Üí ‚Ñù‚â•0} {f : ‚àÄ i, Œ± i}

-- example {p : ‚Ñù‚â•0‚àû} : 0 ‚â§ ‚Äñf‚Äñ_[p] := by positivity
-- example {p : ‚Ñù‚â•0‚àû} (hf : f ‚â† 0) : 0 < ‚Äñf‚Äñ_[p] := by positivity
-- example {p : ‚Ñù‚â•0‚àû} {f : Œπ ‚Üí ‚Ñù} (hf : 0 < f) : 0 < ‚Äñf‚Äñ_[p] := by positivity
example {p : ‚Ñù‚â•0} : 0 ‚â§ ‚Äñf‚Äñ_[p, w] := by positivity

end NormedAddCommGroup

section OrderedCommSemiring
variable [OrderedCommSemiring ùïú] [StarOrderedRing ùïú] {f g : Œπ ‚Üí ùïú}

-- example (hf : 0 < f) (hg : 0 < g) : 0 ‚â§ ‚ü™f, g‚ü´_[ùïú] := by positivity
-- example (hf : 0 < f) (hg : 0 ‚â§ g) : 0 ‚â§ ‚ü™f, g‚ü´_[ùïú] := by positivity
-- example (hf : 0 ‚â§ f) (hg : 0 < g) : 0 ‚â§ ‚ü™f, g‚ü´_[ùïú] := by positivity
-- example (hf : 0 ‚â§ f) (hg : 0 ‚â§ g) : 0 ‚â§ ‚ü™f, g‚ü´_[ùïú] := by positivity

end OrderedCommSemiring

section Complex
variable {w : Œπ ‚Üí ‚Ñù‚â•0} {f : Œπ ‚Üí ‚ÑÇ}

-- example {p : ‚Ñù‚â•0‚àû} : 0 ‚â§ ‚Äñf‚Äñ_[p] := by positivity
-- example {p : ‚Ñù‚â•0‚àû} (hf : f ‚â† 0) : 0 < ‚Äñf‚Äñ_[p] := by positivity
-- example {p : ‚Ñù‚â•0‚àû} {f : Œπ ‚Üí ‚Ñù} (hf : 0 < f) : 0 < ‚Äñf‚Äñ_[p] := by positivity
example {p : ‚Ñù‚â•0} : 0 ‚â§ ‚Äñf‚Äñ_[p, w] := by positivity

end Complex
end Examples
end Mathlib.Meta.Positivity

/-! ### H√∂lder inequality -/

section lpNorm
variable {Œ± : Type*} [Fintype Œ±] {p q : ‚Ñù‚â•0} {f g : Œ± ‚Üí ‚Ñù}

@[simp]
lemma lpNorm_abs (p : ‚Ñù‚â•0‚àû) (f : Œ± ‚Üí ‚Ñù) : ‚Äñ|f|‚Äñ_[p] = ‚Äñf‚Äñ_[p] := by simpa using lpNorm_norm p f

lemma L1norm_mul_of_nonneg (hf : 0 ‚â§ f) (hg : 0 ‚â§ g) : ‚Äñf * g‚Äñ_[1] = ‚ü™f, g‚ü´_[‚Ñù] := by
  convert L1norm_mul f g using 2 <;> ext a <;>
    refine' (norm_of_nonneg $ _).symm; exacts [hf _, hg _]

lemma lpNorm_rpow (hp : p ‚â† 0) (hq : q ‚â† 0) (hf : 0 ‚â§ f) :
    ‚Äñf ^ (q : ‚Ñù)‚Äñ_[p] = ‚Äñf‚Äñ_[p * q] ^ (q : ‚Ñù) := by
  refine' rpow_left_injOn (NNReal.coe_ne_zero.2 hp) lpNorm_nonneg (by dsimp; sorry) _ -- positivity
  dsimp
  rw [‚Üêrpow_mul lpNorm_nonneg, ‚Üêmul_comm, ‚ÜêENNReal.coe_mul, ‚ÜêNNReal.coe_mul,
    lpNorm_rpow_eq_sum hp, lpNorm_rpow_eq_sum (mul_ne_zero hq hp)]
  simp [abs_rpow_of_nonneg (hf _), ‚Üêrpow_mul]

lemma L1norm_rpow (hq : q ‚â† 0) (hf : 0 ‚â§ f) : ‚Äñf ^ (q : ‚Ñù)‚Äñ_[1] = ‚Äñf‚Äñ_[q] ^ (q : ‚Ñù) := by
  simpa only [ENNReal.coe_one, one_mul] using lpNorm_rpow one_ne_zero hq hf

lemma lpNorm_eq_L1norm_rpow (hp : p ‚â† 0) (f : Œ± ‚Üí ‚Ñù) :
    ‚Äñf‚Äñ_[p] = ‚Äñ|f| ^ (p : ‚Ñù)‚Äñ_[1] ^ (p‚Åª¬π : ‚Ñù) := by
  simp [lpNorm_eq_sum hp, L1norm_eq_sum, abs_rpow_of_nonneg]

lemma lpNorm_rpow' (hp : p ‚â† 0) (hq : q ‚â† 0) (f : Œ± ‚Üí ‚Ñù) :
    ‚Äñf‚Äñ_[p] ^ (q : ‚Ñù) = ‚Äñ|f| ^ (q : ‚Ñù)‚Äñ_[p / q] := by
  rw [‚ÜêENNReal.coe_div hq,
    lpNorm_rpow (div_ne_zero hp hq) hq (LatticeOrderedGroup.abs_nonneg f), lpNorm_abs, ‚Üê
    ENNReal.coe_mul, div_mul_cancel _ hq]

--TODO: Generalise the following four to include `f g : Œ± ‚Üí ‚ÑÇ`
/-- H√∂lder's inequality, binary case. -/
lemma l2inner_le_lpNorm_mul_lpNorm (hpq : IsConjugateExponent p q) (f g : Œ± ‚Üí ‚Ñù) :
    ‚ü™f, g‚ü´_[‚Ñù] ‚â§ ‚Äñf‚Äñ_[p] * ‚Äñg‚Äñ_[q] := by
  have hp := hpq.ne_zero
  have hq := hpq.symm.ne_zero
  norm_cast at hp hq
  simpa [l2inner_eq_sum, lpNorm_eq_sum, *] using inner_le_Lp_mul_Lq _ f g hpq

/-- H√∂lder's inequality, binary case. -/
lemma abs_l2inner_le_lpNorm_mul_lpNorm (hpq : IsConjugateExponent p q) (f g : Œ± ‚Üí ‚Ñù) :
    |‚ü™f, g‚ü´_[‚Ñù]| ‚â§ ‚Äñf‚Äñ_[p] * ‚Äñg‚Äñ_[q] :=
  abs_l2inner_le_l2inner_abs.trans $
    (l2inner_le_lpNorm_mul_lpNorm hpq _ _).trans_eq $ by simp_rw [lpNorm_abs]

/-- H√∂lder's inequality, binary case. -/
lemma lpNorm_mul_le (hp : p ‚â† 0) (hq : q ‚â† 0) (r : ‚Ñù‚â•0) (hpqr : p‚Åª¬π + q‚Åª¬π = r‚Åª¬π) (f g : Œ± ‚Üí ‚Ñù) :
    ‚Äñf * g‚Äñ_[r] ‚â§ ‚Äñf‚Äñ_[p] * ‚Äñg‚Äñ_[q] := by
  have hr : r ‚â† 0 := by
    rintro rfl
    simp [hp] at hpqr
  have : |f * g| ^ (r : ‚Ñù) = |f| ^ (r : ‚Ñù) * |g| ^ (r : ‚Ñù) := by ext; simp [mul_rpow, abs_mul]
  rw [lpNorm_eq_L1norm_rpow, rpow_inv_le_iff_of_pos, this, L1norm_mul_of_nonneg,
    mul_rpow lpNorm_nonneg lpNorm_nonneg, lpNorm_rpow', lpNorm_rpow', ‚ÜêENNReal.coe_div, ‚Üê
    ENNReal.coe_div]
  refine' l2inner_le_lpNorm_mul_lpNorm ‚ü®_, _‚ü© _ _
  ¬∑ norm_cast
    rw [div_eq_mul_inv, ‚Üêhpqr, mul_add, mul_inv_cancel hp]
    exact lt_add_of_pos_right _ (by positivity)
  ¬∑ norm_cast
    simp [div_eq_mul_inv, hpqr, ‚Üêmul_add, hr]
  any_goals intro a; dsimp
  all_goals sorry -- positivity

/-- H√∂lder's inequality, finitary case. -/
lemma lpNorm_prod_le {s : Finset Œπ} (hs : s.Nonempty) {p : Œπ ‚Üí ‚Ñù‚â•0} (hp : ‚àÄ i, p i ‚â† 0) (q : ‚Ñù‚â•0)
    (hpq : ‚àë i in s, (p i)‚Åª¬π = q‚Åª¬π) (f : Œπ ‚Üí Œ± ‚Üí ‚Ñù) : ‚Äñ‚àè i in s, f i‚Äñ_[q] ‚â§ ‚àè i in s, ‚Äñf i‚Äñ_[p i] := by
  induction' s using Finset.cons_induction with i s hi ih generalizing q
  ¬∑ cases not_nonempty_empty hs
  obtain rfl | hs := s.eq_empty_or_nonempty
  ¬∑ simp only [sum_cons, sum_empty, add_zero, inv_inj] at hpq
    simp [‚Üêhpq]
  simp_rw [prod_cons]
  rw [sum_cons, ‚Üêinv_inv (‚àë _ ‚àà _, _ : ‚Ñù‚â•0)] at hpq
  refine'
    (lpNorm_mul_le (hp _) (inv_ne_zero (sum_pos (Œª _ _ ‚Ü¶ _) hs).ne') _ hpq _ _).trans
      (mul_le_mul_of_nonneg_left (ih hs _ (inv_inv _).symm) lpNorm_nonneg)
  exact pos_iff_ne_zero.2 (inv_ne_zero $ hp _)

end lpNorm

/-! ### Indicator -/

section indicate
variable {Œ± Œ≤ : Type*} [IsROrC Œ≤] [Fintype Œ±] [DecidableEq Œ±] {s : Finset Œ±} {p : ‚Ñù‚â•0}

lemma lpNorm_rpow_indicate (hp : p ‚â† 0) (s : Finset Œ±) : ‚Äñùü≠_[Œ≤] s‚Äñ_[p] ^ (p : ‚Ñù) = s.card := by
  have : ‚àÄ x, (ite (x ‚àà s) 1 0 : ‚Ñù) ^ (p : ‚Ñù) = ite (x ‚àà s) (1 ^ (p : ‚Ñù)) (0 ^ (p : ‚Ñù)) := Œª x ‚Ü¶
    by split_ifs <;> simp
  simp [lpNorm_rpow_eq_sum, hp, indicate_apply, apply_ite Norm.norm, -sum_const, card_eq_sum_ones,
    sum_boole, this, zero_rpow, filter_mem_eq_inter]

lemma lpNorm_indicate (hp : p ‚â† 0) (s : Finset Œ±) : ‚Äñùü≠_[Œ≤] s‚Äñ_[p] = s.card ^ (p‚Åª¬π : ‚Ñù) := by
  refine' (eq_rpow_inv _ _ _).2 (lpNorm_rpow_indicate _ _) <;> sorry -- positivity

lemma lpNorm_pow_indicate {p : ‚Ñï} (hp : p ‚â† 0) (s : Finset Œ±) :
    ‚Äñùü≠_[Œ≤] s‚Äñ_[p] ^ (p : ‚Ñù) = s.card := by
  simpa using lpNorm_rpow_indicate (Nat.cast_ne_zero.2 hp) s

lemma L2norm_sq_indicate (s : Finset Œ±) : ‚Äñùü≠_[Œ≤] s‚Äñ_[2] ^ 2 = s.card := by
  simpa using lpNorm_pow_indicate two_ne_zero s

lemma L2norm_indicate (s : Finset Œ±) : ‚Äñùü≠_[Œ≤] s‚Äñ_[2] = Real.sqrt s.card := by
  rw [eq_comm, sqrt_eq_iff_sq_eq, L2norm_sq_indicate] <;> sorry -- positivity

@[simp] lemma L1norm_indicate (s : Finset Œ±) : ‚Äñùü≠_[Œ≤] s‚Äñ_[1] = s.card := by
  simpa using lpNorm_pow_indicate one_ne_zero s

end indicate

section mu
variable {Œ± Œ≤ : Type*} [IsROrC Œ≤] [Fintype Œ±] [DecidableEq Œ±] {s : Finset Œ±} {p : ‚Ñù‚â•0}

lemma lpNorm_mu (hp : 1 ‚â§ p) (hs : s.Nonempty) : ‚ÄñŒº_[Œ≤] s‚Äñ_[p] = s.card ^ (p‚Åª¬π - 1 : ‚Ñù) := by
  rw [mu, lpNorm_smul (ENNReal.one_le_coe_iff.2 hp) (s.card‚Åª¬π : Œ≤) (ùü≠_[Œ≤] s), lpNorm_indicate,
      norm_inv, IsROrC.norm_natCast, inv_mul_eq_div, ‚Üêrpow_sub_one] <;>
    sorry -- positivity

lemma lpNorm_mu_le (hp : 1 ‚â§ p) : ‚ÄñŒº_[Œ≤] s‚Äñ_[p] ‚â§ s.card ^ (p‚Åª¬π - 1 : ‚Ñù) := by
  obtain rfl | hs := s.eq_empty_or_nonempty
  ¬∑ simp
    positivity
  ¬∑ exact (lpNorm_mu hp hs).le

lemma L1norm_mu (hs : s.Nonempty) : ‚ÄñŒº_[Œ≤] s‚Äñ_[1] = 1 := by simpa using lpNorm_mu le_rfl hs

lemma L1norm_mu_le_one : ‚ÄñŒº_[Œ≤] s‚Äñ_[1] ‚â§ 1 := by simpa using lpNorm_mu_le le_rfl

end mu

section
variable {Œ± : Type*} [Fintype Œ±]

@[simp]
lemma IsROrC.lpNorm_coe_comp {ùïú : Type*} [IsROrC ùïú] (p) (f : Œ± ‚Üí ‚Ñù) :
    ‚Äñ((‚Üë) : ‚Ñù ‚Üí ùïú) ‚àò f‚Äñ_[p] = ‚Äñf‚Äñ_[p] := by
  simp only [‚ÜêlpNorm_norm _ (((‚Üë) : ‚Ñù ‚Üí ùïú) ‚àò f), ‚ÜêlpNorm_norm _ f, Function.comp_apply,
    IsROrC.norm_ofReal, Real.norm_eq_abs]

@[simp] lemma Complex.lpNorm_coe_comp (p) (f : Œ± ‚Üí ‚Ñù) : ‚Äñ((‚Üë) : ‚Ñù ‚Üí ‚ÑÇ) ‚àò f‚Äñ_[p] = ‚Äñf‚Äñ_[p] :=
  IsROrC.lpNorm_coe_comp _ _

end
