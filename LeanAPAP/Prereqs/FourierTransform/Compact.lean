import LeanAPAP.Prereqs.Convolution.Compact
import LeanAPAP.Prereqs.Expect.Complex
import LeanAPAP.Prereqs.FourierTransform.Discrete
import LeanAPAP.Prereqs.Function.Indicator.Basic

/-!
# Discrete Fourier transform in the compact normalisation

This file defines the discrete Fourier transform in the compact normalisation and shows the
Parseval-Plancherel identity and Fourier inversion formula for it.
-/

noncomputable section

open AddChar Finset Function MeasureTheory
open Fintype (card)
open scoped ComplexConjugate ComplexOrder

variable {Œ± Œ≥ : Type*} [AddCommGroup Œ±] [Fintype Œ±] {f : Œ± ‚Üí ‚ÑÇ} {œà : AddChar Œ± ‚ÑÇ} {n : ‚Ñï}

/-- The discrete Fourier transform. -/
def cft (f : Œ± ‚Üí ‚ÑÇ) : AddChar Œ± ‚ÑÇ ‚Üí ‚ÑÇ := fun œà ‚Ü¶ ‚ü™œà, f‚ü´‚Çô_[‚ÑÇ]

lemma cft_apply (f : Œ± ‚Üí ‚ÑÇ) (œà : AddChar Œ± ‚ÑÇ) : cft f œà = ‚ü™œà, f‚ü´‚Çô_[‚ÑÇ] := rfl

@[simp] lemma cft_zero : cft (0 : Œ± ‚Üí ‚ÑÇ) = 0 := by ext; simp [cft_apply]

@[simp] lemma cft_add (f g : Œ± ‚Üí ‚ÑÇ) : cft (f + g) = cft f + cft g := by
  ext; simp [cL2Inner_add_right, cft_apply]

@[simp] lemma cft_neg (f : Œ± ‚Üí ‚ÑÇ) : cft (-f) = - cft f := by ext; simp [cft_apply]

@[simp] lemma cft_sub (f g : Œ± ‚Üí ‚ÑÇ) : cft (f - g) = cft f - cft g := by
  ext; simp [cL2Inner_sub_right, cft_apply]

@[simp] lemma cft_const (a : ‚ÑÇ) (hœà : œà ‚â† 0) : cft (const Œ± a) œà = 0 := by
  simp only [cft_apply, cL2Inner_eq_expect, const_apply, ‚Üê expect_mul, ‚Üê map_expect,
    expect_eq_zero_iff_ne_zero.2 hœà, map_zero, zero_mul]

@[simp] lemma cft_smul [DistribSMul Œ≥ ‚ÑÇ] [Star Œ≥] [StarModule Œ≥ ‚ÑÇ] [IsScalarTower Œ≥ ‚ÑÇ ‚ÑÇ]
    [SMulCommClass Œ≥ ‚ÑÇ ‚ÑÇ] (c : Œ≥) (f : Œ± ‚Üí ‚ÑÇ) : cft (c ‚Ä¢ f) = c ‚Ä¢ cft f := by
  have := SMulCommClass.symm Œ≥ ‚ÑÇ ‚ÑÇ
  ext
  simp [cL2Inner_smul_right, cft_apply]

/-- **Parseval-Plancherel identity** for the discrete Fourier transform. -/
@[simp] lemma dL2Inner_cft (f g : Œ± ‚Üí ‚ÑÇ) : ‚ü™cft f, cft g‚ü´_[‚ÑÇ] = ‚ü™f, g‚ü´‚Çô_[‚ÑÇ] := by
  classical
  unfold cft
  simp_rw [dL2Inner_eq_sum, cL2Inner_eq_expect, map_expect, map_mul, starRingEnd_self_apply,
    expect_mul, mul_expect, ‚Üê expect_sum_comm, mul_mul_mul_comm _ (conj $ f _), ‚Üê sum_mul, ‚Üê
    AddChar.inv_apply_eq_conj, ‚Üê map_neg_eq_inv, ‚Üê map_add_eq_mul, AddChar.sum_apply_eq_ite]
  simp [add_neg_eq_zero, card_univ, Fintype.card_ne_zero, NNRat.smul_def (Œ± := ‚ÑÇ)]

/-- **Parseval-Plancherel identity** for the discrete Fourier transform. -/
@[simp] lemma dL2Norm_cft [MeasurableSpace Œ±] [DiscreteMeasurableSpace Œ±] (f : Œ± ‚Üí ‚ÑÇ) :
    ‚Äñcft f‚Äñ_[2] = ‚Äñf‚Äñ‚Çô_[2] :=
  (sq_eq_sq (zero_le _) (zero_le _)).1 $ NNReal.coe_injective $ Complex.ofReal_injective $ by
    push_cast; simpa only [cL2Inner_self, dL2Inner_self] using dL2Inner_cft f f

/-- **Fourier inversion** for the discrete Fourier transform. -/
lemma cft_inversion (f : Œ± ‚Üí ‚ÑÇ) (a : Œ±) : ‚àë œà, cft f œà * œà a = f a := by
  classical simp_rw [cft, cL2Inner_eq_expect, expect_mul, ‚Üê expect_sum_comm, mul_right_comm _ (f _),
    ‚Üê sum_mul, ‚Üê AddChar.inv_apply_eq_conj, inv_mul_eq_div, ‚Üê map_sub_eq_div,
    AddChar.sum_apply_eq_ite, sub_eq_zero, ite_mul, zero_mul, Fintype.expect_ite_eq]
  simp [add_neg_eq_zero, card_univ, NNRat.smul_def (Œ± := ‚ÑÇ), Fintype.card_ne_zero]

lemma dft_cft_doubleDualEmb (f : Œ± ‚Üí ‚ÑÇ) (a : Œ±) : dft (cft f) (doubleDualEmb a) = f (-a) := by
  simp only [‚Üê cft_inversion f (-a), mul_comm (conj _), dft_apply, dL2Inner_eq_sum, map_neg_eq_inv,
    AddChar.inv_apply_eq_conj, doubleDualEmb_apply]

lemma cft_dft_doubleDualEmb (f : Œ± ‚Üí ‚ÑÇ) (a : Œ±) : cft (dft f) (doubleDualEmb a) = f (-a) := by
  simp only [‚Üê dft_inversion f (-a), mul_comm (conj _), cft_apply, cL2Inner_eq_expect,
    map_neg_eq_inv, AddChar.inv_apply_eq_conj, doubleDualEmb_apply]

lemma dft_cft (f : Œ± ‚Üí ‚ÑÇ) : dft (cft f) = f ‚àò doubleDualEquiv.symm ‚àò Neg.neg :=
  funext fun a ‚Ü¶ by simp_rw [Function.comp_apply, map_neg, ‚Üê dft_cft_doubleDualEmb,
      doubleDualEmb_doubleDualEquiv_symm_apply]

lemma cft_dft (f : Œ± ‚Üí ‚ÑÇ) : cft (dft f) = f ‚àò doubleDualEquiv.symm ‚àò Neg.neg :=
  funext fun a ‚Ü¶ by simp_rw [Function.comp_apply, map_neg, ‚Üê cft_dft_doubleDualEmb,
      doubleDualEmb_doubleDualEquiv_symm_apply]

lemma cft_injective : Injective (cft : (Œ± ‚Üí ‚ÑÇ) ‚Üí AddChar Œ± ‚ÑÇ ‚Üí ‚ÑÇ) := fun f g h ‚Ü¶
  funext fun a ‚Ü¶ (cft_inversion _ _).symm.trans $ by rw [h, cft_inversion]

lemma cft_inv (œà : AddChar Œ± ‚ÑÇ) (hf : IsSelfAdjoint f) : cft f œà‚Åª¬π = conj (cft f œà) := by
  simp_rw [cft_apply, cL2Inner_eq_expect, map_expect, AddChar.inv_apply', map_mul,
    AddChar.inv_apply_eq_conj, Complex.conj_conj, (hf.apply _).conj_eq]

@[simp]
lemma cft_conj (f : Œ± ‚Üí ‚ÑÇ) (œà : AddChar Œ± ‚ÑÇ) : cft (conj f) œà = conj (cft f œà‚Åª¬π) := by
  simp only [cft_apply, cL2Inner_eq_expect, map_expect, map_mul, ‚Üê inv_apply', ‚Üê inv_apply_eq_conj,
    inv_inv, Pi.conj_apply]

lemma cft_conjneg_apply (f : Œ± ‚Üí ‚ÑÇ) (œà : AddChar Œ± ‚ÑÇ) : cft (conjneg f) œà = conj (cft f œà) := by
  simp only [cft_apply, cL2Inner_eq_expect, conjneg_apply, map_expect, map_mul, RCLike.conj_conj]
  refine Fintype.expect_equiv (Equiv.neg _) _ _ fun i ‚Ü¶ ?_
  simp only [Equiv.neg_apply, ‚Üê inv_apply_eq_conj, ‚Üê inv_apply', inv_apply]

@[simp]
lemma cft_conjneg (f : Œ± ‚Üí ‚ÑÇ) : cft (conjneg f) = conj (cft f) := funext $ cft_conjneg_apply _

@[simp] lemma cft_balance (f : Œ± ‚Üí ‚ÑÇ) (hœà : œà ‚â† 0) : cft (balance f) œà = cft f œà := by
  simp only [balance, Pi.sub_apply, cft_sub, cft_const _ hœà, sub_zero]

lemma cft_dilate (f : Œ± ‚Üí ‚ÑÇ) (œà : AddChar Œ± ‚ÑÇ) (hn : (card Œ±).Coprime n) :
    cft (dilate f n) œà = cft f (œà ^ n) := by
  simp_rw [cft_apply, cL2Inner_eq_expect, dilate]
  rw [‚Üê Nat.card_eq_fintype_card] at hn
  refine (Fintype.expect_bijective _ hn.nsmul_right_bijective _ _  ?_).symm
  simp only [pow_apply, ‚Üê map_nsmul_eq_pow, zmod_val_inv_nsmul_nsmul hn, forall_const]

@[simp] lemma cft_trivNChar [DecidableEq Œ±] : cft (trivNChar : Œ± ‚Üí ‚ÑÇ) = 1 := by
  ext
  simp [trivChar_apply, cft_apply, cL2Inner_eq_expect, ‚Üê map_expect, card_univ,
    NNRat.smul_def (Œ± := ‚ÑÇ)]

@[simp] lemma cft_one : cft (1 : Œ± ‚Üí ‚ÑÇ) = trivChar :=
  dft_injective $ by classical rw [dft_trivChar, dft_cft, Pi.one_comp]

variable [DecidableEq Œ±]

@[simp] lemma cft_indicate_zero (s : Finset Œ±) : cft (ùü≠ s) 0 = s.dens := by
  simp only [cft_apply, cL2Inner_eq_expect, expect_indicate, AddChar.zero_apply, map_one, one_mul,
    dens, NNRat.smul_def (Œ± := ‚ÑÇ), div_eq_inv_mul]
  simp

lemma cft_nconv_apply (f g : Œ± ‚Üí ‚ÑÇ) (œà : AddChar Œ± ‚ÑÇ) : cft (f ‚àó‚Çô g) œà = cft f œà * cft g œà := by
  simp_rw [cft, cL2Inner_eq_expect, nconv_eq_expect_sub', mul_expect, expect_mul, ‚Üê expect_product',
    univ_product_univ]
  refine Fintype.expect_equiv ((Equiv.prodComm _ _).trans $
    ((Equiv.refl _).prodShear Equiv.subRight).trans $ Equiv.prodComm _ _)  _ _ fun (a, b) ‚Ü¶ ?_
  simp only [Equiv.trans_apply, Equiv.prodComm_apply, Equiv.prodShear_apply, Prod.fst_swap,
    Equiv.refl_apply, Prod.snd_swap, Equiv.subRight_apply, Prod.swap_prod_mk, Prod.forall]
  rw [mul_mul_mul_comm, ‚Üê map_mul, ‚Üê map_add_eq_mul, add_sub_cancel]

lemma cft_cdconv_apply (f g : Œ± ‚Üí ‚ÑÇ) (œà : AddChar Œ± ‚ÑÇ) :
    cft (f ‚óã‚Çô g) œà = cft f œà * conj (cft g œà) := by
  rw [‚Üê nconv_conjneg, cft_nconv_apply, cft_conjneg_apply]

@[simp] lemma cft_nconv (f g : Œ± ‚Üí ‚ÑÇ) : cft (f ‚àó‚Çô g) = cft f * cft g :=
  funext $ cft_nconv_apply _ _

@[simp]
lemma cft_cdconv (f g : Œ± ‚Üí ‚ÑÇ) : cft (f ‚óã‚Çô g) = cft f * conj (cft g) :=
  funext $ cft_cdconv_apply _ _

@[simp] lemma cft_iterNConv (f : Œ± ‚Üí ‚ÑÇ) : ‚àÄ n, cft (f ‚àó^‚Çô n) = cft f ^ n
  | 0 => cft_trivNChar
  | n + 1 => by simp [iterNConv_succ, pow_succ, cft_iterNConv]

@[simp] lemma cft_iterNConv_apply (f : Œ± ‚Üí ‚ÑÇ) (n : ‚Ñï) (œà : AddChar Œ± ‚ÑÇ) :
    cft (f ‚àó^‚Çô n) œà = cft f œà ^ n := congr_fun (cft_iterNConv _ _) _

-- lemma dL2Norm_iterNConv (f : Œ± ‚Üí ‚ÑÇ) (n : ‚Ñï) : ‚Äñf ‚àó^‚Çô n‚Äñ‚Çô_[2] = ‚Äñf ^ n‚Äñ_[2] := by
--   rw [‚Üê dL2Norm_cft, cft_iterNConv, ‚Üê ENNReal.coe_two, dLpNorm_pow]
--   norm_cast
--   refine (sq_eq_sq (by positivity) $ by positivity).1 ?_
--   rw [‚Üê ENNReal.coe_two, dLpNorm_pow, ‚Üê pow_mul', ‚Üê Complex.ofReal_inj]
--   push_cast
--   simp_rw [pow_mul, ‚Üê Complex.mul_conj', conj_iterConv_apply, mul_pow]

variable [MeasurableSpace Œ±] [DiscreteMeasurableSpace Œ±]

lemma cLpNorm_nconv_le_cLpNorm_cdconv (hn‚ÇÄ : n ‚â† 0) (hn : Even n) (f : Œ± ‚Üí ‚ÑÇ) :
    ‚Äñf ‚àó‚Çô f‚Äñ‚Çô_[n] ‚â§ ‚Äñf ‚óã‚Çô f‚Äñ‚Çô_[n] := by
  cases isEmpty_or_nonempty Œ±
  ¬∑ rw [Subsingleton.elim (f ‚àó‚Çô f) (f ‚óã‚Çô f)]
  refine le_of_pow_le_pow_left hn‚ÇÄ (by positivity) ?_
  obtain ‚ü®n, rfl‚ü© := hn.two_dvd
  simp_rw [‚Üê NNReal.coe_le_coe, NNReal.coe_pow, cLpNorm_pow_eq_expect_norm hn‚ÇÄ,
    ‚Üê cft_inversion (f ‚àó‚Çô f), ‚Üê cft_inversion (f ‚óã‚Çô f), cft_nconv, cft_cdconv, Pi.mul_apply]
  rw [‚Üê Real.norm_of_nonneg (expect_nonneg fun i _ ‚Ü¶ ?_), ‚Üê Complex.norm_real]
  rw [Complex.ofReal_expect (univ : Finset Œ±)]
  any_goals positivity
  simp_rw [pow_mul', ‚Üê norm_pow _ n, Complex.ofReal_pow, ‚Üê Complex.conj_mul', map_pow, map_sum,
    map_mul, Fintype.sum_pow, Fintype.sum_mul_sum]
  sorry
  -- simp only [@expect_comm _ _ Œ±, ‚Üê mul_expect, prod_mul_prod_comm]
  -- refine (norm_expect_le _ _).trans_eq (Complex.ofReal_injective _)
  -- simp only [norm_mul, norm_prod, RCLike.norm_conj, ‚Üê pow_mul]
  -- push_cast
  -- have : ‚àÄ f g : Fin n ‚Üí AddChar Œ± ‚ÑÇ, 0 ‚â§ ‚àë a, ‚àè i, conj (f i a) * g i a := by
  --   rintro f g
  --   suffices : ‚àë a, ‚àè i, conj (f i a) * g i a = if ‚àë i, (g i - f i) = 0 then (card Œ± : ‚ÑÇ) else 0
  --   ¬∑ rw [this]
  --     split_ifs <;> positivity
  --   simp_rw [‚Üê AddChar.expect_eq_ite, AddChar.expect_apply, AddChar.sub_apply, AddChar.map_neg_eq_inv,
  --     AddChar.inv_apply_eq_conj, mul_comm]
  -- simp only [RCLike.ofReal_pow, pow_mul, ‚Üê Complex.conj_mul', map_expect, map_mul, Complex.conj_conj,
  --   Pi.conj_apply, mul_pow, Fintype.expect_pow, ‚Üê sq, Fintype.expect_mul_expect]
  -- conv_lhs =>
  --   arg 2
  --   ext
  --   rw [‚Üê Complex.eq_coe_norm_of_nonneg (this _ _)]
  -- simp only [@expect_comm _ _ Œ±, mul_expect, map_prod, map_mul, RCLike.conj_conj, ‚Üê prod_mul_distrib]
  -- refine expect_congr rfl fun x _ ‚Ü¶ expect_congr rfl fun a _ ‚Ü¶ prod_congr rfl fun i _ ‚Ü¶ _
  -- ring

--TODO: Can we unify with `cLpNorm_nconv_le_cLpNorm_cdconv`?
lemma cLpNorm_nconv_le_cLpNorm_cdconv' (hn‚ÇÄ : n ‚â† 0) (hn : Even n) (f : Œ± ‚Üí ‚Ñù) :
    ‚Äñf ‚àó‚Çô f‚Äñ‚Çô_[n] ‚â§ ‚Äñf ‚óã‚Çô f‚Äñ‚Çô_[n] := by
  simpa only [‚Üê Complex.coe_comp_nconv, ‚Üê Complex.coe_comp_cdconv, Complex.cLpNorm_coe_comp] using
    cLpNorm_nconv_le_cLpNorm_cdconv hn‚ÇÄ hn ((‚Üë) ‚àò f)
