import LeanAPAP.Prereqs.Convolution.ThreeAP
import LeanAPAP.Prereqs.FourierTransform.Compact
import LeanAPAP.Prereqs.LargeSpec
import LeanAPAP.Physics.AlmostPeriodicity
import LeanAPAP.Physics.Unbalancing

/-!
# Finite field case
-/

open FiniteDimensional Fintype Function Real
open Finset hiding card
open scoped NNReal BigOperators Combinatorics.Additive Pointwise

universe u
variable {G : Type u} [AddCommGroup G] [DecidableEq G] [Fintype G] {A C : Finset G} {Œ≥ Œµ : ‚Ñù}

lemma global_dichotomy (hA : A.Nonempty) (hŒ≥C : Œ≥ ‚â§ C.dens) (hŒ≥ : 0 < Œ≥)
    (hAC : Œµ ‚â§ |card G * ‚ü™Œº A ‚àó Œº A, Œº C‚ü´_[‚Ñù] - 1|) :
    Œµ / (2 * card G) ‚â§
      ‚Äñbalance (Œº_[‚Ñù] A) ‚óã balance (Œº A)‚Äñ_[‚Üë(2 * ‚åàŒ≥.curlog‚åâ‚Çä), const _ (card G)‚Åª¬π] := by
  have hC : C.Nonempty := by simpa using hŒ≥.trans_le hŒ≥C
  have hŒ≥‚ÇÅ : Œ≥ ‚â§ 1 := hŒ≥C.trans (by norm_cast; exact dens_le_one)
  set p := 2 * ‚åàŒ≥.curlog‚åâ‚Çä
  have hp : 1 < p :=
    Nat.succ_le_iff.1 (le_mul_of_one_le_right zero_le' $ Nat.ceil_pos.2 $ curlog_pos hŒ≥ hŒ≥‚ÇÅ)
  have hp' : (p‚Åª¬π : ‚Ñù‚â•0) < 1 := inv_lt_one $ mod_cast hp
  have hp'' : (p : ‚Ñù‚â•0).IsConjExponent _ := .conjExponent $ mod_cast hp
  rw [mul_comm, ‚Üê div_div, div_le_iff‚ÇÄ (zero_lt_two' ‚Ñù)]
  calc
    _ ‚â§ _ := div_le_div_of_nonneg_right hAC (card G).cast_nonneg
    _ = |‚ü™balance (Œº A) ‚àó balance (Œº A), Œº C‚ü´_[‚Ñù]| := ?_
    _ ‚â§ ‚Äñbalance (Œº_[‚Ñù] A) ‚àó balance (Œº A)‚Äñ_[p] * ‚ÄñŒº_[‚Ñù] C‚Äñ_[NNReal.conjExponent p] :=
        abs_l2Inner_le_lpNorm_mul_lpNorm hp'' _ _
    _ ‚â§ ‚Äñbalance (Œº_[‚Ñù] A) ‚óã balance (Œº A)‚Äñ_[p] * (card G ^ (-(p : ‚Ñù)‚Åª¬π) * Œ≥ ^ (-(p : ‚Ñù)‚Åª¬π)) :=
        mul_le_mul (lpNorm_conv_le_lpNorm_dconv' (by positivity) (even_two_mul _) _) ?_
          (by positivity) (by positivity)
    _ = ‚Äñbalance (Œº_[‚Ñù] A) ‚óã balance (Œº A)‚Äñ_[‚Üë(2 * ‚åàŒ≥.curlog‚åâ‚Çä), const _ (card G)‚Åª¬π] *
          Œ≥ ^ (-(p : ‚Ñù)‚Åª¬π) := ?_
    _ ‚â§ _ := mul_le_mul_of_nonneg_left ?_ $ by positivity
  ¬∑ rw [‚Üê balance_conv, balance, l2Inner_sub_left, l2Inner_const_left, expect_conv, sum_mu ‚Ñù hA,
      expect_mu ‚Ñù hA, sum_mu ‚Ñù hC, conj_trivial, one_mul, mul_one, ‚Üê mul_inv_cancel‚ÇÄ, ‚Üê mul_sub,
      abs_mul, abs_of_nonneg, mul_div_cancel_left‚ÇÄ] <;> positivity
  ¬∑ rw [lpNorm_mu hp''.symm.one_le hC, hp''.symm.coe.inv_sub_one, NNReal.coe_natCast, ‚Üê mul_rpow]
    rw [nnratCast_dens, le_div_iff‚ÇÄ, mul_comm] at hŒ≥C
    refine rpow_le_rpow_of_nonpos ?_ hŒ≥C (neg_nonpos.2 ?_)
    all_goals positivity
  ¬∑ simp_rw [Nat.cast_mul, Nat.cast_two, p]
    rw [wlpNorm_const_right, mul_assoc, mul_left_comm, NNReal.coe_inv, inv_rpow, rpow_neg]
    push_cast
    any_goals norm_cast; rw [Nat.succ_le_iff]
    rfl
    all_goals positivity
  ¬∑ dsimp [p]
    push_cast
    norm_num
    rw [‚Üê neg_mul, rpow_mul, one_div, rpow_inv_le_iff_of_pos]
    exact (rpow_le_rpow_of_exponent_ge hŒ≥ hŒ≥‚ÇÅ $ neg_le_neg $
      inv_le_inv_of_le (curlog_pos hŒ≥ hŒ≥‚ÇÅ) $ Nat.le_ceil _).trans $
        (rpow_neg_inv_curlog_le hŒ≥.le hŒ≥‚ÇÅ).trans $ exp_one_lt_d9.le.trans $ by norm_num
    all_goals positivity

variable {q n : ‚Ñï} [Module (ZMod q) G] {A‚ÇÅ A‚ÇÇ : Finset G} (S : Finset G) {Œ± : ‚Ñù}

lemma ap_in_ff (hS : S.Nonempty) (hŒ±‚ÇÄ : 0 < Œ±) (hŒµ‚ÇÄ : 0 < Œµ) (hŒµ‚ÇÅ : Œµ ‚â§ 1) (hŒ±A‚ÇÅ : Œ± ‚â§ A‚ÇÅ.dens)
    (hŒ±A‚ÇÇ : Œ± ‚â§ A‚ÇÇ.dens) :
    ‚àÉ (V : Submodule (ZMod q) G) (V' : Finset G),
      (V : Set G) = V' ‚àß
        ‚Üë(finrank (ZMod q) G - finrank (ZMod q) V) ‚â§
            2 ^ 27 * Œ±.curlog ^ 2 * (Œµ * Œ±).curlog ^ 2 / Œµ ^ 2 ‚àß
          |‚àë x in S, (Œº V' ‚àó Œº A‚ÇÅ ‚àó Œº A‚ÇÇ) x - ‚àë x in S, (Œº A‚ÇÅ ‚àó Œº A‚ÇÇ) x| ‚â§ Œµ := by
  classical
  have hA‚ÇÅ : A‚ÇÅ.Nonempty := by simpa using hŒ±‚ÇÄ.trans_le hŒ±A‚ÇÅ
  have hA‚ÇÇ : A‚ÇÇ.Nonempty := by simpa using hŒ±‚ÇÄ.trans_le hŒ±A‚ÇÇ
  have hA‚ÇÅ : œÉ[A‚ÇÅ, univ] ‚â§ Œ±‚Åª¬π :=
    calc
      _ ‚â§ (A‚ÇÅ.dens‚Åª¬π : ‚Ñù) := by norm_cast; exact addConst_le_inv_dens
      _ ‚â§ Œ±‚Åª¬π := by gcongr
  obtain ‚ü®T, hST, hT‚ü© := AlmostPeriodicity.linfty_almost_periodicity_boosted Œµ hŒµ‚ÇÄ hŒµ‚ÇÅ
    ‚åà(Œµ * Œ± / 4).curlog‚åâ‚Çä (Nat.ceil_pos.2 $ curlog_pos (by positivity) sorry).ne' sorry hA‚ÇÅ
    univ_nonempty S A‚ÇÇ hS hA‚ÇÇ
  let Œî := largeSpec (Œº T) 2‚Åª¬π
  let V : AddSubgroup G := ‚®Ö Œ≥ ‚àà Œî, Œ≥.toAddMonoidHom.ker
  let V' : Finset G := Set.toFinset V
  have : ‚ü™Œº V' ‚àó Œº A‚ÇÅ ‚àó Œº A‚ÇÇ, ùü≠ S‚ü´_[‚Ñù] = ùîº v ‚àà V', (Œº A‚ÇÅ ‚àó Œº A‚ÇÇ ‚óã ùü≠ S) v := by
    calc
      _ = ‚ü™Œº V', Œº A‚ÇÅ ‚àó Œº A‚ÇÇ ‚óã ùü≠ S‚ü´_[‚Ñù] := by
        sorry
        -- rw [conv_assoc, conv_l2Inner, ‚Üê conj_l2Inner]
        -- simp

      _ = _ := sorry
  sorry

lemma di_in_ff (hq‚ÇÉ : 3 ‚â§ q) (hq : q.Prime) (hŒµ‚ÇÄ : 0 < Œµ) (hŒµ‚ÇÅ : Œµ < 1) (hŒ±A : Œ± ‚â§ A.dens)
    (hŒ≥C : Œ≥ ‚â§ C.dens) (hŒ≥ : 0 < Œ≥) (hAC : Œµ ‚â§ |card G * ‚ü™Œº A ‚àó Œº A, Œº C‚ü´_[‚Ñù] - 1|) :
    ‚àÉ (V : Submodule (ZMod q) G) (_ : DecidablePred (¬∑ ‚àà V)),
        ‚Üë(finrank (ZMod q) G - finrank (ZMod q) V) ‚â§
            2 ^ 171 * Œ±.curlog ^ 4 * Œ≥.curlog ^ 4 / Œµ ^ 24 ‚àß
          (1 + Œµ / 32) * Œ± ‚â§ ‚Äñùü≠_[‚Ñù] A * Œº (Set.toFinset V)‚Äñ_[‚ä§] := by
  obtain rfl | hA := A.eq_empty_or_nonempty
  ¬∑ stop
    refine ‚ü®‚ä§, univ, _‚ü©
    rw [AffineSubspace.direction_top]
    simp only [AffineSubspace.top_coe, coe_univ, eq_self_iff_true, finrank_top, tsub_self,
      Nat.cast_zero, indicate_empty, zero_mul, lpNorm_zero, true_and_iff,
      Finset.card_empty, zero_div] at hŒ±A ‚ä¢
    exact ‚ü®by positivity, mul_nonpos_of_nonneg_of_nonpos (by positivity) hŒ±A‚ü©
  have hŒ≥‚ÇÅ : Œ≥ ‚â§ 1 := hŒ≥C.trans (by norm_cast; exact dens_le_one)
  have hG : (card G : ‚Ñù) ‚â† 0 := by positivity
  have := unbalancing _ (mul_ne_zero two_ne_zero (Nat.ceil_pos.2 $ curlog_pos hŒ≥ hŒ≥‚ÇÅ).ne') (Œµ / 2)
    (by positivity) (div_le_one_of_le (hŒµ‚ÇÅ.le.trans $ by norm_num) $ by norm_num)
    (const _ (card G)‚Åª¬π) (card G ‚Ä¢ (balance (Œº A) ‚óã balance (Œº A)))
    (sqrt (card G) ‚Ä¢ balance (Œº A)) (const _ (card G)‚Åª¬π) ?_ ?_ ?_ ?_
  rotate_left
  ¬∑ stop
    ext a : 1
    simp [smul_dconv, dconv_smul, smul_smul]
  ¬∑ simp [card_univ, show (card G : ‚ÑÇ) ‚â† 0 by sorry]
  ¬∑ simp only [comp_const, Nonneg.coe_inv, NNReal.coe_natCast]
    rw [‚Üê ENNReal.coe_one, lpNorm_const one_ne_zero]
    sorry
    -- simp only [Nonneg.coe_one, inv_one, rpow_one, norm_inv, norm_coe_nat,
    --   mul_inv_cancel‚ÇÄ (show (card G : ‚Ñù) ‚â† 0 by positivity)]
  ¬∑ have hŒ≥' : (1 : ‚Ñù‚â•0) ‚â§ 2 * ‚åàŒ≥.curlog‚åâ‚Çä := sorry
    sorry
    -- simpa [wlpNorm_nsmul hŒ≥', ‚Üê nsmul_eq_mul, div_le_iff‚ÇÄ' (show (0 : ‚Ñù) < card G by positivity),
    --   ‚Üê div_div, *] using global_dichotomy hA hŒ≥C hŒ≥ hAC
  sorry

theorem ff (hq‚ÇÉ : 3 ‚â§ q) (hq : q.Prime) {A : Finset G} (hA‚ÇÄ : A.Nonempty)
    (hA : ThreeAPFree (Œ± := G) A) : finrank (ZMod q) G ‚â§ 130 * curlog A.dens ^ 9 := by
  let n : ‚Ñù := finrank (ZMod q) G
  let Œ± : ‚Ñù := A.dens
  have : 1 < (q : ‚Ñù) := mod_cast hq‚ÇÉ.trans_lt' (by norm_num)
  have : 1 ‚â§ (q : ‚Ñù) := this.le
  have : NeZero q := ‚ü®by positivity‚ü©
  have : Fact q.Prime := ‚ü®hq‚ü©
  have hq' : Odd q := hq.odd_of_ne_two $ by rintro rfl; simp at hq‚ÇÉ
  have : 1 ‚â§ Œ±‚Åª¬π := one_le_inv (by positivity) (by simp [Œ±])
  have hŒ±‚ÇÄ : 0 < Œ± := by positivity
  have : 0 ‚â§ log Œ±‚Åª¬π := log_nonneg ‚Äπ_‚Ä∫
  have : 0 ‚â§ curlog Œ± := curlog_nonneg (by positivity) (by simp [Œ±])
  have : 0 < log q := log_pos ‚Äπ_‚Ä∫
  obtain hŒ± | hŒ± := le_total (q ^ (n / 2) : ‚Ñù) (2 * Œ±‚Åª¬π ^ 2)
  ¬∑ rw [rpow_le_iff_le_log, log_mul, log_pow, Nat.cast_two, ‚Üê mul_div_right_comm,
      mul_div_assoc, ‚Üê le_div_iff‚ÇÄ] at hŒ±
    calc
      _ ‚â§ (log 2 + 2 * log Œ±‚Åª¬π) / (log q / 2) := hŒ±
      _ = 4 / log q * (log Œ±‚Åª¬π + log 2 / 2) := by ring
      _ ‚â§ 130 * (0 + 2) ^ 8 * (log Œ±‚Åª¬π + 2) := by
        gcongr
        ¬∑ calc
            4 / log q ‚â§ 4 / log 3 := by gcongr; assumption_mod_cast
            _ ‚â§ 4 / log 2 := by gcongr; norm_num
            _ ‚â§ 4 / 0.6931471803 := by gcongr; exact log_two_gt_d9.le
            _ ‚â§ 130 * (0 + 2) ^ 8 := by norm_num
        ¬∑ calc
            log 2 / 2 ‚â§ 0.6931471808 / 2 := by gcongr; exact log_two_lt_d9.le
            _ ‚â§ 2 := by norm_num
      _ ‚â§ 130 * (log Œ±‚Åª¬π + 2) ^ 8 * (log Œ±‚Åª¬π + 2) := by gcongr
      _ = 130 * curlog Œ± ^ 9 := by
        rw [curlog_eq_log_inv_add_two, pow_succ _ 8, mul_assoc]; positivity
    all_goals positivity
  have ind (i : ‚Ñï) :
    ‚àÉ (V : Type u) (_ : AddCommGroup V) (_ : Fintype V) (_ : DecidableEq V) (_ : Module (ZMod q) V)
      (B : Finset V), n ‚â§ finrank (ZMod q) V + i * curlog Œ± ^ 8 ‚àß ThreeAPFree (B : Set V) ‚àß
      Œ± ‚â§ B.dens ‚àß
      (B.dens < (65 / 64 : ‚Ñù) ^ i * Œ± ‚Üí
        2‚Åª¬π ‚â§ card V * ‚ü™Œº B ‚àó Œº B, Œº (B.image (2 ‚Ä¢ ¬∑))‚ü´_[‚Ñù]) := by
    induction' i with i ih hi
    ¬∑ exact ‚ü®G, inferInstance, inferInstance, inferInstance, inferInstance, A, by simp, hA,
        by simp, by simp [Œ±, nnratCast_dens, Fintype.card_subtype, subset_iff]‚ü©
    obtain ‚ü®V, _, _, _, _, B, hV, hB, hŒ±Œ≤, hBV‚ü© := ih
    obtain hB' | hB' := le_or_lt 2‚Åª¬π (card V * ‚ü™Œº B ‚àó Œº B, Œº (B.image (2 ‚Ä¢ ¬∑))‚ü´_[‚Ñù])
    ¬∑ exact ‚ü®V, inferInstance, inferInstance, inferInstance, inferInstance, B,
        hV.trans (by gcongr; exact i.le_succ), hB, hŒ±Œ≤, fun _ ‚Ü¶ hB'‚ü©
    have : 2‚Åª¬π ‚â§ |card V * ‚ü™Œº B ‚àó Œº B, Œº (B.image (2 ‚Ä¢ ¬∑))‚ü´_[‚Ñù] - 1| := by
      rw [abs_sub_comm, le_abs, le_sub_comm]
      norm_num at hB' ‚ä¢
      exact .inl hB'.le
    obtain ‚ü®V', _, hVV', hv'‚ü© := di_in_ff hq‚ÇÉ hq (by positivity) two_inv_lt_one hŒ±Œ≤ (by
      rwa [Finset.dens_image (Nat.Coprime.nsmul_right_bijective _)]
      simpa [card_eq_pow_finrank (K := ZMod q) (V := V), ZMod.card] using hq'.pow) hŒ±‚ÇÄ this
    refine ‚ü®V', inferInstance, inferInstance, inferInstance, inferInstance, ?_‚ü©
    sorry
  obtain ‚ü®V, _, _, _, _, B, hV, hB, hŒ±Œ≤, hBV‚ü© := ind ‚åäcurlog Œ± / log (65 / 64)‚åã‚Çä
  let Œ≤ : ‚Ñù := B.dens
  have aux : 0 < log (65 / 64) := log_pos (by norm_num)
  specialize hBV $ by
    calc
      _ ‚â§ (1 : ‚Ñù) := mod_cast dens_le_one
      _ < _ := ?_
    rw [‚Üê inv_pos_lt_iff_one_lt_mul, lt_pow_iff_log_lt, ‚Üê div_lt_iff]
    calc
      log Œ±‚Åª¬π / log (65 / 64)
        < ‚åälog Œ±‚Åª¬π / log (65 / 64)‚åã‚Çä + 1 := Nat.lt_floor_add_one _
      _ = ‚åä(log Œ±‚Åª¬π + log (65 / 64)) / log (65 / 64)‚åã‚Çä := by
        rw [‚Üê div_add_one aux.ne', Nat.floor_add_one, Nat.cast_succ]
        exact div_nonneg (log_nonneg $ one_le_inv (by positivity) (by simp [Œ±])) aux.le
      _ ‚â§ ‚åäcurlog Œ± / log (65 / 64)‚åã‚Çä := by
        rw [curlog_eq_log_inv_add_two]
        gcongr
        ¬∑ calc
            log (65 / 64) ‚â§ log 2 := by gcongr; norm_num
            _ ‚â§ 0.6931471808 := log_two_lt_d9.le
            _ ‚â§ 2 := by norm_num
        ¬∑ positivity
    all_goals positivity
  rw [hB.l2Inner_mu_conv_mu_mu_two_smul_mu] at hBV
  suffices h : (q ^ (n - 65 * curlog Œ± ^ 9) : ‚Ñù) ‚â§ q ^ (n / 2) by
    rw [rpow_le_rpow_left_iff ‚Äπ_‚Ä∫, sub_le_comm, sub_half, div_le_iff‚ÇÄ' zero_lt_two, ‚Üê mul_assoc] at h
    norm_num at h
    exact h
  calc
    _ ‚â§ ‚Üëq ^ (finrank (ZMod q) V : ‚Ñù) := by
      gcongr
      ¬∑ assumption
      rw [sub_le_comm]
      calc
        n - finrank (ZMod q) V ‚â§ ‚åäcurlog Œ± / log (65 / 64)‚åã‚Çä * curlog Œ± ^ 8 := by
          rwa [sub_le_iff_le_add']
        _ ‚â§ curlog Œ± / log (65 / 64) * curlog Œ± ^ 8 := by
          gcongr; exact Nat.floor_le (by positivity)
        _ = (log (65 / 64)) ‚Åª¬π * curlog Œ± ^ 9 := by ring
        _ ‚â§ _ := by
          gcongr
          rw [inv_le ‚Äπ_‚Ä∫ (by positivity)]
          calc
            65‚Åª¬π = 1 - (65 / 64)‚Åª¬π := by norm_num
            _ ‚â§ log (65 / 64) := one_sub_inv_le_log_of_pos (by positivity)
    _ = ‚Üë(card V) := by simp [card_eq_pow_finrank (K := ZMod q) (V := V)]
    _ ‚â§ 2 * Œ≤‚Åª¬π ^ 2 := by
      rw [‚Üê natCast_card_mul_nnratCast_dens, mul_pow, mul_inv, ‚Üê mul_assoc,
        ‚Üê div_eq_mul_inv (card V : ‚Ñù), ‚Üê zpow_one_sub_natCast‚ÇÄ (by positivity)] at hBV
      have : 0 < (card V : ‚Ñù) := by positivity
      simpa [le_inv_mul_iff‚ÇÄ, mul_inv_le_iff‚ÇÄ, this, zero_lt_two, mul_comm] using hBV
    _ ‚â§ 2 * Œ±‚Åª¬π ^ 2 := by gcongr
    _ ‚â§ _ := hŒ±
  simpa [card_eq_pow_finrank (K := ZMod q) (V := V), ZMod.card] using hq'.pow
