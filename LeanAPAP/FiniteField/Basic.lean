import LeanAPAP.Physics.Unbalancing
import LeanAPAP.Prereqs.Convolution.Norm
import LeanAPAP.Prereqs.DFT
import LeanAPAP.Prereqs.Misc

/-!
# Finite field case
-/

open FiniteDimensional Finset Fintype Function Real

open scoped BigOperators NNReal

variable {G : Type*} [AddCommGroup G] [DecidableEq G] [Fintype G] {A C : Finset G} {Œ≥ Œµ : ‚Ñù}

lemma global_dichotomy (hA : A.Nonempty) (hŒ≥C : Œ≥ ‚â§ C.card / card G) (hŒ≥ : 0 < Œ≥)
    (hAC : Œµ ‚â§ |card G * ‚ü™Œº A ‚àó Œº A, Œº C‚ü´_[‚Ñù] - 1|) :
    Œµ / (2 * card G) ‚â§
      ‚Äñbalance (Œº_[‚Ñù] A) ‚óã balance (Œº A)‚Äñ_[‚Üë(2 * ‚åàŒ≥.curlog‚åâ‚Çä), const _ (card G)‚Åª¬π] := by
  have hC : C.nonempty := by
    rw [nonempty_iff_ne_empty]
    rintro rfl
    simpa [hŒ≥.not_le] using hŒ≥C
  have hŒ≥‚ÇÅ : Œ≥ ‚â§ 1 := hŒ≥C.trans (div_le_one_of_le (Nat.cast_le.2 C.card_le_univ) $ by positivity)
  set p := 2 * ‚åàŒ≥.curlog‚åâ‚Çä
  have hp : 1 < p :=
    Nat.succ_le_iff.1 (le_mul_of_one_le_right zero_le' $ Nat.ceil_pos.2 $ curlog_pos hŒ≥ hŒ≥‚ÇÅ)
  have hp' : (p‚Åª¬π : ‚Ñù‚â•0) < 1 := inv_lt_one (by exact_mod_cast hp)
  rw [mul_comm, ‚Üêdiv_div, div_le_iff (zero_lt_two' ‚Ñù)]
  calc
    _ ‚â§ _ := div_le_div_of_le (card G).cast_nonneg hAC
    _ = |‚ü™balance (Œº A) ‚àó balance (Œº A), Œº C‚ü´_[‚Ñù]| := _
    _ ‚â§ ‚Äñbalance (Œº_[‚Ñù] A) ‚àó balance (Œº A)‚Äñ_[p] * ‚ÄñŒº_[‚Ñù] C‚Äñ_[‚Üë(1 - p‚Åª¬π : ‚Ñù‚â•0)‚Åª¬π] :=
      (abs_l2inner_le_lpNorm_mul_lpNorm ‚ü®by exact_mod_cast hp, _‚ü© _ _)
    _ ‚â§ ‚Äñbalance (Œº_[‚Ñù] A) ‚óã balance (Œº A)‚Äñ_[p] * (card G ^ (-p‚Åª¬π : ‚Ñù) * Œ≥ ^ (-p‚Åª¬π : ‚Ñù)) :=
      (mul_le_mul (lpNorm_conv_le_lpNorm_dconv' (by positivity) (even_two_mul _) _) _
        (by positivity) (by positivity))
    _ =
        ‚Äñbalance (Œº_[‚Ñù] A) ‚óã balance (Œº A)‚Äñ_[‚Üë(2 * ‚åàŒ≥.curlog‚åâ‚Çä), const _ (card G)‚Åª¬π] *
          Œ≥ ^ (-p‚Åª¬π : ‚Ñù) :=
      _
    _ ‚â§ _ := mul_le_mul_of_nonneg_left _ $ by positivity
  ¬∑
    rw [‚Üêbalance_conv, balance, l2inner_sub_left, l2inner_const_left, expect_conv, sum_mu ‚Ñù hA,
        expect_mu ‚Ñù hA, sum_mu ‚Ñù hC, conj_trivial, one_mul, mul_one, ‚Üêmul_inv_cancel, ‚Üêmul_sub,
        abs_mul, abs_of_nonneg, mul_div_cancel_left] <;>
      positivity
  ¬∑ rw [NNReal.coe_inv, NNReal.coe_sub hp'.le]
    simp
  ¬∑ rw [lpNorm_mu (one_le_inv (tsub_pos_of_lt hp') tsub_le_self) hC, NNReal.coe_inv,
      NNReal.coe_sub hp'.le, NNReal.coe_one, inv_inv, sub_sub_cancel_left, ‚Üêmul_rpow]
    rw [le_div_iff, mul_comm] at hŒ≥C
    refine' rpow_le_rpow_of_nonpos _ hŒ≥C (neg_nonpos.2 _)
    all_goals positivity
  ¬∑ simp_rw [Nat.cast_mul, Nat.cast_two]
    rw [wlpNorm_const_right, mul_assoc, mul_left_comm, NNReal.coe_inv, inv_rpow, rpow_neg]
    push_cast
    any_goals norm_cast; rw [Nat.succ_le_iff]
    all_goals positivity
  ¬∑ push_cast
    norm_num
    rw [‚Üêneg_mul, rpow_mul, one_div, rpow_inv_le_iff_of_pos]
    refine'
      (rpow_le_rpow_of_exponent_ge hŒ≥ hŒ≥‚ÇÅ $
            neg_le_neg $ inv_le_inv_of_le (curlog_pos hŒ≥ hŒ≥‚ÇÅ) $ Nat.le_ceil _).trans
        ((rpow_neg_inv_curlog hŒ≥.le hŒ≥‚ÇÅ).trans $ exp_one_lt_d9.le.trans $ by norm_num)
    all_goals positivity

variable {q n : ‚Ñï} [Module (ZMod q) G] {A‚ÇÅ A‚ÇÇ : Finset G} (S : Finset G) {Œ± : ‚Ñù}

lemma ap_in_ff (hA‚ÇÅ : Œ± ‚â§ A‚ÇÅ.card / card G) (hA‚ÇÇ : Œ± ‚â§ A‚ÇÇ.card / card G) :
    ‚àÉ (V : AffineSubspace (ZMod q) G) (V' : Finset G),
      (V : Set G) = V' ‚àß
        ‚Üë(finrank (ZMod q) G - finrank (ZMod q) V.direction) ‚â§
            2 ^ 27 * Œ±.curlog ^ 2 * (Œµ * Œ±).curlog ^ 2 / Œµ ^ 2 ‚àß
          |‚àë x in S, (Œº V' ‚àó Œº A‚ÇÅ ‚àó Œº A‚ÇÇ) x - ‚àë x in S, (Œº A‚ÇÅ ‚àó Œº A‚ÇÇ) x| ‚â§ Œµ :=
  sorry

lemma di_in_ff (hŒµ‚ÇÄ : 0 < Œµ) (hŒµ‚ÇÅ : Œµ < 1) (hŒ±A : Œ± ‚â§ A.card / card G) (hŒ≥C : Œ≥ ‚â§ C.card / card G)
    (hŒ≥ : 0 < Œ≥) (hAC : Œµ ‚â§ |card G * ‚ü™Œº A ‚àó Œº A, Œº C‚ü´_[‚Ñù] - 1|) :
    ‚àÉ (V : AffineSubspace (ZMod q) G) (V' : Finset G),
      (V : Set G) = V' ‚àß
        ‚Üë(finrank (ZMod q) G - finrank (ZMod q) V.direction) ‚â§
            2 ^ 171 * Œ±.curlog ^ 4 * Œ≥.curlog ^ 4 / Œµ ^ 24 ‚àß
          (1 + Œµ / 32) * Œ± ‚â§ ‚Äñùü≠_[‚Ñù] A * Œº V'‚Äñ_[‚ä§] := by
  obtain rfl | hA := A.eq_empty_or_nonempty
  stop
    refine' ‚ü®‚ä§, univ, _‚ü©
    rw [AffineSubspace.direction_top]
    simp only [AffineSubspace.top_coe, coe_univ, eq_self_iff_true, finrank_top, tsub_self,
      Nat.cast_zero, indicate_empty, MulZeroClass.zero_mul, lpNorm_zero, true_and_iff,
      Finset.card_empty, zero_div] at hŒ±A ‚ä¢
    exact ‚ü®by positivity, mul_nonpos_of_nonneg_of_nonpos (by positivity) hŒ±A‚ü©
  have hŒ≥‚ÇÅ : Œ≥ ‚â§ 1 := hŒ≥C.trans (div_le_one_of_le (Nat.cast_le.2 C.card_le_univ) $ by positivity)
  have hG : (card G : ‚Ñù) ‚â† 0 := by positivity
  have :=
    unbalancing _ (mul_ne_zero two_ne_zero (Nat.ceil_pos.2 $ curlog_pos hŒ≥ hŒ≥‚ÇÅ).ne') (Œµ / 2)
      (by positivity) (div_le_one_of_le (hŒµ‚ÇÅ.le.trans $ by norm_num) $ by norm_num)
      (const _ (card G)‚Åª¬π) (card G ‚Ä¢ (balance (Œº A) ‚óã balance (Œº A)))
      (sqrt (card G) ‚Ä¢ balance (Œº A)) (const _ (card G)‚Åª¬π) _ _ _ _
  rotate_left
  stop
    ext a : 1
    simp [smul_dconv, dconv_smul, smul_smul]
  ¬∑ simp [card_univ, show (card G : ‚ÑÇ) ‚â† 0 by sorry]
  ¬∑ simp only [comp_const, Nonneg.coe_inv, NNReal.coe_nat_cast]
    rw [‚ÜêENNReal.coe_one, lpNorm_const one_ne_zero]
    simp only [Nonneg.coe_one, inv_one, rpow_one, norm_inv, norm_coe_nat,
      mul_inv_cancel (show (card G : ‚Ñù) ‚â† 0 by positivity)]
  ¬∑ have hŒ≥' : (1 : ‚Ñù‚â•0) ‚â§ 2 * ‚åàŒ≥.curlog‚åâ‚Çä := sorry
    simpa [wlpNorm_nsmul hŒ≥', ‚Üênsmul_eq_mul, div_le_iff' (show (0 : ‚Ñù) < card G by positivity), ‚Üê
      div_div, *] using global_dichotomy hA hŒ≥C hŒ≥ hAC
  sorry
